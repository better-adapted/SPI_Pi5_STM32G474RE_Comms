
SPI_FullDuplex_ComIT_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024f0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080026c8  080026c8  000036c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026d8  080026d8  0000408c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080026d8  080026d8  0000408c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080026d8  080026d8  0000408c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026d8  080026d8  000036d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026dc  080026dc  000036dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080026e0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000008c  0800276c  0000408c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  0800276c  00004198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000a441  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000090  00000000  00000000  0000e4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00008bb7  00000000  00000000  0000e58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a33  00000000  00000000  00017144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008e0  00000000  00000000  00018b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e77da  00000000  00000000  00019458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000006a5  00000000  00000000  00100c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002446f  00000000  00000000  001012d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125746  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022f0  00000000  00000000  0012578c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000008c 	.word	0x2000008c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080026b0 	.word	0x080026b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000090 	.word	0x20000090
 8000214:	080026b0 	.word	0x080026b0

08000218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000218:	480d      	ldr	r0, [pc, #52]	@ (8000250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480d      	ldr	r0, [pc, #52]	@ (8000254 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490e      	ldr	r1, [pc, #56]	@ (8000258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0e      	ldr	r2, [pc, #56]	@ (800025c <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0b      	ldr	r2, [pc, #44]	@ (8000260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0b      	ldr	r4, [pc, #44]	@ (8000264 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000242:	f000 fa5f 	bl	8000704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000246:	f002 fa0f 	bl	8002668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800024a:	f000 f821 	bl	8000290 <main>

0800024e <LoopForever>:

LoopForever:
    b LoopForever
 800024e:	e7fe      	b.n	800024e <LoopForever>
  ldr   r0, =_estack
 8000250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000258:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800025c:	080026e0 	.word	0x080026e0
  ldr r2, =_sbss
 8000260:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000264:	20000198 	.word	0x20000198

08000268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000268:	e7fe      	b.n	8000268 <ADC1_2_IRQHandler>
	...

0800026c <SPI1_TEST_SEND>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef SPI1_TEST_SEND()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	return HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, 111);
 8000270:	236f      	movs	r3, #111	@ 0x6f
 8000272:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <SPI1_TEST_SEND+0x18>)
 8000274:	4904      	ldr	r1, [pc, #16]	@ (8000288 <SPI1_TEST_SEND+0x1c>)
 8000276:	4805      	ldr	r0, [pc, #20]	@ (800028c <SPI1_TEST_SEND+0x20>)
 8000278:	f001 fc94 	bl	8001ba4 <HAL_SPI_TransmitReceive_IT>
 800027c:	4603      	mov	r3, r0
}
 800027e:	4618      	mov	r0, r3
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	2000010c 	.word	0x2000010c
 8000288:	20000000 	.word	0x20000000
 800028c:	200000a8 	.word	0x200000a8

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fa4b 	bl	8000730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f845 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f8c9 	bl	8000434 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002a2:	f000 f88d 	bl	80003c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f9e0 	bl	800066c <BSP_LED_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_StatusTypeDef state_res = HAL_SPI_GetState(&hspi1);
 80002ac:	4819      	ldr	r0, [pc, #100]	@ (8000314 <main+0x84>)
 80002ae:	f001 fe55 	bl	8001f5c <HAL_SPI_GetState>
 80002b2:	4603      	mov	r3, r0
 80002b4:	71fb      	strb	r3, [r7, #7]

	  if(Transfer_Init)
 80002b6:	4b18      	ldr	r3, [pc, #96]	@ (8000318 <main+0x88>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d00b      	beq.n	80002d6 <main+0x46>
	  {
		  HAL_StatusTypeDef res = SPI1_TEST_SEND();
 80002be:	f7ff ffd5 	bl	800026c <SPI1_TEST_SEND>
 80002c2:	4603      	mov	r3, r0
 80002c4:	71bb      	strb	r3, [r7, #6]
		  if ( res != HAL_OK)
 80002c6:	79bb      	ldrb	r3, [r7, #6]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <main+0x40>
		  {
		    /* Transfer error in transmission process */
		    Error_Handler();
 80002cc:	f000 f8fc 	bl	80004c8 <Error_Handler>
		  }
		  Transfer_Init=0;
 80002d0:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <main+0x88>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
	  }

	  while (wTransferState == TRANSFER_WAIT)
 80002d6:	bf00      	nop
 80002d8:	4b10      	ldr	r3, [pc, #64]	@ (800031c <main+0x8c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0fb      	beq.n	80002d8 <main+0x48>
	  {
	  }

	  switch (wTransferState)
 80002e0:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <main+0x8c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d002      	beq.n	80002ee <main+0x5e>
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d00c      	beq.n	8000306 <main+0x76>
 80002ec:	e011      	b.n	8000312 <main+0x82>
	  {
	    case TRANSFER_COMPLETE :
	      /*##-3- Compare the sent and received buffers ##############################*/
	      {
	        // all good!
	    	BSP_LED_Toggle(LED2);
 80002ee:	2000      	movs	r0, #0
 80002f0:	f000 f9f2 	bl	80006d8 <BSP_LED_Toggle>
	    	wTransferState = TRANSFER_PROCESSED;
 80002f4:	4b09      	ldr	r3, [pc, #36]	@ (800031c <main+0x8c>)
 80002f6:	2203      	movs	r2, #3
 80002f8:	601a      	str	r2, [r3, #0]
	    	Transfer_Process_Counter++;
 80002fa:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <main+0x90>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	3301      	adds	r3, #1
 8000300:	4a07      	ldr	r2, [pc, #28]	@ (8000320 <main+0x90>)
 8000302:	6013      	str	r3, [r2, #0]
	      }
	      break;
 8000304:	e005      	b.n	8000312 <main+0x82>

	    case TRANSFER_ERROR:
			Transfer_Error_Counter++;
 8000306:	4b07      	ldr	r3, [pc, #28]	@ (8000324 <main+0x94>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	3301      	adds	r3, #1
 800030c:	4a05      	ldr	r2, [pc, #20]	@ (8000324 <main+0x94>)
 800030e:	6013      	str	r3, [r2, #0]
			  //Transfer_Init=1;
	      break;
 8000310:	bf00      	nop
  {
 8000312:	e7cb      	b.n	80002ac <main+0x1c>
 8000314:	200000a8 	.word	0x200000a8
 8000318:	20000078 	.word	0x20000078
 800031c:	2000018c 	.word	0x2000018c
 8000320:	20000188 	.word	0x20000188
 8000324:	20000184 	.word	0x20000184

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b094      	sub	sp, #80	@ 0x50
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	2238      	movs	r2, #56	@ 0x38
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f002 f98e 	bl	8002658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800034a:	2000      	movs	r0, #0
 800034c:	f000 fdac 	bl	8000ea8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000350:	2302      	movs	r3, #2
 8000352:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000354:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000358:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035a:	2340      	movs	r3, #64	@ 0x40
 800035c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035e:	2302      	movs	r3, #2
 8000360:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000362:	2302      	movs	r3, #2
 8000364:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000366:	2304      	movs	r3, #4
 8000368:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800036a:	2355      	movs	r3, #85	@ 0x55
 800036c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800036e:	2302      	movs	r3, #2
 8000370:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000372:	2302      	movs	r3, #2
 8000374:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000376:	2302      	movs	r3, #2
 8000378:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	f107 0318 	add.w	r3, r7, #24
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fe46 	bl	8001010 <HAL_RCC_OscConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800038a:	f000 f89d 	bl	80004c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	230f      	movs	r3, #15
 8000390:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000392:	2303      	movs	r3, #3
 8000394:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2104      	movs	r1, #4
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 f944 	bl	8001634 <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80003b2:	f000 f889 	bl	80004c8 <Error_Handler>
  }
}
 80003b6:	bf00      	nop
 80003b8:	3750      	adds	r7, #80	@ 0x50
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c4:	4b19      	ldr	r3, [pc, #100]	@ (800042c <MX_SPI1_Init+0x6c>)
 80003c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000430 <MX_SPI1_Init+0x70>)
 80003c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80003ca:	4b18      	ldr	r3, [pc, #96]	@ (800042c <MX_SPI1_Init+0x6c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d0:	4b16      	ldr	r3, [pc, #88]	@ (800042c <MX_SPI1_Init+0x6c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d6:	4b15      	ldr	r3, [pc, #84]	@ (800042c <MX_SPI1_Init+0x6c>)
 80003d8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80003dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003de:	4b13      	ldr	r3, [pc, #76]	@ (800042c <MX_SPI1_Init+0x6c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e4:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_SPI1_Init+0x6c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80003ea:	4b10      	ldr	r3, [pc, #64]	@ (800042c <MX_SPI1_Init+0x6c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f0:	4b0e      	ldr	r3, [pc, #56]	@ (800042c <MX_SPI1_Init+0x6c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f6:	4b0d      	ldr	r3, [pc, #52]	@ (800042c <MX_SPI1_Init+0x6c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80003fc:	4b0b      	ldr	r3, [pc, #44]	@ (800042c <MX_SPI1_Init+0x6c>)
 80003fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000402:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 32773;
 8000404:	4b09      	ldr	r3, [pc, #36]	@ (800042c <MX_SPI1_Init+0x6c>)
 8000406:	f248 0205 	movw	r2, #32773	@ 0x8005
 800040a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800040c:	4b07      	ldr	r3, [pc, #28]	@ (800042c <MX_SPI1_Init+0x6c>)
 800040e:	2202      	movs	r2, #2
 8000410:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <MX_SPI1_Init+0x6c>)
 8000414:	2200      	movs	r2, #0
 8000416:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000418:	4804      	ldr	r0, [pc, #16]	@ (800042c <MX_SPI1_Init+0x6c>)
 800041a:	f001 faef 	bl	80019fc <HAL_SPI_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000424:	f000 f850 	bl	80004c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	200000a8 	.word	0x200000a8
 8000430:	40013000 	.word	0x40013000

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <MX_GPIO_Init+0x44>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043e:	4a0e      	ldr	r2, [pc, #56]	@ (8000478 <MX_GPIO_Init+0x44>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000446:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <MX_GPIO_Init+0x44>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000452:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <MX_GPIO_Init+0x44>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000456:	4a08      	ldr	r2, [pc, #32]	@ (8000478 <MX_GPIO_Init+0x44>)
 8000458:	f043 0302 	orr.w	r3, r3, #2
 800045c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800045e:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <MX_GPIO_Init+0x44>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000462:	f003 0302 	and.w	r3, r3, #2
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of Interrupt TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
	  static int callbacks;
	  /* Turn LED2 on: Transfer in transmission/reception process is complete */
	  wTransferState = TRANSFER_COMPLETE;
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <HAL_SPI_TxRxCpltCallback+0x24>)
 8000486:	2201      	movs	r2, #1
 8000488:	601a      	str	r2, [r3, #0]

	  SPI1_TEST_SEND();
 800048a:	f7ff feef 	bl	800026c <SPI1_TEST_SEND>

	  callbacks++;
 800048e:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <HAL_SPI_TxRxCpltCallback+0x28>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	3301      	adds	r3, #1
 8000494:	4a03      	ldr	r2, [pc, #12]	@ (80004a4 <HAL_SPI_TxRxCpltCallback+0x28>)
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	2000018c 	.word	0x2000018c
 80004a4:	20000190 	.word	0x20000190

080004a8 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 80004b0:	4b04      	ldr	r3, [pc, #16]	@ (80004c4 <HAL_SPI_ErrorCallback+0x1c>)
 80004b2:	2202      	movs	r2, #2
 80004b4:	601a      	str	r2, [r3, #0]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	2000018c 	.word	0x2000018c

080004c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
  {
    /* Toggle LED2 for error */
    BSP_LED_Toggle(LED2);
 80004cc:	2000      	movs	r0, #0
 80004ce:	f000 f903 	bl	80006d8 <BSP_LED_Toggle>
    HAL_Delay(1000);
 80004d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004d6:	f000 f99b 	bl	8000810 <HAL_Delay>
    BSP_LED_Toggle(LED2);
 80004da:	bf00      	nop
 80004dc:	e7f6      	b.n	80004cc <Error_Handler+0x4>
	...

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <HAL_MspInit+0x44>)
 80004e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000524 <HAL_MspInit+0x44>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <HAL_MspInit+0x44>)
 80004f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <HAL_MspInit+0x44>)
 8000500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000502:	4a08      	ldr	r2, [pc, #32]	@ (8000524 <HAL_MspInit+0x44>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000508:	6593      	str	r3, [r2, #88]	@ 0x58
 800050a:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <HAL_MspInit+0x44>)
 800050c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800050e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000516:	f000 fd6b 	bl	8000ff0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	@ 0x28
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a31      	ldr	r2, [pc, #196]	@ (800060c <HAL_SPI_MspInit+0xe4>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d15c      	bne.n	8000604 <HAL_SPI_MspInit+0xdc>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800054a:	4b31      	ldr	r3, [pc, #196]	@ (8000610 <HAL_SPI_MspInit+0xe8>)
 800054c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800054e:	4a30      	ldr	r2, [pc, #192]	@ (8000610 <HAL_SPI_MspInit+0xe8>)
 8000550:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000554:	6613      	str	r3, [r2, #96]	@ 0x60
 8000556:	4b2e      	ldr	r3, [pc, #184]	@ (8000610 <HAL_SPI_MspInit+0xe8>)
 8000558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800055a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b2b      	ldr	r3, [pc, #172]	@ (8000610 <HAL_SPI_MspInit+0xe8>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	4a2a      	ldr	r2, [pc, #168]	@ (8000610 <HAL_SPI_MspInit+0xe8>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800056e:	4b28      	ldr	r3, [pc, #160]	@ (8000610 <HAL_SPI_MspInit+0xe8>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b25      	ldr	r3, [pc, #148]	@ (8000610 <HAL_SPI_MspInit+0xe8>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057e:	4a24      	ldr	r2, [pc, #144]	@ (8000610 <HAL_SPI_MspInit+0xe8>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000586:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <HAL_SPI_MspInit+0xe8>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000592:	2310      	movs	r3, #16
 8000594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005a2:	2305      	movs	r3, #5
 80005a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b0:	f000 fac6 	bl	8000b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80005b4:	2318      	movs	r3, #24
 80005b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b8:	2302      	movs	r3, #2
 80005ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005c4:	2305      	movs	r3, #5
 80005c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	4811      	ldr	r0, [pc, #68]	@ (8000614 <HAL_SPI_MspInit+0xec>)
 80005d0:	f000 fab6 	bl	8000b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005d4:	2320      	movs	r3, #32
 80005d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d8:	2302      	movs	r3, #2
 80005da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005dc:	2302      	movs	r3, #2
 80005de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005e4:	2305      	movs	r3, #5
 80005e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	4809      	ldr	r0, [pc, #36]	@ (8000614 <HAL_SPI_MspInit+0xec>)
 80005f0:	f000 faa6 	bl	8000b40 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2101      	movs	r1, #1
 80005f8:	2023      	movs	r0, #35	@ 0x23
 80005fa:	f000 fa06 	bl	8000a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80005fe:	2023      	movs	r0, #35	@ 0x23
 8000600:	f000 fa1d 	bl	8000a3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	@ 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40013000 	.word	0x40013000
 8000610:	40021000 	.word	0x40021000
 8000614:	48000400 	.word	0x48000400

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <HardFault_Handler+0x4>

0800062e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064e:	f000 f8c1 	bl	80007d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800065c:	4802      	ldr	r0, [pc, #8]	@ (8000668 <SPI1_IRQHandler+0x10>)
 800065e:	f001 fb73 	bl	8001d48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200000a8 	.word	0x200000a8

0800066c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000676:	4b16      	ldr	r3, [pc, #88]	@ (80006d0 <BSP_LED_Init+0x64>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	4a15      	ldr	r2, [pc, #84]	@ (80006d0 <BSP_LED_Init+0x64>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <BSP_LED_Init+0x64>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 800068e:	2320      	movs	r3, #32
 8000690:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4a0c      	ldr	r2, [pc, #48]	@ (80006d4 <BSP_LED_Init+0x68>)
 80006a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a6:	f107 020c 	add.w	r2, r7, #12
 80006aa:	4611      	mov	r1, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fa47 	bl	8000b40 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	4a07      	ldr	r2, [pc, #28]	@ (80006d4 <BSP_LED_Init+0x68>)
 80006b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ba:	2120      	movs	r1, #32
 80006bc:	2200      	movs	r2, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fbc0 	bl	8000e44 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3720      	adds	r7, #32
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	2000007c 	.word	0x2000007c

080006d8 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4a06      	ldr	r2, [pc, #24]	@ (8000700 <BSP_LED_Toggle+0x28>)
 80006e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ea:	2220      	movs	r2, #32
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fbc0 	bl	8000e74 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000007c 	.word	0x2000007c

08000704 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000708:	4b08      	ldr	r3, [pc, #32]	@ (800072c <SystemInit+0x28>)
 800070a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800070e:	4a07      	ldr	r2, [pc, #28]	@ (800072c <SystemInit+0x28>)
 8000710:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000714:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000718:	4b04      	ldr	r3, [pc, #16]	@ (800072c <SystemInit+0x28>)
 800071a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800071e:	609a      	str	r2, [r3, #8]
#endif
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073a:	2003      	movs	r0, #3
 800073c:	f000 f95a 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000740:	2000      	movs	r0, #0
 8000742:	f000 f80d 	bl	8000760 <HAL_InitTick>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d002      	beq.n	8000752 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800074c:	2301      	movs	r3, #1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	e001      	b.n	8000756 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000752:	f7ff fec5 	bl	80004e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000756:	79fb      	ldrb	r3, [r7, #7]

}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000768:	2300      	movs	r3, #0
 800076a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800076c:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <HAL_InitTick+0x68>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d022      	beq.n	80007ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000774:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <HAL_InitTick+0x6c>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <HAL_InitTick+0x68>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000780:	fbb1 f3f3 	udiv	r3, r1, r3
 8000784:	fbb2 f3f3 	udiv	r3, r2, r3
 8000788:	4618      	mov	r0, r3
 800078a:	f000 f966 	bl	8000a5a <HAL_SYSTICK_Config>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d10f      	bne.n	80007b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b0f      	cmp	r3, #15
 8000798:	d809      	bhi.n	80007ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079a:	2200      	movs	r2, #0
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	f04f 30ff 	mov.w	r0, #4294967295
 80007a2:	f000 f932 	bl	8000a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <HAL_InitTick+0x70>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	e007      	b.n	80007be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]
 80007b2:	e004      	b.n	80007be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
 80007b8:	e001      	b.n	80007be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000088 	.word	0x20000088
 80007cc:	20000080 	.word	0x20000080
 80007d0:	20000084 	.word	0x20000084

080007d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <HAL_IncTick+0x1c>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <HAL_IncTick+0x20>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a03      	ldr	r2, [pc, #12]	@ (80007f0 <HAL_IncTick+0x1c>)
 80007e4:	6013      	str	r3, [r2, #0]
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	20000194 	.word	0x20000194
 80007f4:	20000088 	.word	0x20000088

080007f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b03      	ldr	r3, [pc, #12]	@ (800080c <HAL_GetTick+0x14>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000194 	.word	0x20000194

08000810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000818:	f7ff ffee 	bl	80007f8 <HAL_GetTick>
 800081c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000828:	d004      	beq.n	8000834 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <HAL_Delay+0x40>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	4413      	add	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000834:	bf00      	nop
 8000836:	f7ff ffdf 	bl	80007f8 <HAL_GetTick>
 800083a:	4602      	mov	r2, r0
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	68fa      	ldr	r2, [r7, #12]
 8000842:	429a      	cmp	r2, r3
 8000844:	d8f7      	bhi.n	8000836 <HAL_Delay+0x26>
  {
  }
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000088 	.word	0x20000088

08000854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800087c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000886:	4a04      	ldr	r2, [pc, #16]	@ (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	60d3      	str	r3, [r2, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a0:	4b04      	ldr	r3, [pc, #16]	@ (80008b4 <__NVIC_GetPriorityGrouping+0x18>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	f003 0307 	and.w	r3, r3, #7
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	db0b      	blt.n	80008e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 021f 	and.w	r2, r3, #31
 80008d0:	4907      	ldr	r1, [pc, #28]	@ (80008f0 <__NVIC_EnableIRQ+0x38>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	fa00 f202 	lsl.w	r2, r0, r2
 80008de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e100 	.word	0xe000e100

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	db0a      	blt.n	800091e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	490c      	ldr	r1, [pc, #48]	@ (8000940 <__NVIC_SetPriority+0x4c>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091c:	e00a      	b.n	8000934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4908      	ldr	r1, [pc, #32]	@ (8000944 <__NVIC_SetPriority+0x50>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	3b04      	subs	r3, #4
 800092c:	0112      	lsls	r2, r2, #4
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	440b      	add	r3, r1
 8000932:	761a      	strb	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	@ 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f1c3 0307 	rsb	r3, r3, #7
 8000962:	2b04      	cmp	r3, #4
 8000964:	bf28      	it	cs
 8000966:	2304      	movcs	r3, #4
 8000968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3304      	adds	r3, #4
 800096e:	2b06      	cmp	r3, #6
 8000970:	d902      	bls.n	8000978 <NVIC_EncodePriority+0x30>
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3b03      	subs	r3, #3
 8000976:	e000      	b.n	800097a <NVIC_EncodePriority+0x32>
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	f04f 32ff 	mov.w	r2, #4294967295
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43da      	mvns	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43d9      	mvns	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	4313      	orrs	r3, r2
         );
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3724      	adds	r7, #36	@ 0x24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f7ff ff8e 	bl	80008f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff29 	bl	8000854 <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a18:	f7ff ff40 	bl	800089c <__NVIC_GetPriorityGrouping>
 8000a1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	6978      	ldr	r0, [r7, #20]
 8000a24:	f7ff ff90 	bl	8000948 <NVIC_EncodePriority>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff5f 	bl	80008f4 <__NVIC_SetPriority>
}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff33 	bl	80008b8 <__NVIC_EnableIRQ>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ffa4 	bl	80009b0 <SysTick_Config>
 8000a68:	4603      	mov	r3, r0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b084      	sub	sp, #16
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d00d      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2201      	movs	r2, #1
 8000a94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	e047      	b.n	8000b36 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f022 020e 	bic.w	r2, r2, #14
 8000ab4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f022 0201 	bic.w	r2, r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ad0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ad4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	f003 021f 	and.w	r2, r3, #31
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000af2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00c      	beq.n	8000b16 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000b0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000b14:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	4798      	blx	r3
    }
  }
  return status;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b4e:	e15a      	b.n	8000e06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	2101      	movs	r1, #1
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 814c 	beq.w	8000e00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d005      	beq.n	8000b80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d130      	bne.n	8000be2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	091b      	lsrs	r3, r3, #4
 8000bcc:	f003 0201 	and.w	r2, r3, #1
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d017      	beq.n	8000c1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d123      	bne.n	8000c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	08da      	lsrs	r2, r3, #3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3208      	adds	r2, #8
 8000c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	220f      	movs	r2, #15
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	691a      	ldr	r2, [r3, #16]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	08da      	lsrs	r2, r3, #3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3208      	adds	r2, #8
 8000c6c:	6939      	ldr	r1, [r7, #16]
 8000c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0203 	and.w	r2, r3, #3
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 80a6 	beq.w	8000e00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb4:	4b5b      	ldr	r3, [pc, #364]	@ (8000e24 <HAL_GPIO_Init+0x2e4>)
 8000cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb8:	4a5a      	ldr	r2, [pc, #360]	@ (8000e24 <HAL_GPIO_Init+0x2e4>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cc0:	4b58      	ldr	r3, [pc, #352]	@ (8000e24 <HAL_GPIO_Init+0x2e4>)
 8000cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ccc:	4a56      	ldr	r2, [pc, #344]	@ (8000e28 <HAL_GPIO_Init+0x2e8>)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000cf6:	d01f      	beq.n	8000d38 <HAL_GPIO_Init+0x1f8>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a4c      	ldr	r2, [pc, #304]	@ (8000e2c <HAL_GPIO_Init+0x2ec>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d019      	beq.n	8000d34 <HAL_GPIO_Init+0x1f4>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a4b      	ldr	r2, [pc, #300]	@ (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d013      	beq.n	8000d30 <HAL_GPIO_Init+0x1f0>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8000e34 <HAL_GPIO_Init+0x2f4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d00d      	beq.n	8000d2c <HAL_GPIO_Init+0x1ec>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a49      	ldr	r2, [pc, #292]	@ (8000e38 <HAL_GPIO_Init+0x2f8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d007      	beq.n	8000d28 <HAL_GPIO_Init+0x1e8>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a48      	ldr	r2, [pc, #288]	@ (8000e3c <HAL_GPIO_Init+0x2fc>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d101      	bne.n	8000d24 <HAL_GPIO_Init+0x1e4>
 8000d20:	2305      	movs	r3, #5
 8000d22:	e00a      	b.n	8000d3a <HAL_GPIO_Init+0x1fa>
 8000d24:	2306      	movs	r3, #6
 8000d26:	e008      	b.n	8000d3a <HAL_GPIO_Init+0x1fa>
 8000d28:	2304      	movs	r3, #4
 8000d2a:	e006      	b.n	8000d3a <HAL_GPIO_Init+0x1fa>
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e004      	b.n	8000d3a <HAL_GPIO_Init+0x1fa>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e002      	b.n	8000d3a <HAL_GPIO_Init+0x1fa>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <HAL_GPIO_Init+0x1fa>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	f002 0203 	and.w	r2, r2, #3
 8000d40:	0092      	lsls	r2, r2, #2
 8000d42:	4093      	lsls	r3, r2
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d4a:	4937      	ldr	r1, [pc, #220]	@ (8000e28 <HAL_GPIO_Init+0x2e8>)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d58:	4b39      	ldr	r3, [pc, #228]	@ (8000e40 <HAL_GPIO_Init+0x300>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d7c:	4a30      	ldr	r2, [pc, #192]	@ (8000e40 <HAL_GPIO_Init+0x300>)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d82:	4b2f      	ldr	r3, [pc, #188]	@ (8000e40 <HAL_GPIO_Init+0x300>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000da6:	4a26      	ldr	r2, [pc, #152]	@ (8000e40 <HAL_GPIO_Init+0x300>)
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000dac:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <HAL_GPIO_Init+0x300>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e40 <HAL_GPIO_Init+0x300>)
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <HAL_GPIO_Init+0x300>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dfa:	4a11      	ldr	r2, [pc, #68]	@ (8000e40 <HAL_GPIO_Init+0x300>)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f47f ae9d 	bne.w	8000b50 <HAL_GPIO_Init+0x10>
  }
}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	48000800 	.word	0x48000800
 8000e34:	48000c00 	.word	0x48000c00
 8000e38:	48001000 	.word	0x48001000
 8000e3c:	48001400 	.word	0x48001400
 8000e40:	40010400 	.word	0x40010400

08000e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
 8000e50:	4613      	mov	r3, r2
 8000e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e54:	787b      	ldrb	r3, [r7, #1]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e60:	e002      	b.n	8000e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	041a      	lsls	r2, r3, #16
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	43d9      	mvns	r1, r3
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	400b      	ands	r3, r1
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	619a      	str	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d141      	bne.n	8000f3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ec2:	d131      	bne.n	8000f28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ec4:	4b47      	ldr	r3, [pc, #284]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eca:	4a46      	ldr	r2, [pc, #280]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ed0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed4:	4b43      	ldr	r3, [pc, #268]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000edc:	4a41      	ldr	r2, [pc, #260]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ee2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ee4:	4b40      	ldr	r3, [pc, #256]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2232      	movs	r2, #50	@ 0x32
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	4a3f      	ldr	r2, [pc, #252]	@ (8000fec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef4:	0c9b      	lsrs	r3, r3, #18
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000efa:	e002      	b.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f02:	4b38      	ldr	r3, [pc, #224]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f0e:	d102      	bne.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f2      	bne.n	8000efc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f16:	4b33      	ldr	r3, [pc, #204]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f22:	d158      	bne.n	8000fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e057      	b.n	8000fd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f28:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000f38:	e04d      	b.n	8000fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f40:	d141      	bne.n	8000fc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f42:	4b28      	ldr	r3, [pc, #160]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f4e:	d131      	bne.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f50:	4b24      	ldr	r3, [pc, #144]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f56:	4a23      	ldr	r2, [pc, #140]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f60:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f68:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2232      	movs	r2, #50	@ 0x32
 8000f76:	fb02 f303 	mul.w	r3, r2, r3
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f80:	0c9b      	lsrs	r3, r3, #18
 8000f82:	3301      	adds	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f86:	e002      	b.n	8000f8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f9a:	d102      	bne.n	8000fa2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f2      	bne.n	8000f88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fae:	d112      	bne.n	8000fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e011      	b.n	8000fd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000fc4:	e007      	b.n	8000fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fd4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40007000 	.word	0x40007000
 8000fe8:	20000080 	.word	0x20000080
 8000fec:	431bde83 	.word	0x431bde83

08000ff0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	4a04      	ldr	r2, [pc, #16]	@ (800100c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffe:	6093      	str	r3, [r2, #8]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40007000 	.word	0x40007000

08001010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e2fe      	b.n	8001620 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d075      	beq.n	800111a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800102e:	4b97      	ldr	r3, [pc, #604]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001038:	4b94      	ldr	r3, [pc, #592]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2b0c      	cmp	r3, #12
 8001046:	d102      	bne.n	800104e <HAL_RCC_OscConfig+0x3e>
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d002      	beq.n	8001054 <HAL_RCC_OscConfig+0x44>
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	2b08      	cmp	r3, #8
 8001052:	d10b      	bne.n	800106c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001054:	4b8d      	ldr	r3, [pc, #564]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d05b      	beq.n	8001118 <HAL_RCC_OscConfig+0x108>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d157      	bne.n	8001118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e2d9      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001074:	d106      	bne.n	8001084 <HAL_RCC_OscConfig+0x74>
 8001076:	4b85      	ldr	r3, [pc, #532]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a84      	ldr	r2, [pc, #528]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e01d      	b.n	80010c0 <HAL_RCC_OscConfig+0xb0>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x98>
 800108e:	4b7f      	ldr	r3, [pc, #508]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a7e      	ldr	r2, [pc, #504]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b7c      	ldr	r3, [pc, #496]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a7b      	ldr	r2, [pc, #492]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e00b      	b.n	80010c0 <HAL_RCC_OscConfig+0xb0>
 80010a8:	4b78      	ldr	r3, [pc, #480]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a77      	ldr	r2, [pc, #476]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 80010ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b75      	ldr	r3, [pc, #468]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a74      	ldr	r2, [pc, #464]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 80010ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d013      	beq.n	80010f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c8:	f7ff fb96 	bl	80007f8 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fb92 	bl	80007f8 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	@ 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e29e      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010e2:	4b6a      	ldr	r3, [pc, #424]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f0      	beq.n	80010d0 <HAL_RCC_OscConfig+0xc0>
 80010ee:	e014      	b.n	800111a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f0:	f7ff fb82 	bl	80007f8 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fb7e 	bl	80007f8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	@ 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e28a      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800110a:	4b60      	ldr	r3, [pc, #384]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0xe8>
 8001116:	e000      	b.n	800111a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d075      	beq.n	8001212 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001126:	4b59      	ldr	r3, [pc, #356]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001130:	4b56      	ldr	r3, [pc, #344]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b0c      	cmp	r3, #12
 800113e:	d102      	bne.n	8001146 <HAL_RCC_OscConfig+0x136>
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d002      	beq.n	800114c <HAL_RCC_OscConfig+0x13c>
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b04      	cmp	r3, #4
 800114a:	d11f      	bne.n	800118c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800114c:	4b4f      	ldr	r3, [pc, #316]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_OscConfig+0x154>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e25d      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	4b49      	ldr	r3, [pc, #292]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	061b      	lsls	r3, r3, #24
 8001172:	4946      	ldr	r1, [pc, #280]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001178:	4b45      	ldr	r3, [pc, #276]	@ (8001290 <HAL_RCC_OscConfig+0x280>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff faef 	bl	8000760 <HAL_InitTick>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d043      	beq.n	8001210 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e249      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d023      	beq.n	80011dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001194:	4b3d      	ldr	r3, [pc, #244]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a3c      	ldr	r2, [pc, #240]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800119e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a0:	f7ff fb2a 	bl	80007f8 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a8:	f7ff fb26 	bl	80007f8 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e232      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011ba:	4b34      	ldr	r3, [pc, #208]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c6:	4b31      	ldr	r3, [pc, #196]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	061b      	lsls	r3, r3, #24
 80011d4:	492d      	ldr	r1, [pc, #180]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	604b      	str	r3, [r1, #4]
 80011da:	e01a      	b.n	8001212 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011dc:	4b2b      	ldr	r3, [pc, #172]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a2a      	ldr	r2, [pc, #168]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 80011e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fb06 	bl	80007f8 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f0:	f7ff fb02 	bl	80007f8 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e20e      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001202:	4b22      	ldr	r3, [pc, #136]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x1e0>
 800120e:	e000      	b.n	8001212 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001210:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d041      	beq.n	80012a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d01c      	beq.n	8001260 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001226:	4b19      	ldr	r3, [pc, #100]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800122c:	4a17      	ldr	r2, [pc, #92]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001236:	f7ff fadf 	bl	80007f8 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800123e:	f7ff fadb 	bl	80007f8 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e1e7      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0ef      	beq.n	800123e <HAL_RCC_OscConfig+0x22e>
 800125e:	e020      	b.n	80012a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001260:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001262:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001266:	4a09      	ldr	r2, [pc, #36]	@ (800128c <HAL_RCC_OscConfig+0x27c>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001270:	f7ff fac2 	bl	80007f8 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001276:	e00d      	b.n	8001294 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001278:	f7ff fabe 	bl	80007f8 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d906      	bls.n	8001294 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e1ca      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	20000084 	.word	0x20000084
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001294:	4b8c      	ldr	r3, [pc, #560]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 8001296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ea      	bne.n	8001278 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80a6 	beq.w	80013fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012b4:	4b84      	ldr	r3, [pc, #528]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2b4>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x2b6>
 80012c4:	2300      	movs	r3, #0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00d      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b7f      	ldr	r3, [pc, #508]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ce:	4a7e      	ldr	r2, [pc, #504]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d6:	4b7c      	ldr	r3, [pc, #496]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012e2:	2301      	movs	r3, #1
 80012e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e6:	4b79      	ldr	r3, [pc, #484]	@ (80014cc <HAL_RCC_OscConfig+0x4bc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d118      	bne.n	8001324 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012f2:	4b76      	ldr	r3, [pc, #472]	@ (80014cc <HAL_RCC_OscConfig+0x4bc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a75      	ldr	r2, [pc, #468]	@ (80014cc <HAL_RCC_OscConfig+0x4bc>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fa7b 	bl	80007f8 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001306:	f7ff fa77 	bl	80007f8 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e183      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001318:	4b6c      	ldr	r3, [pc, #432]	@ (80014cc <HAL_RCC_OscConfig+0x4bc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d108      	bne.n	800133e <HAL_RCC_OscConfig+0x32e>
 800132c:	4b66      	ldr	r3, [pc, #408]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 800132e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001332:	4a65      	ldr	r2, [pc, #404]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800133c:	e024      	b.n	8001388 <HAL_RCC_OscConfig+0x378>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b05      	cmp	r3, #5
 8001344:	d110      	bne.n	8001368 <HAL_RCC_OscConfig+0x358>
 8001346:	4b60      	ldr	r3, [pc, #384]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 8001348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800134c:	4a5e      	ldr	r2, [pc, #376]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001356:	4b5c      	ldr	r3, [pc, #368]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 8001358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800135c:	4a5a      	ldr	r2, [pc, #360]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001366:	e00f      	b.n	8001388 <HAL_RCC_OscConfig+0x378>
 8001368:	4b57      	ldr	r3, [pc, #348]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 800136a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800136e:	4a56      	ldr	r2, [pc, #344]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001378:	4b53      	ldr	r3, [pc, #332]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 800137a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800137e:	4a52      	ldr	r2, [pc, #328]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d016      	beq.n	80013be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff fa32 	bl	80007f8 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001396:	e00a      	b.n	80013ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff fa2e 	bl	80007f8 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e138      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013ae:	4b46      	ldr	r3, [pc, #280]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 80013b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0ed      	beq.n	8001398 <HAL_RCC_OscConfig+0x388>
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013be:	f7ff fa1b 	bl	80007f8 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c4:	e00a      	b.n	80013dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c6:	f7ff fa17 	bl	80007f8 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e121      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013dc:	4b3a      	ldr	r3, [pc, #232]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 80013de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1ed      	bne.n	80013c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013ea:	7ffb      	ldrb	r3, [r7, #31]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f0:	4b35      	ldr	r3, [pc, #212]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 80013f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f4:	4a34      	ldr	r2, [pc, #208]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 80013f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0320 	and.w	r3, r3, #32
 8001404:	2b00      	cmp	r3, #0
 8001406:	d03c      	beq.n	8001482 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d01c      	beq.n	800144a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001410:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 8001412:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001416:	4a2c      	ldr	r2, [pc, #176]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001420:	f7ff f9ea 	bl	80007f8 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001428:	f7ff f9e6 	bl	80007f8 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e0f2      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800143a:	4b23      	ldr	r3, [pc, #140]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 800143c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0ef      	beq.n	8001428 <HAL_RCC_OscConfig+0x418>
 8001448:	e01b      	b.n	8001482 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800144a:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 800144c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001450:	4a1d      	ldr	r2, [pc, #116]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145a:	f7ff f9cd 	bl	80007f8 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001462:	f7ff f9c9 	bl	80007f8 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e0d5      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001474:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 8001476:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1ef      	bne.n	8001462 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 80c9 	beq.w	800161e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800148c:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b0c      	cmp	r3, #12
 8001496:	f000 8083 	beq.w	80015a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d15e      	bne.n	8001560 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <HAL_RCC_OscConfig+0x4b8>)
 80014a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff f9a3 	bl	80007f8 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b4:	e00c      	b.n	80014d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff f99f 	bl	80007f8 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d905      	bls.n	80014d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0ab      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d0:	4b55      	ldr	r3, [pc, #340]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ec      	bne.n	80014b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014dc:	4b52      	ldr	r3, [pc, #328]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	4b52      	ldr	r3, [pc, #328]	@ (800162c <HAL_RCC_OscConfig+0x61c>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6a11      	ldr	r1, [r2, #32]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014ec:	3a01      	subs	r2, #1
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	4311      	orrs	r1, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80014f6:	0212      	lsls	r2, r2, #8
 80014f8:	4311      	orrs	r1, r2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80014fe:	0852      	lsrs	r2, r2, #1
 8001500:	3a01      	subs	r2, #1
 8001502:	0552      	lsls	r2, r2, #21
 8001504:	4311      	orrs	r1, r2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800150a:	0852      	lsrs	r2, r2, #1
 800150c:	3a01      	subs	r2, #1
 800150e:	0652      	lsls	r2, r2, #25
 8001510:	4311      	orrs	r1, r2
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001516:	06d2      	lsls	r2, r2, #27
 8001518:	430a      	orrs	r2, r1
 800151a:	4943      	ldr	r1, [pc, #268]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 800151c:	4313      	orrs	r3, r2
 800151e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001520:	4b41      	ldr	r3, [pc, #260]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a40      	ldr	r2, [pc, #256]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 8001526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800152a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800152c:	4b3e      	ldr	r3, [pc, #248]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4a3d      	ldr	r2, [pc, #244]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 8001532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001536:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff f95e 	bl	80007f8 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff f95a 	bl	80007f8 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e066      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001552:	4b35      	ldr	r3, [pc, #212]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x530>
 800155e:	e05e      	b.n	800161e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001560:	4b31      	ldr	r3, [pc, #196]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a30      	ldr	r2, [pc, #192]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 8001566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800156a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff f944 	bl	80007f8 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff f940 	bl	80007f8 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e04c      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001586:	4b28      	ldr	r3, [pc, #160]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001592:	4b25      	ldr	r3, [pc, #148]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	4924      	ldr	r1, [pc, #144]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 8001598:	4b25      	ldr	r3, [pc, #148]	@ (8001630 <HAL_RCC_OscConfig+0x620>)
 800159a:	4013      	ands	r3, r2
 800159c:	60cb      	str	r3, [r1, #12]
 800159e:	e03e      	b.n	800161e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e039      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <HAL_RCC_OscConfig+0x618>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d12c      	bne.n	800161a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ca:	3b01      	subs	r3, #1
 80015cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d123      	bne.n	800161a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015de:	429a      	cmp	r2, r3
 80015e0:	d11b      	bne.n	800161a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d113      	bne.n	800161a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	3b01      	subs	r3, #1
 8001600:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d109      	bne.n	800161a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	3b01      	subs	r3, #1
 8001614:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3720      	adds	r7, #32
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021000 	.word	0x40021000
 800162c:	019f800c 	.word	0x019f800c
 8001630:	feeefffc 	.word	0xfeeefffc

08001634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e11e      	b.n	800188a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b91      	ldr	r3, [pc, #580]	@ (8001894 <HAL_RCC_ClockConfig+0x260>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d910      	bls.n	800167c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b8e      	ldr	r3, [pc, #568]	@ (8001894 <HAL_RCC_ClockConfig+0x260>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 020f 	bic.w	r2, r3, #15
 8001662:	498c      	ldr	r1, [pc, #560]	@ (8001894 <HAL_RCC_ClockConfig+0x260>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b8a      	ldr	r3, [pc, #552]	@ (8001894 <HAL_RCC_ClockConfig+0x260>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e106      	b.n	800188a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d073      	beq.n	8001770 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b03      	cmp	r3, #3
 800168e:	d129      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001690:	4b81      	ldr	r3, [pc, #516]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0f4      	b.n	800188a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80016a0:	f000 f966 	bl	8001970 <RCC_GetSysClockFreqFromPLLSource>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4a7c      	ldr	r2, [pc, #496]	@ (800189c <HAL_RCC_ClockConfig+0x268>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d93f      	bls.n	800172e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80016ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d009      	beq.n	80016ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d033      	beq.n	800172e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d12f      	bne.n	800172e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016ce:	4b72      	ldr	r3, [pc, #456]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80016d6:	4a70      	ldr	r2, [pc, #448]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 80016d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80016de:	2380      	movs	r3, #128	@ 0x80
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e024      	b.n	800172e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d109      	bne.n	800170c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0c6      	b.n	800188a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fc:	4b66      	ldr	r3, [pc, #408]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0be      	b.n	800188a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800170c:	f000 f8ce 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8001710:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4a61      	ldr	r2, [pc, #388]	@ (800189c <HAL_RCC_ClockConfig+0x268>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d909      	bls.n	800172e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800171a:	4b5f      	ldr	r3, [pc, #380]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001722:	4a5d      	ldr	r2, [pc, #372]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 8001724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001728:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800172a:	2380      	movs	r3, #128	@ 0x80
 800172c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800172e:	4b5a      	ldr	r3, [pc, #360]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f023 0203 	bic.w	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4957      	ldr	r1, [pc, #348]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001740:	f7ff f85a 	bl	80007f8 <HAL_GetTick>
 8001744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	e00a      	b.n	800175e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001748:	f7ff f856 	bl	80007f8 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e095      	b.n	800188a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175e:	4b4e      	ldr	r3, [pc, #312]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 020c 	and.w	r2, r3, #12
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	429a      	cmp	r2, r3
 800176e:	d1eb      	bne.n	8001748 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d023      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001788:	4b43      	ldr	r3, [pc, #268]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a42      	ldr	r2, [pc, #264]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 800178e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001792:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80017a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80017a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 80017aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b0:	4b39      	ldr	r3, [pc, #228]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4936      	ldr	r1, [pc, #216]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2b80      	cmp	r3, #128	@ 0x80
 80017c8:	d105      	bne.n	80017d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80017ca:	4b33      	ldr	r3, [pc, #204]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4a32      	ldr	r2, [pc, #200]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 80017d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80017d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001894 <HAL_RCC_ClockConfig+0x260>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d21d      	bcs.n	8001820 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <HAL_RCC_ClockConfig+0x260>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 020f 	bic.w	r2, r3, #15
 80017ec:	4929      	ldr	r1, [pc, #164]	@ (8001894 <HAL_RCC_ClockConfig+0x260>)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017f4:	f7ff f800 	bl	80007f8 <HAL_GetTick>
 80017f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	e00a      	b.n	8001812 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fc:	f7fe fffc 	bl	80007f8 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e03b      	b.n	800188a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <HAL_RCC_ClockConfig+0x260>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d1ed      	bne.n	80017fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4917      	ldr	r1, [pc, #92]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d009      	beq.n	800185e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	490f      	ldr	r1, [pc, #60]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800185e:	f000 f825 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8001862:	4602      	mov	r2, r0
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <HAL_RCC_ClockConfig+0x264>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	490c      	ldr	r1, [pc, #48]	@ (80018a0 <HAL_RCC_ClockConfig+0x26c>)
 8001870:	5ccb      	ldrb	r3, [r1, r3]
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <HAL_RCC_ClockConfig+0x270>)
 800187c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <HAL_RCC_ClockConfig+0x274>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe ff6c 	bl	8000760 <HAL_InitTick>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40022000 	.word	0x40022000
 8001898:	40021000 	.word	0x40021000
 800189c:	04c4b400 	.word	0x04c4b400
 80018a0:	080026c8 	.word	0x080026c8
 80018a4:	20000080 	.word	0x20000080
 80018a8:	20000084 	.word	0x20000084

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d102      	bne.n	80018c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018be:	4b2a      	ldr	r3, [pc, #168]	@ (8001968 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	e047      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018c4:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018d0:	4b26      	ldr	r3, [pc, #152]	@ (800196c <HAL_RCC_GetSysClockFreq+0xc0>)
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	e03e      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80018d6:	4b23      	ldr	r3, [pc, #140]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	d136      	bne.n	8001950 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3301      	adds	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d10c      	bne.n	800191a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001900:	4a1a      	ldr	r2, [pc, #104]	@ (800196c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	fbb2 f3f3 	udiv	r3, r2, r3
 8001908:	4a16      	ldr	r2, [pc, #88]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xb8>)
 800190a:	68d2      	ldr	r2, [r2, #12]
 800190c:	0a12      	lsrs	r2, r2, #8
 800190e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
      break;
 8001918:	e00c      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800191a:	4a13      	ldr	r2, [pc, #76]	@ (8001968 <HAL_RCC_GetSysClockFreq+0xbc>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4a10      	ldr	r2, [pc, #64]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001924:	68d2      	ldr	r2, [r2, #12]
 8001926:	0a12      	lsrs	r2, r2, #8
 8001928:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	617b      	str	r3, [r7, #20]
      break;
 8001932:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0e5b      	lsrs	r3, r3, #25
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	3301      	adds	r3, #1
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	fbb2 f3f3 	udiv	r3, r2, r3
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	e001      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001954:	693b      	ldr	r3, [r7, #16]
}
 8001956:	4618      	mov	r0, r3
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	00f42400 	.word	0x00f42400
 800196c:	016e3600 	.word	0x016e3600

08001970 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001976:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001980:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	3301      	adds	r3, #1
 800198c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d10c      	bne.n	80019ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001994:	4a17      	ldr	r2, [pc, #92]	@ (80019f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	fbb2 f3f3 	udiv	r3, r2, r3
 800199c:	4a14      	ldr	r2, [pc, #80]	@ (80019f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800199e:	68d2      	ldr	r2, [r2, #12]
 80019a0:	0a12      	lsrs	r2, r2, #8
 80019a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80019a6:	fb02 f303 	mul.w	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
    break;
 80019ac:	e00c      	b.n	80019c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019ae:	4a12      	ldr	r2, [pc, #72]	@ (80019f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	4a0e      	ldr	r2, [pc, #56]	@ (80019f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019b8:	68d2      	ldr	r2, [r2, #12]
 80019ba:	0a12      	lsrs	r2, r2, #8
 80019bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	617b      	str	r3, [r7, #20]
    break;
 80019c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0e5b      	lsrs	r3, r3, #25
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	3301      	adds	r3, #1
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80019e2:	687b      	ldr	r3, [r7, #4]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	40021000 	.word	0x40021000
 80019f4:	016e3600 	.word	0x016e3600
 80019f8:	00f42400 	.word	0x00f42400

080019fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0c6      	b.n	8001b9c <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a1e:	d009      	beq.n	8001a34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
 8001a26:	e005      	b.n	8001a34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d106      	bne.n	8001a4e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7fe fd6d 	bl	8000528 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2202      	movs	r2, #2
 8001a52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a64:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a6e:	d902      	bls.n	8001a76 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e002      	b.n	8001a7c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a7a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001a84:	d007      	beq.n	8001a96 <HAL_SPI_Init+0x9a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a8e:	d002      	beq.n	8001a96 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad8:	ea42 0103 	orr.w	r1, r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001af4:	d11b      	bne.n	8001b2e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10b      	bne.n	8001b16 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001b06:	d903      	bls.n	8001b10 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b0e:	e002      	b.n	8001b16 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d107      	bne.n	8001b2e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	0c1b      	lsrs	r3, r3, #16
 8001b34:	f003 0204 	and.w	r2, r3, #4
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001b54:	ea42 0103 	orr.w	r1, r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b6e:	d105      	bne.n	8001b7c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	b292      	uxth	r2, r2
 8001b7a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	69da      	ldr	r2, [r3, #28]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001bb8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d00c      	beq.n	8001be0 <HAL_SPI_TransmitReceive_IT+0x3c>
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bcc:	d106      	bne.n	8001bdc <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <HAL_SPI_TransmitReceive_IT+0x38>
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d001      	beq.n	8001be0 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e0a5      	b.n	8001d2c <HAL_SPI_TransmitReceive_IT+0x188>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_SPI_TransmitReceive_IT+0x4e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_SPI_TransmitReceive_IT+0x4e>
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e09a      	b.n	8001d2c <HAL_SPI_TransmitReceive_IT+0x188>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_SPI_TransmitReceive_IT+0x60>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e093      	b.n	8001d2c <HAL_SPI_TransmitReceive_IT+0x188>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d003      	beq.n	8001c20 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	887a      	ldrh	r2, [r7, #2]
 8001c36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	887a      	ldrh	r2, [r7, #2]
 8001c42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	887a      	ldrh	r2, [r7, #2]
 8001c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c56:	d906      	bls.n	8001c66 <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4a37      	ldr	r2, [pc, #220]	@ (8001d38 <HAL_SPI_TransmitReceive_IT+0x194>)
 8001c5c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4a36      	ldr	r2, [pc, #216]	@ (8001d3c <HAL_SPI_TransmitReceive_IT+0x198>)
 8001c62:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c64:	e005      	b.n	8001c72 <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4a35      	ldr	r2, [pc, #212]	@ (8001d40 <HAL_SPI_TransmitReceive_IT+0x19c>)
 8001c6a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4a35      	ldr	r2, [pc, #212]	@ (8001d44 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 8001c70:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c7a:	d11f      	bne.n	8001cbc <HAL_SPI_TransmitReceive_IT+0x118>
  {
    hspi->CRCSize = 1U;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c8a:	d806      	bhi.n	8001c9a <HAL_SPI_TransmitReceive_IT+0xf6>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d102      	bne.n	8001c9a <HAL_SPI_TransmitReceive_IT+0xf6>
    {
      hspi->CRCSize = 2U;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2202      	movs	r2, #2
 8001c98:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	e002      	b.n	8001cc2 <HAL_SPI_TransmitReceive_IT+0x11e>
  }
  else
  {
    hspi->CRCSize = 0U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001cca:	d802      	bhi.n	8001cd2 <HAL_SPI_TransmitReceive_IT+0x12e>
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d908      	bls.n	8001ce4 <HAL_SPI_TransmitReceive_IT+0x140>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	e007      	b.n	8001cf4 <HAL_SPI_TransmitReceive_IT+0x150>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001cf2:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cfe:	2b40      	cmp	r3, #64	@ 0x40
 8001d00:	d007      	beq.n	8001d12 <HAL_SPI_TransmitReceive_IT+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8001d28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	0800219d 	.word	0x0800219d
 8001d3c:	0800224d 	.word	0x0800224d
 8001d40:	08001fa5 	.word	0x08001fa5
 8001d44:	080020e1 	.word	0x080020e1

08001d48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	099b      	lsrs	r3, r3, #6
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10f      	bne.n	8001d8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00a      	beq.n	8001d8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	4798      	blx	r3
    return;
 8001d8a:	e0d7      	b.n	8001f3c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00a      	beq.n	8001dae <HAL_SPI_IRQHandler+0x66>
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	09db      	lsrs	r3, r3, #7
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d004      	beq.n	8001dae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	4798      	blx	r3
    return;
 8001dac:	e0c6      	b.n	8001f3c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10c      	bne.n	8001dd4 <HAL_SPI_IRQHandler+0x8c>
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	099b      	lsrs	r3, r3, #6
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80b4 	beq.w	8001f3c <HAL_SPI_IRQHandler+0x1f4>
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80ad 	beq.w	8001f3c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	099b      	lsrs	r3, r3, #6
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d023      	beq.n	8001e36 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d011      	beq.n	8001e1e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfe:	f043 0204 	orr.w	r2, r3, #4
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	e00b      	b.n	8001e36 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	693b      	ldr	r3, [r7, #16]
        return;
 8001e34:	e082      	b.n	8001f3c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d014      	beq.n	8001e6c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00c      	beq.n	8001e92 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7c:	f043 0208 	orr.w	r2, r3, #8
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d04f      	beq.n	8001f3a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001ea8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d104      	bne.n	8001ec6 <HAL_SPI_IRQHandler+0x17e>
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d034      	beq.n	8001f30 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0203 	bic.w	r2, r2, #3
 8001ed4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d011      	beq.n	8001f02 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee2:	4a18      	ldr	r2, [pc, #96]	@ (8001f44 <HAL_SPI_IRQHandler+0x1fc>)
 8001ee4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fdc1 	bl	8000a72 <HAL_DMA_Abort_IT>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001efa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d016      	beq.n	8001f38 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001f44 <HAL_SPI_IRQHandler+0x1fc>)
 8001f10:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fdab 	bl	8000a72 <HAL_DMA_Abort_IT>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8001f2e:	e003      	b.n	8001f38 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7fe fab9 	bl	80004a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001f36:	e000      	b.n	8001f3a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8001f38:	bf00      	nop
    return;
 8001f3a:	bf00      	nop
  }
}
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	08001f79 	.word	0x08001f79

08001f48 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001f6a:	b2db      	uxtb	r3, r3
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f7fe fa87 	bl	80004a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d923      	bls.n	8002000 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	1c9a      	adds	r2, r3, #2
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b02      	subs	r3, #2
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d11f      	bne.n	800202e <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	e016      	b.n	800202e <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f103 020c 	add.w	r2, r3, #12
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d120      	bne.n	800207c <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002042:	d10b      	bne.n	800205c <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002052:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a0b      	ldr	r2, [pc, #44]	@ (8002084 <SPI_2linesRxISR_8BIT+0xe0>)
 8002058:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 800205a:	e00f      	b.n	800207c <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800206a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002070:	b29b      	uxth	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fa92 	bl	80025a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	08002089 	.word	0x08002089

08002088 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	330c      	adds	r3, #12
 800209a:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 80020a4:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020aa:	1e5a      	subs	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10f      	bne.n	80020d8 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020c6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fa64 	bl	80025a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d912      	bls.n	8002118 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f6:	881a      	ldrh	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002102:	1c9a      	adds	r2, r3, #2
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b02      	subs	r3, #2
 8002110:	b29a      	uxth	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002116:	e012      	b.n	800213e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	330c      	adds	r3, #12
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d126      	bne.n	8002196 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002150:	d110      	bne.n	8002174 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002160:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002170:	605a      	str	r2, [r3, #4]
      return;
 8002172:	e010      	b.n	8002196 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002182:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 fa05 	bl	80025a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	b292      	uxth	r2, r2
 80021b0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	1c9a      	adds	r2, r3, #2
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d118      	bne.n	800220c <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021e2:	d103      	bne.n	80021ec <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002214 <SPI_2linesRxISR_16BIT+0x78>)
 80021e8:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 80021ea:	e00f      	b.n	800220c <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f9ca 	bl	80025a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	08002219 	.word	0x08002219

08002218 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800222c:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800223c:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f9ae 	bl	80025a0 <SPI_CloseRxTx_ISR>
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002258:	881a      	ldrh	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002264:	1c9a      	adds	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d126      	bne.n	80022d0 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800228a:	d110      	bne.n	80022ae <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800229a:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022aa:	605a      	str	r2, [r3, #4]
      return;
 80022ac:	e010      	b.n	80022d0 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022bc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f968 	bl	80025a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022e8:	f7fe fa86 	bl	80007f8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022f8:	f7fe fa7e 	bl	80007f8 <HAL_GetTick>
 80022fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022fe:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	015b      	lsls	r3, r3, #5
 8002304:	0d1b      	lsrs	r3, r3, #20
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	fb02 f303 	mul.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800230e:	e054      	b.n	80023ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d050      	beq.n	80023ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002318:	f7fe fa6e 	bl	80007f8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	429a      	cmp	r2, r3
 8002326:	d902      	bls.n	800232e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d13d      	bne.n	80023aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800233c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002346:	d111      	bne.n	800236c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002350:	d004      	beq.n	800235c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235a:	d107      	bne.n	800236c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800236a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002374:	d10f      	bne.n	8002396 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002394:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e017      	b.n	80023da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4013      	ands	r3, r2
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	bf0c      	ite	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	2300      	movne	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d19b      	bne.n	8002310 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000080 	.word	0x20000080

080023e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	@ 0x28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80023fa:	f7fe f9fd 	bl	80007f8 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	4413      	add	r3, r2
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800240a:	f7fe f9f5 	bl	80007f8 <HAL_GetTick>
 800240e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	330c      	adds	r3, #12
 8002416:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002418:	4b3d      	ldr	r3, [pc, #244]	@ (8002510 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00da      	lsls	r2, r3, #3
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	0d1b      	lsrs	r3, r3, #20
 8002428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800242a:	fb02 f303 	mul.w	r3, r2, r3
 800242e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002430:	e060      	b.n	80024f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002438:	d107      	bne.n	800244a <SPI_WaitFifoStateUntilTimeout+0x62>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d104      	bne.n	800244a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002448:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d050      	beq.n	80024f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002452:	f7fe f9d1 	bl	80007f8 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800245e:	429a      	cmp	r2, r3
 8002460:	d902      	bls.n	8002468 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	2b00      	cmp	r3, #0
 8002466:	d13d      	bne.n	80024e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002476:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002480:	d111      	bne.n	80024a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800248a:	d004      	beq.n	8002496 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002494:	d107      	bne.n	80024a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ae:	d10f      	bne.n	80024d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e010      	b.n	8002506 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	d196      	bne.n	8002432 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3728      	adds	r7, #40	@ 0x28
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000080 	.word	0x20000080

08002514 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2200      	movs	r2, #0
 8002528:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f7ff ff5b 	bl	80023e8 <SPI_WaitFifoStateUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e027      	b.n	8002598 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2200      	movs	r2, #0
 8002550:	2180      	movs	r1, #128	@ 0x80
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f7ff fec0 	bl	80022d8 <SPI_WaitFlagStateUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002562:	f043 0220 	orr.w	r2, r3, #32
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e014      	b.n	8002598 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2200      	movs	r2, #0
 8002576:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f7ff ff34 	bl	80023e8 <SPI_WaitFifoStateUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258a:	f043 0220 	orr.w	r2, r3, #32
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e000      	b.n	8002598 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025a8:	f7fe f926 	bl	80007f8 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0220 	bic.w	r2, r2, #32
 80025bc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	2164      	movs	r1, #100	@ 0x64
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff ffa6 	bl	8002514 <SPI_EndRxTxTransaction>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d2:	f043 0220 	orr.w	r2, r3, #32
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d112      	bne.n	800260e <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f4:	f043 0202 	orr.w	r2, r3, #2
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002604:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fd ff4e 	bl	80004a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800260c:	e020      	b.n	8002650 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002612:	2b00      	cmp	r3, #0
 8002614:	d115      	bne.n	8002642 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b04      	cmp	r3, #4
 8002620:	d107      	bne.n	8002632 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fc8c 	bl	8001f48 <HAL_SPI_RxCpltCallback>
}
 8002630:	e00e      	b.n	8002650 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fd ff1e 	bl	800047c <HAL_SPI_TxRxCpltCallback>
}
 8002640:	e006      	b.n	8002650 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fd ff2c 	bl	80004a8 <HAL_SPI_ErrorCallback>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <memset>:
 8002658:	4402      	add	r2, r0
 800265a:	4603      	mov	r3, r0
 800265c:	4293      	cmp	r3, r2
 800265e:	d100      	bne.n	8002662 <memset+0xa>
 8002660:	4770      	bx	lr
 8002662:	f803 1b01 	strb.w	r1, [r3], #1
 8002666:	e7f9      	b.n	800265c <memset+0x4>

08002668 <__libc_init_array>:
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	4d0d      	ldr	r5, [pc, #52]	@ (80026a0 <__libc_init_array+0x38>)
 800266c:	4c0d      	ldr	r4, [pc, #52]	@ (80026a4 <__libc_init_array+0x3c>)
 800266e:	1b64      	subs	r4, r4, r5
 8002670:	10a4      	asrs	r4, r4, #2
 8002672:	2600      	movs	r6, #0
 8002674:	42a6      	cmp	r6, r4
 8002676:	d109      	bne.n	800268c <__libc_init_array+0x24>
 8002678:	4d0b      	ldr	r5, [pc, #44]	@ (80026a8 <__libc_init_array+0x40>)
 800267a:	4c0c      	ldr	r4, [pc, #48]	@ (80026ac <__libc_init_array+0x44>)
 800267c:	f000 f818 	bl	80026b0 <_init>
 8002680:	1b64      	subs	r4, r4, r5
 8002682:	10a4      	asrs	r4, r4, #2
 8002684:	2600      	movs	r6, #0
 8002686:	42a6      	cmp	r6, r4
 8002688:	d105      	bne.n	8002696 <__libc_init_array+0x2e>
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002690:	4798      	blx	r3
 8002692:	3601      	adds	r6, #1
 8002694:	e7ee      	b.n	8002674 <__libc_init_array+0xc>
 8002696:	f855 3b04 	ldr.w	r3, [r5], #4
 800269a:	4798      	blx	r3
 800269c:	3601      	adds	r6, #1
 800269e:	e7f2      	b.n	8002686 <__libc_init_array+0x1e>
 80026a0:	080026d8 	.word	0x080026d8
 80026a4:	080026d8 	.word	0x080026d8
 80026a8:	080026d8 	.word	0x080026d8
 80026ac:	080026dc 	.word	0x080026dc

080026b0 <_init>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	bf00      	nop
 80026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b6:	bc08      	pop	{r3}
 80026b8:	469e      	mov	lr, r3
 80026ba:	4770      	bx	lr

080026bc <_fini>:
 80026bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026be:	bf00      	nop
 80026c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c2:	bc08      	pop	{r3}
 80026c4:	469e      	mov	lr, r3
 80026c6:	4770      	bx	lr
