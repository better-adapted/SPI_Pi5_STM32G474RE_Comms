
SPI_FullDuplex_ComDMA_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ab4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004c94  08004c94  00005c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004da8  08004da8  0000a070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004da8  08004da8  00005da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004db0  08004db0  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db0  08004db0  00005db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004db4  08004db4  00005db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00004070  20000000  08004db8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042e0  20004070  08008e28  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008350  08008e28  0000a350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000b13b  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000083  00000000  00000000  000151db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000952d  00000000  00000000  0001525e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d8b  00000000  00000000  0001e78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009c0  00000000  00000000  00020518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ed386  00000000  00000000  00020ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000743  00000000  00000000  0010e25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00025fcb  00000000  00000000  0010e9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013496c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000313c  00000000  00000000  001349b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20004070 	.word	0x20004070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004c7c 	.word	0x08004c7c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20004074 	.word	0x20004074
 800021c:	08004c7c 	.word	0x08004c7c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c0:	480d      	ldr	r0, [pc, #52]	@ (80002f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480d      	ldr	r0, [pc, #52]	@ (80002fc <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490e      	ldr	r1, [pc, #56]	@ (8000300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000304 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	@ (8000308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0b      	ldr	r4, [pc, #44]	@ (800030c <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002ea:	f000 fe27 	bl	8000f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ee:	f003 fccb 	bl	8003c88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002f2:	f000 f9df 	bl	80006b4 <main>

080002f6 <LoopForever>:

LoopForever:
    b LoopForever
 80002f6:	e7fe      	b.n	80002f6 <LoopForever>
  ldr   r0, =_estack
 80002f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20004070 	.word	0x20004070
  ldr r2, =_sidata
 8000304:	08004db8 	.word	0x08004db8
  ldr r2, =_sbss
 8000308:	20004070 	.word	0x20004070
  ldr r4, =_ebss
 800030c:	20008350 	.word	0x20008350

08000310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC1_2_IRQHandler>

08000312 <cal_crc>:


inline uint16_t cal_crc(const uint8_t *pBuffer,int pSize);

uint16_t cal_crc(const uint8_t *pBuffer,int pSize)
{
 8000312:	b480      	push	{r7}
 8000314:	b085      	sub	sp, #20
 8000316:	af00      	add	r7, sp, #0
 8000318:	6078      	str	r0, [r7, #4]
 800031a:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF;
 800031c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000320:	81fb      	strh	r3, [r7, #14]
	for(int x=0;x<pSize;x++)
 8000322:	2300      	movs	r3, #0
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	e00b      	b.n	8000340 <cal_crc+0x2e>
	{
		crc -= (uint8_t)*pBuffer;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	461a      	mov	r2, r3
 800032e:	89fb      	ldrh	r3, [r7, #14]
 8000330:	1a9b      	subs	r3, r3, r2
 8000332:	81fb      	strh	r3, [r7, #14]
		pBuffer++;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3301      	adds	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
	for(int x=0;x<pSize;x++)
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	3301      	adds	r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
 8000340:	68ba      	ldr	r2, [r7, #8]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	429a      	cmp	r2, r3
 8000346:	dbef      	blt.n	8000328 <cal_crc+0x16>
	}

	return crc;
 8000348:	89fb      	ldrh	r3, [r7, #14]
}
 800034a:	4618      	mov	r0, r3
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
	...

08000358 <Process_Buffer>:
	uint16_t crc;
}SPI_Transfer_Base_t;
#pragma pack(pop)

uint16_t Process_Buffer()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0
	// all good!
	SPI_Transfer_Status.Process.Begin_Counter++;
 800035e:	4b30      	ldr	r3, [pc, #192]	@ (8000420 <Process_Buffer+0xc8>)
 8000360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000362:	3301      	adds	r3, #1
 8000364:	4a2e      	ldr	r2, [pc, #184]	@ (8000420 <Process_Buffer+0xc8>)
 8000366:	6293      	str	r3, [r2, #40]	@ 0x28

	SPI_Transfer_Base_t *packet = (SPI_Transfer_Base_t *)aRxBuffer;
 8000368:	4b2e      	ldr	r3, [pc, #184]	@ (8000424 <Process_Buffer+0xcc>)
 800036a:	60fb      	str	r3, [r7, #12]

	uint16_t Errors=0;
 800036c:	2300      	movs	r3, #0
 800036e:	82fb      	strh	r3, [r7, #22]
	int Length_Ok=0;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
	int CRC_Ok=0;
 8000374:	2300      	movs	r3, #0
 8000376:	60bb      	str	r3, [r7, #8]

	if(packet->payload.length>sizeof(SPI_Transfer_Base_t))
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	b29b      	uxth	r3, r3
 800037e:	f640 6205 	movw	r2, #3589	@ 0xe05
 8000382:	4293      	cmp	r3, r2
 8000384:	d907      	bls.n	8000396 <Process_Buffer+0x3e>
	{
		Errors=0x0001;
 8000386:	2301      	movs	r3, #1
 8000388:	82fb      	strh	r3, [r7, #22]
		SPI_Transfer_Status.Process.Length_Max_Error++;
 800038a:	4b25      	ldr	r3, [pc, #148]	@ (8000420 <Process_Buffer+0xc8>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038e:	3301      	adds	r3, #1
 8000390:	4a23      	ldr	r2, [pc, #140]	@ (8000420 <Process_Buffer+0xc8>)
 8000392:	6313      	str	r3, [r2, #48]	@ 0x30
 8000394:	e018      	b.n	80003c8 <Process_Buffer+0x70>
	}
	else
	{
		int bytes_rx_in_DMA = SPI_TX_RX_BUFFERSIZE - hspi3.hdmarx->Instance->CNDTR;
 8000396:	4b24      	ldr	r3, [pc, #144]	@ (8000428 <Process_Buffer+0xd0>)
 8000398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	f5c3 4380 	rsb	r3, r3, #16384	@ 0x4000
 80003a2:	607b      	str	r3, [r7, #4]
		if(packet->payload.length == (bytes_rx_in_DMA)-2)
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	b29b      	uxth	r3, r3
 80003aa:	461a      	mov	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3b02      	subs	r3, #2
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d102      	bne.n	80003ba <Process_Buffer+0x62>
		{
			Length_Ok=1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	613b      	str	r3, [r7, #16]
 80003b8:	e006      	b.n	80003c8 <Process_Buffer+0x70>
		}
		else
		{
			Errors=0x0002;
 80003ba:	2302      	movs	r3, #2
 80003bc:	82fb      	strh	r3, [r7, #22]
			SPI_Transfer_Status.Process.Length_DMA_Count_Error++;
 80003be:	4b18      	ldr	r3, [pc, #96]	@ (8000420 <Process_Buffer+0xc8>)
 80003c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003c2:	3301      	adds	r3, #1
 80003c4:	4a16      	ldr	r2, [pc, #88]	@ (8000420 <Process_Buffer+0xc8>)
 80003c6:	6353      	str	r3, [r2, #52]	@ 0x34
		}
	}


	if(Length_Ok)
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d01d      	beq.n	800040a <Process_Buffer+0xb2>
	{
		// ok packet length rx'f matches the DMA counter
		uint16_t rx_crc = cal_crc((uint8_t*)&packet->payload,packet->payload.length);
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	881b      	ldrh	r3, [r3, #0]
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	4619      	mov	r1, r3
 80003d8:	4610      	mov	r0, r2
 80003da:	f7ff ff9a 	bl	8000312 <cal_crc>
 80003de:	4603      	mov	r3, r0
 80003e0:	807b      	strh	r3, [r7, #2]

		if(packet->crc == rx_crc)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	f8b3 3e03 	ldrh.w	r3, [r3, #3587]	@ 0xe03
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	887a      	ldrh	r2, [r7, #2]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d107      	bne.n	8000400 <Process_Buffer+0xa8>
		{
			CRC_Ok=1;
 80003f0:	2301      	movs	r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
			SPI_Transfer_Status.Process.CRC_OK_Counter++;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000420 <Process_Buffer+0xc8>)
 80003f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003f8:	3301      	adds	r3, #1
 80003fa:	4a09      	ldr	r2, [pc, #36]	@ (8000420 <Process_Buffer+0xc8>)
 80003fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80003fe:	e004      	b.n	800040a <Process_Buffer+0xb2>
		}
		else
		{
			SPI_Transfer_Status.Process.CRC_Error_Counter++;
 8000400:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <Process_Buffer+0xc8>)
 8000402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000404:	3301      	adds	r3, #1
 8000406:	4a06      	ldr	r2, [pc, #24]	@ (8000420 <Process_Buffer+0xc8>)
 8000408:	6393      	str	r3, [r2, #56]	@ 0x38
		}
	}

	SPI_Transfer_Status.Process.End_Counter++;
 800040a:	4b05      	ldr	r3, [pc, #20]	@ (8000420 <Process_Buffer+0xc8>)
 800040c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800040e:	3301      	adds	r3, #1
 8000410:	4a03      	ldr	r2, [pc, #12]	@ (8000420 <Process_Buffer+0xc8>)
 8000412:	62d3      	str	r3, [r2, #44]	@ 0x2c

	return Errors;
 8000414:	8afb      	ldrh	r3, [r7, #22]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200081b4 	.word	0x200081b4
 8000424:	200041b0 	.word	0x200041b0
 8000428:	2000408c 	.word	0x2000408c

0800042c <SPI3_TEST_SEND>:

HAL_StatusTypeDef SPI3_TEST_SEND(int pRandom)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	f6ad 6d1c 	subw	sp, sp, #3612	@ 0xe1c
 8000432:	af00      	add	r7, sp, #0
 8000434:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8000438:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 800043c:	6018      	str	r0, [r3, #0]

	HAL_GPIO_WritePin(SPI3_Process_DBG_D1_PORT, SPI3_Process_DBG_D1_PIN, GPIO_PIN_SET); // SPI3_TEST_SEND started
 800043e:	2201      	movs	r2, #1
 8000440:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000444:	485e      	ldr	r0, [pc, #376]	@ (80005c0 <SPI3_TEST_SEND+0x194>)
 8000446:	f001 fd0f 	bl	8001e68 <HAL_GPIO_WritePin>
	static uint32_t tx_counter;
	//memset(aRxBuffer,0xFF,sizeof(aRxBuffer));
	//memset(aTxBuffer,0,sizeof(aTxBuffer));

	SPI_Transfer_Base_t packet = {};
 800044a:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800044e:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 8000452:	4618      	mov	r0, r3
 8000454:	f640 6305 	movw	r3, #3589	@ 0xe05
 8000458:	461a      	mov	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f003 fbbf 	bl	8003bde <memset>

	pRandom=0;
 8000460:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8000464:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]

	if(pRandom)
 800046c:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8000470:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d03f      	beq.n	80004fa <SPI3_TEST_SEND+0xce>
	{
		// random payload
		packet.payload.buffer[4]=tx_counter>>0;
 800047a:	4b52      	ldr	r3, [pc, #328]	@ (80005c4 <SPI3_TEST_SEND+0x198>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	b2da      	uxtb	r2, r3
 8000480:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8000484:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 8000488:	71da      	strb	r2, [r3, #7]
		packet.payload.buffer[5]=tx_counter>>8;
 800048a:	4b4e      	ldr	r3, [pc, #312]	@ (80005c4 <SPI3_TEST_SEND+0x198>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	b2da      	uxtb	r2, r3
 8000492:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8000496:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 800049a:	721a      	strb	r2, [r3, #8]
		packet.payload.buffer[6]=tx_counter>>16;
 800049c:	4b49      	ldr	r3, [pc, #292]	@ (80005c4 <SPI3_TEST_SEND+0x198>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	0c1b      	lsrs	r3, r3, #16
 80004a2:	b2da      	uxtb	r2, r3
 80004a4:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 80004a8:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 80004ac:	725a      	strb	r2, [r3, #9]
		packet.payload.buffer[7]=tx_counter>>24;
 80004ae:	4b45      	ldr	r3, [pc, #276]	@ (80005c4 <SPI3_TEST_SEND+0x198>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	0e1b      	lsrs	r3, r3, #24
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 80004ba:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 80004be:	729a      	strb	r2, [r3, #10]

		for(int x=8;x<sizeof(packet.payload.buffer);x++)
 80004c0:	2308      	movs	r3, #8
 80004c2:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
 80004c6:	e012      	b.n	80004ee <SPI3_TEST_SEND+0xc2>
		{
			packet.payload.buffer[x]=rand();
 80004c8:	f003 fa24 	bl	8003914 <rand>
 80004cc:	4603      	mov	r3, r0
 80004ce:	b2d9      	uxtb	r1, r3
 80004d0:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 80004d4:	f6a3 620c 	subw	r2, r3, #3596	@ 0xe0c
 80004d8:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 80004dc:	4413      	add	r3, r2
 80004de:	3303      	adds	r3, #3
 80004e0:	460a      	mov	r2, r1
 80004e2:	701a      	strb	r2, [r3, #0]
		for(int x=8;x<sizeof(packet.payload.buffer);x++)
 80004e4:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 80004e8:	3301      	adds	r3, #1
 80004ea:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
 80004ee:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 80004f2:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80004f6:	d3e7      	bcc.n	80004c8 <SPI3_TEST_SEND+0x9c>
 80004f8:	e00c      	b.n	8000514 <SPI3_TEST_SEND+0xe8>
		}
	}
	else
	{
		sprintf((char *)packet.payload.buffer, "Reply Message Blah Blah,%09ld,%09ld",tx_counter,HAL_GetTick());
 80004fa:	4b32      	ldr	r3, [pc, #200]	@ (80005c4 <SPI3_TEST_SEND+0x198>)
 80004fc:	681c      	ldr	r4, [r3, #0]
 80004fe:	f000 fd97 	bl	8001030 <HAL_GetTick>
 8000502:	4602      	mov	r2, r0
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	1cd8      	adds	r0, r3, #3
 800050a:	4613      	mov	r3, r2
 800050c:	4622      	mov	r2, r4
 800050e:	492e      	ldr	r1, [pc, #184]	@ (80005c8 <SPI3_TEST_SEND+0x19c>)
 8000510:	f003 fb00 	bl	8003b14 <siprintf>
	}

	HAL_GPIO_WritePin(SPI3_Process_DBG_D5_PORT, SPI3_Process_DBG_D5_PIN, GPIO_PIN_SET); // crc call check
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800051a:	4829      	ldr	r0, [pc, #164]	@ (80005c0 <SPI3_TEST_SEND+0x194>)
 800051c:	f001 fca4 	bl	8001e68 <HAL_GPIO_WritePin>
	packet.payload.length = sizeof(packet)-2;
 8000520:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8000524:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 8000528:	f640 6203 	movw	r2, #3587	@ 0xe03
 800052c:	801a      	strh	r2, [r3, #0]
	packet.crc = cal_crc((const uint8_t *)&packet.payload, packet.payload.length);
 800052e:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8000532:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	4611      	mov	r1, r2
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fee6 	bl	8000312 <cal_crc>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800054e:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 8000552:	f8a3 2e03 	strh.w	r2, [r3, #3587]	@ 0xe03
	HAL_GPIO_WritePin(SPI3_Process_DBG_D5_PORT, SPI3_Process_DBG_D5_PIN, GPIO_PIN_RESET); // crc call check
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800055c:	4818      	ldr	r0, [pc, #96]	@ (80005c0 <SPI3_TEST_SEND+0x194>)
 800055e:	f001 fc83 	bl	8001e68 <HAL_GPIO_WritePin>

	tx_counter++;
 8000562:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <SPI3_TEST_SEND+0x198>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	4a16      	ldr	r2, [pc, #88]	@ (80005c4 <SPI3_TEST_SEND+0x198>)
 800056a:	6013      	str	r3, [r2, #0]

	memcpy(aTxBuffer,&packet,sizeof(packet));
 800056c:	4a17      	ldr	r2, [pc, #92]	@ (80005cc <SPI3_TEST_SEND+0x1a0>)
 800056e:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8000572:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 8000576:	4610      	mov	r0, r2
 8000578:	4619      	mov	r1, r3
 800057a:	f640 6305 	movw	r3, #3589	@ 0xe05
 800057e:	461a      	mov	r2, r3
 8000580:	f003 fba9 	bl	8003cd6 <memcpy>
//	for(int x=0;x<sizeof(packet);x++)
//	{
//		aTxBuffer[x]=byte_ptr[x];
//	}

	HAL_GPIO_WritePin(SPI3_Process_DBG_D1_PORT, SPI3_Process_DBG_D1_PIN, GPIO_PIN_RESET); // SPI3_TEST_SEND done
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800058a:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <SPI3_TEST_SEND+0x194>)
 800058c:	f001 fc6c 	bl	8001e68 <HAL_GPIO_WritePin>

	HAL_StatusTypeDef res =  HAL_SPI_TransmitReceive_DMA(&hspi3, (uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, SPI_TX_RX_BUFFERSIZE);
 8000590:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000594:	4a0e      	ldr	r2, [pc, #56]	@ (80005d0 <SPI3_TEST_SEND+0x1a4>)
 8000596:	490d      	ldr	r1, [pc, #52]	@ (80005cc <SPI3_TEST_SEND+0x1a0>)
 8000598:	480e      	ldr	r0, [pc, #56]	@ (80005d4 <SPI3_TEST_SEND+0x1a8>)
 800059a:	f002 fb13 	bl	8002bc4 <HAL_SPI_TransmitReceive_DMA>
 800059e:	4603      	mov	r3, r0
 80005a0:	f887 3e13 	strb.w	r3, [r7, #3603]	@ 0xe13

	HAL_GPIO_WritePin(SPI3_Process_DBG_D2_PORT, SPI3_Process_DBG_D2_PIN, GPIO_PIN_SET); // ready to RX!
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005aa:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <SPI3_TEST_SEND+0x194>)
 80005ac:	f001 fc5c 	bl	8001e68 <HAL_GPIO_WritePin>

	return res;
 80005b0:	f897 3e13 	ldrb.w	r3, [r7, #3603]	@ 0xe13
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	f607 671c 	addw	r7, r7, #3612	@ 0xe1c
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd90      	pop	{r4, r7, pc}
 80005be:	bf00      	nop
 80005c0:	48000400 	.word	0x48000400
 80005c4:	200081f4 	.word	0x200081f4
 80005c8:	08004c94 	.word	0x08004c94
 80005cc:	20000000 	.word	0x20000000
 80005d0:	200041b0 	.word	0x200041b0
 80005d4:	2000408c 	.word	0x2000408c

080005d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_4)
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	2b10      	cmp	r3, #16
 80005e6:	d12b      	bne.n	8000640 <HAL_GPIO_EXTI_Callback+0x68>
	{
		if(SPI3_Get_CS())
 80005e8:	f000 f836 	bl	8000658 <SPI3_Get_CS>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d020      	beq.n	8000634 <HAL_GPIO_EXTI_Callback+0x5c>
		{
			SPI_Transfer_Status.CS_End.Interrupt_Counter++;
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x70>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	3301      	adds	r3, #1
 80005f8:	4a13      	ldr	r2, [pc, #76]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x70>)
 80005fa:	6053      	str	r3, [r2, #4]

			HAL_StatusTypeDef state_res = HAL_SPI_GetState(&hspi3);
 80005fc:	4813      	ldr	r0, [pc, #76]	@ (800064c <HAL_GPIO_EXTI_Callback+0x74>)
 80005fe:	f002 fde4 	bl	80031ca <HAL_SPI_GetState>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
			if(state_res<=(HAL_StatusTypeDef)HAL_SPI_STATE_ABORT)
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b07      	cmp	r3, #7
 800060a:	d809      	bhi.n	8000620 <HAL_GPIO_EXTI_Callback+0x48>
			{
				SPI_Transfer_Status.CS_End.States[state_res]++;
 800060c:	7bfa      	ldrb	r2, [r7, #15]
 800060e:	490e      	ldr	r1, [pc, #56]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x70>)
 8000610:	0093      	lsls	r3, r2, #2
 8000612:	440b      	add	r3, r1
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	1c59      	adds	r1, r3, #1
 8000618:	480b      	ldr	r0, [pc, #44]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x70>)
 800061a:	0093      	lsls	r3, r2, #2
 800061c:	4403      	add	r3, r0
 800061e:	6099      	str	r1, [r3, #8]
			}

			// just make this state - even if no bytes!
			wTransferState = TRANSFER_COMPLETE;
 8000620:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <HAL_GPIO_EXTI_Callback+0x78>)
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(SPI3_Process_DBG_D0_PORT, SPI3_Process_DBG_D0_PIN, GPIO_PIN_SET); // Signal Main loop sees transfer complete
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800062c:	4809      	ldr	r0, [pc, #36]	@ (8000654 <HAL_GPIO_EXTI_Callback+0x7c>)
 800062e:	f001 fc1b 	bl	8001e68 <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(SPI3_Process_DBG_D2_PORT, SPI3_Process_DBG_D2_PIN, GPIO_PIN_RESET); // RX started with CS low
		}
	}
}
 8000632:	e005      	b.n	8000640 <HAL_GPIO_EXTI_Callback+0x68>
			HAL_GPIO_WritePin(SPI3_Process_DBG_D2_PORT, SPI3_Process_DBG_D2_PIN, GPIO_PIN_RESET); // RX started with CS low
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800063a:	4806      	ldr	r0, [pc, #24]	@ (8000654 <HAL_GPIO_EXTI_Callback+0x7c>)
 800063c:	f001 fc14 	bl	8001e68 <HAL_GPIO_WritePin>
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200081b4 	.word	0x200081b4
 800064c:	2000408c 	.word	0x2000408c
 8000650:	200081b0 	.word	0x200081b0
 8000654:	48000400 	.word	0x48000400

08000658 <SPI3_Get_CS>:

int SPI3_Get_CS()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(SPI3_CS_PORT, SPI3_CS_PIN);
 800065c:	2110      	movs	r1, #16
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f001 fbe9 	bl	8001e38 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
}
 8000668:	4618      	mov	r0, r3
 800066a:	bd80      	pop	{r7, pc}

0800066c <SPI3_PA4_EN_Intterrupt>:

void SPI3_PA4_EN_Intterrupt()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = SPI3_CS_PIN;
 8000680:	2310      	movs	r3, #16
 8000682:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000684:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000688:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SPI3_CS_PORT, &GPIO_InitStruct);
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4619      	mov	r1, r3
 8000692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000696:	f001 f96b 	bl	8001970 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(SPI3_CS_EXTI_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	200a      	movs	r0, #10
 80006a0:	f000 fdcf 	bl	8001242 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(SPI3_CS_EXTI_IRQn);
 80006a4:	200a      	movs	r0, #10
 80006a6:	f000 fde6 	bl	8001276 <HAL_NVIC_EnableIRQ>
}
 80006aa:	bf00      	nop
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fc55 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f893 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 f947 	bl	8000954 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c6:	f000 f913 	bl	80008f0 <MX_DMA_Init>
  MX_SPI3_Init();
 80006ca:	f000 f8d9 	bl	8000880 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED2);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 fbd2 	bl	8000e78 <BSP_LED_Init>
  SPI3_PA4_EN_Intterrupt();
 80006d4:	f7ff ffca 	bl	800066c <SPI3_PA4_EN_Intterrupt>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_StatusTypeDef state_res = HAL_SPI_GetState(&hspi3);
 80006d8:	483d      	ldr	r0, [pc, #244]	@ (80007d0 <main+0x11c>)
 80006da:	f002 fd76 	bl	80031ca <HAL_SPI_GetState>
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]

	  if(Transfer_Init)
 80006e2:	4b3c      	ldr	r3, [pc, #240]	@ (80007d4 <main+0x120>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d00c      	beq.n	8000704 <main+0x50>
	  {
		  HAL_StatusTypeDef res = SPI3_TEST_SEND(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff fe9e 	bl	800042c <SPI3_TEST_SEND>
 80006f0:	4603      	mov	r3, r0
 80006f2:	71bb      	strb	r3, [r7, #6]
		  if ( res != HAL_OK)
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <main+0x4a>
		  {
		    /* Transfer error in transmission process */
		    Error_Handler();
 80006fa:	f000 f999 	bl	8000a30 <Error_Handler>
		  }
		  Transfer_Init=0;
 80006fe:	4b35      	ldr	r3, [pc, #212]	@ (80007d4 <main+0x120>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
	  }

	  while (wTransferState == TRANSFER_WAIT)
 8000704:	bf00      	nop
 8000706:	4b34      	ldr	r3, [pc, #208]	@ (80007d8 <main+0x124>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d0fb      	beq.n	8000706 <main+0x52>
	  {
	  }

	  switch (wTransferState)
 800070e:	4b32      	ldr	r3, [pc, #200]	@ (80007d8 <main+0x124>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d002      	beq.n	800071c <main+0x68>
 8000716:	2b02      	cmp	r3, #2
 8000718:	d037      	beq.n	800078a <main+0xd6>
 800071a:	e058      	b.n	80007ce <main+0x11a>
	  {
	    case TRANSFER_COMPLETE :
			HAL_GPIO_WritePin(SPI3_Process_DBG_D0_PORT, SPI3_Process_DBG_D0_PIN, GPIO_PIN_RESET); // Main loop sees transfer complete
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000722:	482e      	ldr	r0, [pc, #184]	@ (80007dc <main+0x128>)
 8000724:	f001 fba0 	bl	8001e68 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(SPI3_Process_DBG_D3_PORT, SPI3_Process_DBG_D3_PIN, GPIO_PIN_SET); // Process Buffer Start
 8000728:	2201      	movs	r2, #1
 800072a:	2102      	movs	r1, #2
 800072c:	482b      	ldr	r0, [pc, #172]	@ (80007dc <main+0x128>)
 800072e:	f001 fb9b 	bl	8001e68 <HAL_GPIO_WritePin>
	    	Process_Buffer();
 8000732:	f7ff fe11 	bl	8000358 <Process_Buffer>
	    	HAL_GPIO_WritePin(SPI3_Process_DBG_D3_PORT, SPI3_Process_DBG_D3_PIN, GPIO_PIN_RESET); // Process Buffer Done
 8000736:	2200      	movs	r2, #0
 8000738:	2102      	movs	r1, #2
 800073a:	4828      	ldr	r0, [pc, #160]	@ (80007dc <main+0x128>)
 800073c:	f001 fb94 	bl	8001e68 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(SPI3_Process_DBG_D4_PORT, SPI3_Process_DBG_D4_PIN, GPIO_PIN_SET); // SPI config for next packet start
 8000740:	2201      	movs	r2, #1
 8000742:	2104      	movs	r1, #4
 8000744:	4825      	ldr	r0, [pc, #148]	@ (80007dc <main+0x128>)
 8000746:	f001 fb8f 	bl	8001e68 <HAL_GPIO_WritePin>
	    	HAL_SPI_DMAStop(&hspi3);
 800074a:	4821      	ldr	r0, [pc, #132]	@ (80007d0 <main+0x11c>)
 800074c:	f002 fce0 	bl	8003110 <HAL_SPI_DMAStop>
			HAL_SPI_Abort(&hspi3);
 8000750:	481f      	ldr	r0, [pc, #124]	@ (80007d0 <main+0x11c>)
 8000752:	f002 fbbd 	bl	8002ed0 <HAL_SPI_Abort>
			__HAL_RCC_SPI3_FORCE_RESET();
 8000756:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <main+0x12c>)
 8000758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800075a:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <main+0x12c>)
 800075c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000760:	6393      	str	r3, [r2, #56]	@ 0x38
			__HAL_RCC_SPI3_RELEASE_RESET();
 8000762:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <main+0x12c>)
 8000764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000766:	4a1e      	ldr	r2, [pc, #120]	@ (80007e0 <main+0x12c>)
 8000768:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800076c:	6393      	str	r3, [r2, #56]	@ 0x38
			HAL_GPIO_WritePin(SPI3_Process_DBG_D4_PORT, SPI3_Process_DBG_D4_PIN, GPIO_PIN_RESET); // SPI config for next packet start
 800076e:	2200      	movs	r2, #0
 8000770:	2104      	movs	r1, #4
 8000772:	481a      	ldr	r0, [pc, #104]	@ (80007dc <main+0x128>)
 8000774:	f001 fb78 	bl	8001e68 <HAL_GPIO_WritePin>

			HAL_StatusTypeDef res = SPI3_TEST_SEND(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff fe57 	bl	800042c <SPI3_TEST_SEND>
 800077e:	4603      	mov	r3, r0
 8000780:	717b      	strb	r3, [r7, #5]

			wTransferState = TRANSFER_PROCESSED;
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <main+0x124>)
 8000784:	2203      	movs	r2, #3
 8000786:	601a      	str	r2, [r3, #0]
	      break;
 8000788:	e021      	b.n	80007ce <main+0x11a>

	    case TRANSFER_ERROR:
	    	SPI_Transfer_Status.HAL_Error_Counter++;
 800078a:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <main+0x130>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	4a14      	ldr	r2, [pc, #80]	@ (80007e4 <main+0x130>)
 8000792:	6013      	str	r3, [r2, #0]
			wTransferState = TRANSFER_PROCESSED;
 8000794:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <main+0x124>)
 8000796:	2203      	movs	r2, #3
 8000798:	601a      	str	r2, [r3, #0]

			// https://community.st.com/t5/stm32-mcus-products/restart-spi-dma-transmission/td-p/637909
			HAL_SPI_DMAStop(&hspi3);
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <main+0x11c>)
 800079c:	f002 fcb8 	bl	8003110 <HAL_SPI_DMAStop>
			__HAL_RCC_SPI3_FORCE_RESET();
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <main+0x12c>)
 80007a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007a4:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <main+0x12c>)
 80007a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007aa:	6393      	str	r3, [r2, #56]	@ 0x38
			__HAL_RCC_SPI3_RELEASE_RESET();
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <main+0x12c>)
 80007ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007b0:	4a0b      	ldr	r2, [pc, #44]	@ (80007e0 <main+0x12c>)
 80007b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007b6:	6393      	str	r3, [r2, #56]	@ 0x38
			HAL_SPI_DeInit(&hspi3);
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <main+0x11c>)
 80007ba:	f002 f9da 	bl	8002b72 <HAL_SPI_DeInit>
			MX_SPI3_Init();
 80007be:	f000 f85f 	bl	8000880 <MX_SPI3_Init>
			SPI3_PA4_EN_Intterrupt();
 80007c2:	f7ff ff53 	bl	800066c <SPI3_PA4_EN_Intterrupt>

			Transfer_Init=1;
 80007c6:	4b03      	ldr	r3, [pc, #12]	@ (80007d4 <main+0x120>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	601a      	str	r2, [r3, #0]
	      break;
 80007cc:	bf00      	nop
  {
 80007ce:	e783      	b.n	80006d8 <main+0x24>
 80007d0:	2000408c 	.word	0x2000408c
 80007d4:	20004000 	.word	0x20004000
 80007d8:	200081b0 	.word	0x200081b0
 80007dc:	48000400 	.word	0x48000400
 80007e0:	40021000 	.word	0x40021000
 80007e4:	200081b4 	.word	0x200081b4

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	@ 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	2238      	movs	r2, #56	@ 0x38
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 f9f1 	bl	8003bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800080a:	2000      	movs	r0, #0
 800080c:	f001 fb5c 	bl	8001ec8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081a:	2340      	movs	r3, #64	@ 0x40
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000822:	2302      	movs	r3, #2
 8000824:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000826:	2304      	movs	r3, #4
 8000828:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800082a:	2355      	movs	r3, #85	@ 0x55
 800082c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000836:	2302      	movs	r3, #2
 8000838:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fbf6 	bl	8002030 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800084a:	f000 f8f1 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2303      	movs	r3, #3
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2104      	movs	r1, #4
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fef4 	bl	8002654 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000872:	f000 f8dd 	bl	8000a30 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	@ 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_SPI3_Init+0x68>)
 8000886:	4a19      	ldr	r2, [pc, #100]	@ (80008ec <MX_SPI3_Init+0x6c>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800088a:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_SPI3_Init+0x68>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_SPI3_Init+0x68>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000896:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_SPI3_Init+0x68>)
 8000898:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800089c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089e:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_SPI3_Init+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a4:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <MX_SPI3_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_SPI3_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b0:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <MX_SPI3_Init+0x68>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_SPI3_Init+0x68>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <MX_SPI3_Init+0x68>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_SPI3_Init+0x68>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <MX_SPI3_Init+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_SPI3_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_SPI3_Init+0x68>)
 80008d6:	f002 f8a1 	bl	8002a1c <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 80008e0:	f000 f8a6 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2000408c 	.word	0x2000408c
 80008ec:	40003c00 	.word	0x40003c00

080008f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008f6:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_DMA_Init+0x60>)
 80008f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008fa:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <MX_DMA_Init+0x60>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6493      	str	r3, [r2, #72]	@ 0x48
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_DMA_Init+0x60>)
 8000904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <MX_DMA_Init+0x60>)
 8000910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000912:	4a0f      	ldr	r2, [pc, #60]	@ (8000950 <MX_DMA_Init+0x60>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6493      	str	r3, [r2, #72]	@ 0x48
 800091a:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <MX_DMA_Init+0x60>)
 800091c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	200b      	movs	r0, #11
 800092c:	f000 fc89 	bl	8001242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000930:	200b      	movs	r0, #11
 8000932:	f000 fca0 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	200c      	movs	r0, #12
 800093c:	f000 fc81 	bl	8001242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000940:	200c      	movs	r0, #12
 8000942:	f000 fc98 	bl	8001276 <HAL_NVIC_EnableIRQ>

}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b1e      	ldr	r3, [pc, #120]	@ (80009e4 <MX_GPIO_Init+0x90>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	4a1d      	ldr	r2, [pc, #116]	@ (80009e4 <MX_GPIO_Init+0x90>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000976:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <MX_GPIO_Init+0x90>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <MX_GPIO_Init+0x90>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	4a17      	ldr	r2, [pc, #92]	@ (80009e4 <MX_GPIO_Init+0x90>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <MX_GPIO_Init+0x90>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <MX_GPIO_Init+0x90>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	4a11      	ldr	r2, [pc, #68]	@ (80009e4 <MX_GPIO_Init+0x90>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <MX_GPIO_Init+0x90>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12
 80009b2:	2200      	movs	r2, #0
 80009b4:	f64f 0106 	movw	r1, #63494	@ 0xf806
 80009b8:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <MX_GPIO_Init+0x94>)
 80009ba:	f001 fa55 	bl	8001e68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 PB2 PB11 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12
 80009be:	f64f 0306 	movw	r3, #63494	@ 0xf806
 80009c2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <MX_GPIO_Init+0x94>)
 80009d8:	f000 ffca 	bl	8001970 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000400 	.word	0x48000400

080009ec <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  static int callbacks;
  /* Turn LED2 on: Transfer in transmission/reception process is complete */


  callbacks++;
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <HAL_SPI_TxRxCpltCallback+0x20>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <HAL_SPI_TxRxCpltCallback+0x20>)
 80009fc:	6013      	str	r3, [r2, #0]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	200081f8 	.word	0x200081f8

08000a10 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8000a18:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <HAL_SPI_ErrorCallback+0x1c>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	601a      	str	r2, [r3, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200081b0 	.word	0x200081b0

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_Off(LED2);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f000 fa6b 	bl	8000f10 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 fa68 	bl	8000f10 <BSP_LED_Off>
  while (1)
  {
    /* Toggle LED2 for error */
	BSP_LED_On(LED2);
 8000a40:	2000      	movs	r0, #0
 8000a42:	f000 fa4f 	bl	8000ee4 <BSP_LED_On>
    HAL_Delay(1000);
 8000a46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a4a:	f000 fafd 	bl	8001048 <HAL_Delay>
	BSP_LED_On(LED2);
 8000a4e:	bf00      	nop
 8000a50:	e7f6      	b.n	8000a40 <Error_Handler+0x10>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a76:	4a08      	ldr	r2, [pc, #32]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a8a:	f001 fac1 	bl	8002010 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a50      	ldr	r2, [pc, #320]	@ (8000bfc <HAL_SPI_MspInit+0x160>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	f040 809a 	bne.w	8000bf4 <HAL_SPI_MspInit+0x158>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ac0:	4b4f      	ldr	r3, [pc, #316]	@ (8000c00 <HAL_SPI_MspInit+0x164>)
 8000ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac4:	4a4e      	ldr	r2, [pc, #312]	@ (8000c00 <HAL_SPI_MspInit+0x164>)
 8000ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8000acc:	4b4c      	ldr	r3, [pc, #304]	@ (8000c00 <HAL_SPI_MspInit+0x164>)
 8000ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b49      	ldr	r3, [pc, #292]	@ (8000c00 <HAL_SPI_MspInit+0x164>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000adc:	4a48      	ldr	r2, [pc, #288]	@ (8000c00 <HAL_SPI_MspInit+0x164>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae4:	4b46      	ldr	r3, [pc, #280]	@ (8000c00 <HAL_SPI_MspInit+0x164>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af0:	4b43      	ldr	r3, [pc, #268]	@ (8000c00 <HAL_SPI_MspInit+0x164>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af4:	4a42      	ldr	r2, [pc, #264]	@ (8000c00 <HAL_SPI_MspInit+0x164>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afc:	4b40      	ldr	r3, [pc, #256]	@ (8000c00 <HAL_SPI_MspInit+0x164>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b08:	2310      	movs	r3, #16
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b18:	2306      	movs	r3, #6
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b26:	f000 ff23 	bl	8001970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b2a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b3c:	2306      	movs	r3, #6
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	482f      	ldr	r0, [pc, #188]	@ (8000c04 <HAL_SPI_MspInit+0x168>)
 8000b48:	f000 ff12 	bl	8001970 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Channel1;
 8000b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c08 <HAL_SPI_MspInit+0x16c>)
 8000b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c0c <HAL_SPI_MspInit+0x170>)
 8000b50:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8000b52:	4b2d      	ldr	r3, [pc, #180]	@ (8000c08 <HAL_SPI_MspInit+0x16c>)
 8000b54:	220e      	movs	r2, #14
 8000b56:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b58:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <HAL_SPI_MspInit+0x16c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <HAL_SPI_MspInit+0x16c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b64:	4b28      	ldr	r3, [pc, #160]	@ (8000c08 <HAL_SPI_MspInit+0x16c>)
 8000b66:	2280      	movs	r2, #128	@ 0x80
 8000b68:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b6a:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <HAL_SPI_MspInit+0x16c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b70:	4b25      	ldr	r3, [pc, #148]	@ (8000c08 <HAL_SPI_MspInit+0x16c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8000b76:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <HAL_SPI_MspInit+0x16c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	@ (8000c08 <HAL_SPI_MspInit+0x16c>)
 8000b7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000b84:	4820      	ldr	r0, [pc, #128]	@ (8000c08 <HAL_SPI_MspInit+0x16c>)
 8000b86:	f000 fb91 	bl	80012ac <HAL_DMA_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8000b90:	f7ff ff4e 	bl	8000a30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a1c      	ldr	r2, [pc, #112]	@ (8000c08 <HAL_SPI_MspInit+0x16c>)
 8000b98:	659a      	str	r2, [r3, #88]	@ 0x58
 8000b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c08 <HAL_SPI_MspInit+0x16c>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel2;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <HAL_SPI_MspInit+0x174>)
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c14 <HAL_SPI_MspInit+0x178>)
 8000ba4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <HAL_SPI_MspInit+0x174>)
 8000ba8:	220f      	movs	r2, #15
 8000baa:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bac:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <HAL_SPI_MspInit+0x174>)
 8000bae:	2210      	movs	r2, #16
 8000bb0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <HAL_SPI_MspInit+0x174>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <HAL_SPI_MspInit+0x174>)
 8000bba:	2280      	movs	r2, #128	@ 0x80
 8000bbc:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <HAL_SPI_MspInit+0x174>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <HAL_SPI_MspInit+0x174>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <HAL_SPI_MspInit+0x174>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <HAL_SPI_MspInit+0x174>)
 8000bd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000bd8:	480d      	ldr	r0, [pc, #52]	@ (8000c10 <HAL_SPI_MspInit+0x174>)
 8000bda:	f000 fb67 	bl	80012ac <HAL_DMA_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 8000be4:	f7ff ff24 	bl	8000a30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a09      	ldr	r2, [pc, #36]	@ (8000c10 <HAL_SPI_MspInit+0x174>)
 8000bec:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_SPI_MspInit+0x174>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	@ 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40003c00 	.word	0x40003c00
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48000800 	.word	0x48000800
 8000c08:	200040f0 	.word	0x200040f0
 8000c0c:	40020008 	.word	0x40020008
 8000c10:	20004150 	.word	0x20004150
 8000c14:	4002001c 	.word	0x4002001c

08000c18 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a10      	ldr	r2, [pc, #64]	@ (8000c68 <HAL_SPI_MspDeInit+0x50>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d119      	bne.n	8000c5e <HAL_SPI_MspDeInit+0x46>
  {
    /* USER CODE BEGIN SPI3_MspDeInit 0 */

    /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <HAL_SPI_MspDeInit+0x54>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c6c <HAL_SPI_MspDeInit+0x54>)
 8000c30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000c34:	6593      	str	r3, [r2, #88]	@ 0x58
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8000c36:	2110      	movs	r1, #16
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3c:	f001 f81a 	bl	8001c74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8000c40:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000c44:	480a      	ldr	r0, [pc, #40]	@ (8000c70 <HAL_SPI_MspDeInit+0x58>)
 8000c46:	f001 f815 	bl	8001c74 <HAL_GPIO_DeInit>

    /* SPI3 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fbd4 	bl	80013fc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fbcf 	bl	80013fc <HAL_DMA_DeInit>
    /* USER CODE BEGIN SPI3_MspDeInit 1 */

    /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40003c00 	.word	0x40003c00
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	48000800 	.word	0x48000800

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	bf00      	nop
 8000c88:	e7fd      	b.n	8000c86 <HardFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000caa:	f000 f9af 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8000cb8:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <DMA1_Channel1_IRQHandler+0x10>)
 8000cba:	f000 fd09 	bl	80016d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200040f0 	.word	0x200040f0

08000cc8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <DMA1_Channel2_IRQHandler+0x10>)
 8000cce:	f000 fcff 	bl	80016d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20004150 	.word	0x20004150

08000cdc <EXTI4_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI4_IRQHandler(void)   // <----- The ISR Function We're Looking For!
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000ce0:	2010      	movs	r0, #16
 8000ce2:	f001 f8d9 	bl	8001e98 <HAL_GPIO_EXTI_IRQHandler>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  return 1;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_kill>:

int _kill(int pid, int sig)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d04:	f002 ffba 	bl	8003c7c <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2216      	movs	r2, #22
 8000d0c:	601a      	str	r2, [r3, #0]
  return -1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_exit>:

void _exit (int status)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d22:	f04f 31ff 	mov.w	r1, #4294967295
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffe7 	bl	8000cfa <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <_exit+0x12>

08000d30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e00a      	b.n	8000d58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d42:	f3af 8000 	nop.w
 8000d46:	4601      	mov	r1, r0
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	60ba      	str	r2, [r7, #8]
 8000d4e:	b2ca      	uxtb	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dbf0      	blt.n	8000d42 <_read+0x12>
  }

  return len;
 8000d60:	687b      	ldr	r3, [r7, #4]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e009      	b.n	8000d90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	60ba      	str	r2, [r7, #8]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	dbf1      	blt.n	8000d7c <_write+0x12>
  }
  return len;
 8000d98:	687b      	ldr	r3, [r7, #4]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_close>:

int _close(int file)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dca:	605a      	str	r2, [r3, #4]
  return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_isatty>:

int _isatty(int file)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	@ (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	@ (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f002 ff1e 	bl	8003c7c <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20020000 	.word	0x20020000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	200081fc 	.word	0x200081fc
 8000e74:	20008350 	.word	0x20008350

08000e78 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000e82:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <BSP_LED_Init+0x64>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	4a15      	ldr	r2, [pc, #84]	@ (8000edc <BSP_LED_Init+0x64>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8e:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <BSP_LED_Init+0x64>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000e9a:	2320      	movs	r3, #32
 8000e9c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee0 <BSP_LED_Init+0x68>)
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	f107 020c 	add.w	r2, r7, #12
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fd59 	bl	8001970 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	@ (8000ee0 <BSP_LED_Init+0x68>)
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 ffcc 	bl	8001e68 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	20004004 	.word	0x20004004

08000ee4 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	4a06      	ldr	r2, [pc, #24]	@ (8000f0c <BSP_LED_On+0x28>)
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 ffb4 	bl	8001e68 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20004004 	.word	0x20004004

08000f10 <BSP_LED_Off>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	4a06      	ldr	r2, [pc, #24]	@ (8000f38 <BSP_LED_Off+0x28>)
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	2120      	movs	r1, #32
 8000f24:	2200      	movs	r2, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 ff9e 	bl	8001e68 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20004004 	.word	0x20004004

08000f3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <SystemInit+0x28>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f46:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <SystemInit+0x28>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f50:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <SystemInit+0x28>)
 8000f52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f56:	609a      	str	r2, [r3, #8]
#endif
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f72:	2003      	movs	r0, #3
 8000f74:	f000 f95a 	bl	800122c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f80d 	bl	8000f98 <HAL_InitTick>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d002      	beq.n	8000f8a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	e001      	b.n	8000f8e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f8a:	f7ff fd63 	bl	8000a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]

}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fa4:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_InitTick+0x68>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d022      	beq.n	8000ff2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fac:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <HAL_InitTick+0x6c>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <HAL_InitTick+0x68>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f966 	bl	8001292 <HAL_SYSTICK_Config>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10f      	bne.n	8000fec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	d809      	bhi.n	8000fe6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fda:	f000 f932 	bl	8001242 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <HAL_InitTick+0x70>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e007      	b.n	8000ff6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e004      	b.n	8000ff6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e001      	b.n	8000ff6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20004010 	.word	0x20004010
 8001004:	20004008 	.word	0x20004008
 8001008:	2000400c 	.word	0x2000400c

0800100c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <HAL_IncTick+0x1c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <HAL_IncTick+0x20>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4413      	add	r3, r2
 800101a:	4a03      	ldr	r2, [pc, #12]	@ (8001028 <HAL_IncTick+0x1c>)
 800101c:	6013      	str	r3, [r2, #0]
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	20008200 	.word	0x20008200
 800102c:	20004010 	.word	0x20004010

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20008200 	.word	0x20008200

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff ffee 	bl	8001030 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d004      	beq.n	800106c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <HAL_Delay+0x40>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	4413      	add	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800106c:	bf00      	nop
 800106e:	f7ff ffdf 	bl	8001030 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	429a      	cmp	r2, r3
 800107c:	d8f7      	bhi.n	800106e <HAL_Delay+0x26>
  {
  }
}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20004010 	.word	0x20004010

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	@ (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	@ (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	@ (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	@ 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011f8:	d301      	bcc.n	80011fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00f      	b.n	800121e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <SysTick_Config+0x40>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001206:	210f      	movs	r1, #15
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f7ff ff8e 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001210:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <SysTick_Config+0x40>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001216:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <SysTick_Config+0x40>)
 8001218:	2207      	movs	r2, #7
 800121a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff29 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff40 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff90 	bl	8001180 <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5f 	bl	800112c <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff33 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffa4 	bl	80011e8 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e08d      	b.n	80013da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b47      	ldr	r3, [pc, #284]	@ (80013e4 <HAL_DMA_Init+0x138>)
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d80f      	bhi.n	80012ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b45      	ldr	r3, [pc, #276]	@ (80013e8 <HAL_DMA_Init+0x13c>)
 80012d2:	4413      	add	r3, r2
 80012d4:	4a45      	ldr	r2, [pc, #276]	@ (80013ec <HAL_DMA_Init+0x140>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	009a      	lsls	r2, r3, #2
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a42      	ldr	r2, [pc, #264]	@ (80013f0 <HAL_DMA_Init+0x144>)
 80012e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80012e8:	e00e      	b.n	8001308 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b40      	ldr	r3, [pc, #256]	@ (80013f4 <HAL_DMA_Init+0x148>)
 80012f2:	4413      	add	r3, r2
 80012f4:	4a3d      	ldr	r2, [pc, #244]	@ (80013ec <HAL_DMA_Init+0x140>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	009a      	lsls	r2, r3, #2
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a3c      	ldr	r2, [pc, #240]	@ (80013f8 <HAL_DMA_Init+0x14c>)
 8001306:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2202      	movs	r2, #2
 800130c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800131e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001322:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800132c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 faa6 	bl	80018ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001368:	d102      	bne.n	8001370 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001384:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d010      	beq.n	80013b0 <HAL_DMA_Init+0x104>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b04      	cmp	r3, #4
 8001394:	d80c      	bhi.n	80013b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fac6 	bl	8001928 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	e008      	b.n	80013c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40020407 	.word	0x40020407
 80013e8:	bffdfff8 	.word	0xbffdfff8
 80013ec:	cccccccd 	.word	0xcccccccd
 80013f0:	40020000 	.word	0x40020000
 80013f4:	bffdfbf8 	.word	0xbffdfbf8
 80013f8:	40020400 	.word	0x40020400

080013fc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e07b      	b.n	8001506 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0201 	bic.w	r2, r2, #1
 800141c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	4b3a      	ldr	r3, [pc, #232]	@ (8001510 <HAL_DMA_DeInit+0x114>)
 8001426:	429a      	cmp	r2, r3
 8001428:	d80f      	bhi.n	800144a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	4b38      	ldr	r3, [pc, #224]	@ (8001514 <HAL_DMA_DeInit+0x118>)
 8001432:	4413      	add	r3, r2
 8001434:	4a38      	ldr	r2, [pc, #224]	@ (8001518 <HAL_DMA_DeInit+0x11c>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	009a      	lsls	r2, r3, #2
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a35      	ldr	r2, [pc, #212]	@ (800151c <HAL_DMA_DeInit+0x120>)
 8001446:	641a      	str	r2, [r3, #64]	@ 0x40
 8001448:	e00e      	b.n	8001468 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	4b33      	ldr	r3, [pc, #204]	@ (8001520 <HAL_DMA_DeInit+0x124>)
 8001452:	4413      	add	r3, r2
 8001454:	4a30      	ldr	r2, [pc, #192]	@ (8001518 <HAL_DMA_DeInit+0x11c>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	009a      	lsls	r2, r3, #2
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a2f      	ldr	r2, [pc, #188]	@ (8001524 <HAL_DMA_DeInit+0x128>)
 8001466:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	2101      	movs	r1, #1
 800147e:	fa01 f202 	lsl.w	r2, r1, r2
 8001482:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 fa11 	bl	80018ac <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800149a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00f      	beq.n	80014c4 <HAL_DMA_DeInit+0xc8>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d80b      	bhi.n	80014c4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fa3b 	bl	8001928 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014c2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40020407 	.word	0x40020407
 8001514:	bffdfff8 	.word	0xbffdfff8
 8001518:	cccccccd 	.word	0xcccccccd
 800151c:	40020000 	.word	0x40020000
 8001520:	bffdfbf8 	.word	0xbffdfbf8
 8001524:	40020400 	.word	0x40020400

08001528 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_DMA_Start_IT+0x20>
 8001544:	2302      	movs	r3, #2
 8001546:	e066      	b.n	8001616 <HAL_DMA_Start_IT+0xee>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b01      	cmp	r3, #1
 800155a:	d155      	bne.n	8001608 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2202      	movs	r2, #2
 8001560:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0201 	bic.w	r2, r2, #1
 8001578:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 f954 	bl	800182e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	2b00      	cmp	r3, #0
 800158c:	d008      	beq.n	80015a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 020e 	orr.w	r2, r2, #14
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e00f      	b.n	80015c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0204 	bic.w	r2, r2, #4
 80015ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 020a 	orr.w	r2, r2, #10
 80015be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d007      	beq.n	80015f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0201 	orr.w	r2, r2, #1
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e005      	b.n	8001614 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001610:	2302      	movs	r3, #2
 8001612:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001614:	7dfb      	ldrb	r3, [r7, #23]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d005      	beq.n	8001642 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2204      	movs	r2, #4
 800163a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e037      	b.n	80016b2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 020e 	bic.w	r2, r2, #14
 8001650:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800165c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001660:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0201 	bic.w	r2, r2, #1
 8001670:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	f003 021f 	and.w	r2, r3, #31
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	2101      	movs	r1, #1
 8001680:	fa01 f202 	lsl.w	r2, r1, r2
 8001684:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800168e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00c      	beq.n	80016b2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016a6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016b0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	2204      	movs	r2, #4
 80016f2:	409a      	lsls	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d026      	beq.n	800174a <HAL_DMA_IRQHandler+0x7a>
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	d021      	beq.n	800174a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d107      	bne.n	8001724 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0204 	bic.w	r2, r2, #4
 8001722:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001728:	f003 021f 	and.w	r2, r3, #31
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	2104      	movs	r1, #4
 8001732:	fa01 f202 	lsl.w	r2, r1, r2
 8001736:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173c:	2b00      	cmp	r3, #0
 800173e:	d071      	beq.n	8001824 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001748:	e06c      	b.n	8001824 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	2202      	movs	r2, #2
 8001754:	409a      	lsls	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4013      	ands	r3, r2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d02e      	beq.n	80017bc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d029      	beq.n	80017bc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10b      	bne.n	800178e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 020a 	bic.w	r2, r2, #10
 8001784:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	f003 021f 	and.w	r2, r3, #31
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	2102      	movs	r1, #2
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d038      	beq.n	8001824 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017ba:	e033      	b.n	8001824 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	2208      	movs	r2, #8
 80017c6:	409a      	lsls	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d02a      	beq.n	8001826 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d025      	beq.n	8001826 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 020e 	bic.w	r2, r2, #14
 80017e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	f003 021f 	and.w	r2, r3, #31
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f202 	lsl.w	r2, r1, r2
 80017fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001824:	bf00      	nop
 8001826:	bf00      	nop
}
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800182e:	b480      	push	{r7}
 8001830:	b085      	sub	sp, #20
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001844:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800184a:	2b00      	cmp	r3, #0
 800184c:	d004      	beq.n	8001858 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001856:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185c:	f003 021f 	and.w	r2, r3, #31
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	2101      	movs	r1, #1
 8001866:	fa01 f202 	lsl.w	r2, r1, r2
 800186a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b10      	cmp	r3, #16
 800187a:	d108      	bne.n	800188e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800188c:	e007      	b.n	800189e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	60da      	str	r2, [r3, #12]
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80018bc:	429a      	cmp	r2, r3
 80018be:	d802      	bhi.n	80018c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80018c0:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e001      	b.n	80018ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80018c8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	3b08      	subs	r3, #8
 80018d6:	4a12      	ldr	r2, [pc, #72]	@ (8001920 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80018d8:	fba2 2303 	umull	r2, r3, r2, r3
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	009a      	lsls	r2, r3, #2
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4413      	add	r3, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80018f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 031f 	and.w	r3, r3, #31
 80018fe:	2201      	movs	r2, #1
 8001900:	409a      	lsls	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001906:	bf00      	nop
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40020407 	.word	0x40020407
 8001918:	40020800 	.word	0x40020800
 800191c:	40020820 	.word	0x40020820
 8001920:	cccccccd 	.word	0xcccccccd
 8001924:	40020880 	.word	0x40020880

08001928 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a08      	ldr	r2, [pc, #32]	@ (800196c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800194a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3b01      	subs	r3, #1
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	2201      	movs	r2, #1
 8001956:	409a      	lsls	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	1000823f 	.word	0x1000823f
 800196c:	40020940 	.word	0x40020940

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800197e:	e15a      	b.n	8001c36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 814c 	beq.w	8001c30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d005      	beq.n	80019b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d130      	bne.n	8001a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019e6:	2201      	movs	r2, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	f003 0201 	and.w	r2, r3, #1
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d017      	beq.n	8001a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d123      	bne.n	8001aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	6939      	ldr	r1, [r7, #16]
 8001a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0203 	and.w	r2, r3, #3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80a6 	beq.w	8001c30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c54 <HAL_GPIO_Init+0x2e4>)
 8001ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae8:	4a5a      	ldr	r2, [pc, #360]	@ (8001c54 <HAL_GPIO_Init+0x2e4>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6613      	str	r3, [r2, #96]	@ 0x60
 8001af0:	4b58      	ldr	r3, [pc, #352]	@ (8001c54 <HAL_GPIO_Init+0x2e4>)
 8001af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001afc:	4a56      	ldr	r2, [pc, #344]	@ (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b26:	d01f      	beq.n	8001b68 <HAL_GPIO_Init+0x1f8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a4c      	ldr	r2, [pc, #304]	@ (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d019      	beq.n	8001b64 <HAL_GPIO_Init+0x1f4>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a4b      	ldr	r2, [pc, #300]	@ (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d013      	beq.n	8001b60 <HAL_GPIO_Init+0x1f0>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c64 <HAL_GPIO_Init+0x2f4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d00d      	beq.n	8001b5c <HAL_GPIO_Init+0x1ec>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a49      	ldr	r2, [pc, #292]	@ (8001c68 <HAL_GPIO_Init+0x2f8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d007      	beq.n	8001b58 <HAL_GPIO_Init+0x1e8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a48      	ldr	r2, [pc, #288]	@ (8001c6c <HAL_GPIO_Init+0x2fc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d101      	bne.n	8001b54 <HAL_GPIO_Init+0x1e4>
 8001b50:	2305      	movs	r3, #5
 8001b52:	e00a      	b.n	8001b6a <HAL_GPIO_Init+0x1fa>
 8001b54:	2306      	movs	r3, #6
 8001b56:	e008      	b.n	8001b6a <HAL_GPIO_Init+0x1fa>
 8001b58:	2304      	movs	r3, #4
 8001b5a:	e006      	b.n	8001b6a <HAL_GPIO_Init+0x1fa>
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e004      	b.n	8001b6a <HAL_GPIO_Init+0x1fa>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e002      	b.n	8001b6a <HAL_GPIO_Init+0x1fa>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_GPIO_Init+0x1fa>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	f002 0203 	and.w	r2, r2, #3
 8001b70:	0092      	lsls	r2, r2, #2
 8001b72:	4093      	lsls	r3, r2
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b7a:	4937      	ldr	r1, [pc, #220]	@ (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b88:	4b39      	ldr	r3, [pc, #228]	@ (8001c70 <HAL_GPIO_Init+0x300>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bac:	4a30      	ldr	r2, [pc, #192]	@ (8001c70 <HAL_GPIO_Init+0x300>)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <HAL_GPIO_Init+0x300>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bd6:	4a26      	ldr	r2, [pc, #152]	@ (8001c70 <HAL_GPIO_Init+0x300>)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001bdc:	4b24      	ldr	r3, [pc, #144]	@ (8001c70 <HAL_GPIO_Init+0x300>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c00:	4a1b      	ldr	r2, [pc, #108]	@ (8001c70 <HAL_GPIO_Init+0x300>)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	@ (8001c70 <HAL_GPIO_Init+0x300>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c2a:	4a11      	ldr	r2, [pc, #68]	@ (8001c70 <HAL_GPIO_Init+0x300>)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f47f ae9d 	bne.w	8001980 <HAL_GPIO_Init+0x10>
  }
}
 8001c46:	bf00      	nop
 8001c48:	bf00      	nop
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	48000400 	.word	0x48000400
 8001c60:	48000800 	.word	0x48000800
 8001c64:	48000c00 	.word	0x48000c00
 8001c68:	48001000 	.word	0x48001000
 8001c6c:	48001400 	.word	0x48001400
 8001c70:	40010400 	.word	0x40010400

08001c74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8001c82:	e0bd      	b.n	8001e00 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8001c84:	2201      	movs	r2, #1
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80b0 	beq.w	8001dfa <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8001c9a:	4a60      	ldr	r2, [pc, #384]	@ (8001e1c <HAL_GPIO_DeInit+0x1a8>)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cc2:	d01f      	beq.n	8001d04 <HAL_GPIO_DeInit+0x90>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a56      	ldr	r2, [pc, #344]	@ (8001e20 <HAL_GPIO_DeInit+0x1ac>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d019      	beq.n	8001d00 <HAL_GPIO_DeInit+0x8c>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a55      	ldr	r2, [pc, #340]	@ (8001e24 <HAL_GPIO_DeInit+0x1b0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d013      	beq.n	8001cfc <HAL_GPIO_DeInit+0x88>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a54      	ldr	r2, [pc, #336]	@ (8001e28 <HAL_GPIO_DeInit+0x1b4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d00d      	beq.n	8001cf8 <HAL_GPIO_DeInit+0x84>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a53      	ldr	r2, [pc, #332]	@ (8001e2c <HAL_GPIO_DeInit+0x1b8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d007      	beq.n	8001cf4 <HAL_GPIO_DeInit+0x80>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a52      	ldr	r2, [pc, #328]	@ (8001e30 <HAL_GPIO_DeInit+0x1bc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d101      	bne.n	8001cf0 <HAL_GPIO_DeInit+0x7c>
 8001cec:	2305      	movs	r3, #5
 8001cee:	e00a      	b.n	8001d06 <HAL_GPIO_DeInit+0x92>
 8001cf0:	2306      	movs	r3, #6
 8001cf2:	e008      	b.n	8001d06 <HAL_GPIO_DeInit+0x92>
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	e006      	b.n	8001d06 <HAL_GPIO_DeInit+0x92>
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e004      	b.n	8001d06 <HAL_GPIO_DeInit+0x92>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e002      	b.n	8001d06 <HAL_GPIO_DeInit+0x92>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <HAL_GPIO_DeInit+0x92>
 8001d04:	2300      	movs	r3, #0
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	f002 0203 	and.w	r2, r2, #3
 8001d0c:	0092      	lsls	r2, r2, #2
 8001d0e:	4093      	lsls	r3, r2
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d132      	bne.n	8001d7c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001d16:	4b47      	ldr	r3, [pc, #284]	@ (8001e34 <HAL_GPIO_DeInit+0x1c0>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4945      	ldr	r1, [pc, #276]	@ (8001e34 <HAL_GPIO_DeInit+0x1c0>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001d24:	4b43      	ldr	r3, [pc, #268]	@ (8001e34 <HAL_GPIO_DeInit+0x1c0>)
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	4941      	ldr	r1, [pc, #260]	@ (8001e34 <HAL_GPIO_DeInit+0x1c0>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001d32:	4b40      	ldr	r3, [pc, #256]	@ (8001e34 <HAL_GPIO_DeInit+0x1c0>)
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	493e      	ldr	r1, [pc, #248]	@ (8001e34 <HAL_GPIO_DeInit+0x1c0>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001d40:	4b3c      	ldr	r3, [pc, #240]	@ (8001e34 <HAL_GPIO_DeInit+0x1c0>)
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	493a      	ldr	r1, [pc, #232]	@ (8001e34 <HAL_GPIO_DeInit+0x1c0>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001d5e:	4a2f      	ldr	r2, [pc, #188]	@ (8001e1c <HAL_GPIO_DeInit+0x1a8>)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	482b      	ldr	r0, [pc, #172]	@ (8001e1c <HAL_GPIO_DeInit+0x1a8>)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	400a      	ands	r2, r1
 8001d76:	3302      	adds	r3, #2
 8001d78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2103      	movs	r1, #3
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	08da      	lsrs	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	08d2      	lsrs	r2, r2, #3
 8001db0:	4019      	ands	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	401a      	ands	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	401a      	ands	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2103      	movs	r1, #3
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	401a      	ands	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f47f af3b 	bne.w	8001c84 <HAL_GPIO_DeInit+0x10>
  }
}
 8001e0e:	bf00      	nop
 8001e10:	bf00      	nop
 8001e12:	371c      	adds	r7, #28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	40010000 	.word	0x40010000
 8001e20:	48000400 	.word	0x48000400
 8001e24:	48000800 	.word	0x48000800
 8001e28:	48000c00 	.word	0x48000c00
 8001e2c:	48001000 	.word	0x48001000
 8001e30:	48001400 	.word	0x48001400
 8001e34:	40010400 	.word	0x40010400

08001e38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ea2:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eae:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb8e 	bl	80005d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d141      	bne.n	8001f5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee2:	d131      	bne.n	8001f48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ee4:	4b47      	ldr	r3, [pc, #284]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eea:	4a46      	ldr	r2, [pc, #280]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ef0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef4:	4b43      	ldr	r3, [pc, #268]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001efc:	4a41      	ldr	r2, [pc, #260]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f04:	4b40      	ldr	r3, [pc, #256]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2232      	movs	r2, #50	@ 0x32
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800200c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	0c9b      	lsrs	r3, r3, #18
 8001f16:	3301      	adds	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f1a:	e002      	b.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f22:	4b38      	ldr	r3, [pc, #224]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f2e:	d102      	bne.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f2      	bne.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f36:	4b33      	ldr	r3, [pc, #204]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f42:	d158      	bne.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e057      	b.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f48:	4b2e      	ldr	r3, [pc, #184]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f58:	e04d      	b.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f60:	d141      	bne.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f62:	4b28      	ldr	r3, [pc, #160]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f6e:	d131      	bne.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f70:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f76:	4a23      	ldr	r2, [pc, #140]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f80:	4b20      	ldr	r3, [pc, #128]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f88:	4a1e      	ldr	r2, [pc, #120]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f90:	4b1d      	ldr	r3, [pc, #116]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2232      	movs	r2, #50	@ 0x32
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800200c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	0c9b      	lsrs	r3, r3, #18
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa6:	e002      	b.n	8001fae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fba:	d102      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f2      	bne.n	8001fa8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fce:	d112      	bne.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e011      	b.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fda:	4a0a      	ldr	r2, [pc, #40]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fe4:	e007      	b.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fee:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ff4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40007000 	.word	0x40007000
 8002008:	20004008 	.word	0x20004008
 800200c:	431bde83 	.word	0x431bde83

08002010 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a04      	ldr	r2, [pc, #16]	@ (800202c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800201a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800201e:	6093      	str	r3, [r2, #8]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40007000 	.word	0x40007000

08002030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e2fe      	b.n	8002640 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d075      	beq.n	800213a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204e:	4b97      	ldr	r3, [pc, #604]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002058:	4b94      	ldr	r3, [pc, #592]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d102      	bne.n	800206e <HAL_RCC_OscConfig+0x3e>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d002      	beq.n	8002074 <HAL_RCC_OscConfig+0x44>
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b08      	cmp	r3, #8
 8002072:	d10b      	bne.n	800208c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	4b8d      	ldr	r3, [pc, #564]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d05b      	beq.n	8002138 <HAL_RCC_OscConfig+0x108>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d157      	bne.n	8002138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e2d9      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002094:	d106      	bne.n	80020a4 <HAL_RCC_OscConfig+0x74>
 8002096:	4b85      	ldr	r3, [pc, #532]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a84      	ldr	r2, [pc, #528]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e01d      	b.n	80020e0 <HAL_RCC_OscConfig+0xb0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x98>
 80020ae:	4b7f      	ldr	r3, [pc, #508]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a7e      	ldr	r2, [pc, #504]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b7c      	ldr	r3, [pc, #496]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a7b      	ldr	r2, [pc, #492]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0xb0>
 80020c8:	4b78      	ldr	r3, [pc, #480]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a77      	ldr	r2, [pc, #476]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b75      	ldr	r3, [pc, #468]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a74      	ldr	r2, [pc, #464]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80020da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7fe ffa2 	bl	8001030 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f0:	f7fe ff9e 	bl	8001030 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	@ 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e29e      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002102:	4b6a      	ldr	r3, [pc, #424]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0xc0>
 800210e:	e014      	b.n	800213a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe ff8e 	bl	8001030 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002118:	f7fe ff8a 	bl	8001030 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	@ 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e28a      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800212a:	4b60      	ldr	r3, [pc, #384]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0xe8>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d075      	beq.n	8002232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002146:	4b59      	ldr	r3, [pc, #356]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002150:	4b56      	ldr	r3, [pc, #344]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d102      	bne.n	8002166 <HAL_RCC_OscConfig+0x136>
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d002      	beq.n	800216c <HAL_RCC_OscConfig+0x13c>
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d11f      	bne.n	80021ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216c:	4b4f      	ldr	r3, [pc, #316]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_OscConfig+0x154>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e25d      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002184:	4b49      	ldr	r3, [pc, #292]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	4946      	ldr	r1, [pc, #280]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002198:	4b45      	ldr	r3, [pc, #276]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fefb 	bl	8000f98 <HAL_InitTick>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d043      	beq.n	8002230 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e249      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d023      	beq.n	80021fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b4:	4b3d      	ldr	r3, [pc, #244]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a3c      	ldr	r2, [pc, #240]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80021ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe ff36 	bl	8001030 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c8:	f7fe ff32 	bl	8001030 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e232      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021da:	4b34      	ldr	r3, [pc, #208]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b31      	ldr	r3, [pc, #196]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	061b      	lsls	r3, r3, #24
 80021f4:	492d      	ldr	r1, [pc, #180]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
 80021fa:	e01a      	b.n	8002232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fc:	4b2b      	ldr	r3, [pc, #172]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a2a      	ldr	r2, [pc, #168]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002202:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe ff12 	bl	8001030 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002210:	f7fe ff0e 	bl	8001030 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e20e      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002222:	4b22      	ldr	r3, [pc, #136]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x1e0>
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002230:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d041      	beq.n	80022c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01c      	beq.n	8002280 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002246:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800224c:	4a17      	ldr	r2, [pc, #92]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7fe feeb 	bl	8001030 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225e:	f7fe fee7 	bl	8001030 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e1e7      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002270:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0ef      	beq.n	800225e <HAL_RCC_OscConfig+0x22e>
 800227e:	e020      	b.n	80022c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002280:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002286:	4a09      	ldr	r2, [pc, #36]	@ (80022ac <HAL_RCC_OscConfig+0x27c>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7fe fece 	bl	8001030 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002296:	e00d      	b.n	80022b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002298:	f7fe feca 	bl	8001030 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d906      	bls.n	80022b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e1ca      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	2000400c 	.word	0x2000400c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022b4:	4b8c      	ldr	r3, [pc, #560]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80022b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1ea      	bne.n	8002298 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80a6 	beq.w	800241c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d0:	2300      	movs	r3, #0
 80022d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022d4:	4b84      	ldr	r3, [pc, #528]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_OscConfig+0x2b4>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x2b6>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00d      	beq.n	8002306 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ea:	4b7f      	ldr	r3, [pc, #508]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	4a7e      	ldr	r2, [pc, #504]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022f6:	4b7c      	ldr	r3, [pc, #496]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002302:	2301      	movs	r3, #1
 8002304:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002306:	4b79      	ldr	r3, [pc, #484]	@ (80024ec <HAL_RCC_OscConfig+0x4bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d118      	bne.n	8002344 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002312:	4b76      	ldr	r3, [pc, #472]	@ (80024ec <HAL_RCC_OscConfig+0x4bc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a75      	ldr	r2, [pc, #468]	@ (80024ec <HAL_RCC_OscConfig+0x4bc>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231e:	f7fe fe87 	bl	8001030 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002326:	f7fe fe83 	bl	8001030 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e183      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002338:	4b6c      	ldr	r3, [pc, #432]	@ (80024ec <HAL_RCC_OscConfig+0x4bc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d108      	bne.n	800235e <HAL_RCC_OscConfig+0x32e>
 800234c:	4b66      	ldr	r3, [pc, #408]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002352:	4a65      	ldr	r2, [pc, #404]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800235c:	e024      	b.n	80023a8 <HAL_RCC_OscConfig+0x378>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b05      	cmp	r3, #5
 8002364:	d110      	bne.n	8002388 <HAL_RCC_OscConfig+0x358>
 8002366:	4b60      	ldr	r3, [pc, #384]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236c:	4a5e      	ldr	r2, [pc, #376]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002376:	4b5c      	ldr	r3, [pc, #368]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237c:	4a5a      	ldr	r2, [pc, #360]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002386:	e00f      	b.n	80023a8 <HAL_RCC_OscConfig+0x378>
 8002388:	4b57      	ldr	r3, [pc, #348]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238e:	4a56      	ldr	r2, [pc, #344]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002398:	4b53      	ldr	r3, [pc, #332]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239e:	4a52      	ldr	r2, [pc, #328]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80023a0:	f023 0304 	bic.w	r3, r3, #4
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d016      	beq.n	80023de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7fe fe3e 	bl	8001030 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7fe fe3a 	bl	8001030 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e138      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ce:	4b46      	ldr	r3, [pc, #280]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ed      	beq.n	80023b8 <HAL_RCC_OscConfig+0x388>
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023de:	f7fe fe27 	bl	8001030 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7fe fe23 	bl	8001030 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e121      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023fc:	4b3a      	ldr	r3, [pc, #232]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1ed      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800240a:	7ffb      	ldrb	r3, [r7, #31]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002410:	4b35      	ldr	r3, [pc, #212]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	4a34      	ldr	r2, [pc, #208]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800241a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d03c      	beq.n	80024a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01c      	beq.n	800246a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002430:	4b2d      	ldr	r3, [pc, #180]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002436:	4a2c      	ldr	r2, [pc, #176]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe fdf6 	bl	8001030 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002448:	f7fe fdf2 	bl	8001030 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e0f2      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800245a:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800245c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ef      	beq.n	8002448 <HAL_RCC_OscConfig+0x418>
 8002468:	e01b      	b.n	80024a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800246a:	4b1f      	ldr	r3, [pc, #124]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 800246c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002470:	4a1d      	ldr	r2, [pc, #116]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7fe fdd9 	bl	8001030 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002482:	f7fe fdd5 	bl	8001030 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0d5      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002494:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 8002496:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ef      	bne.n	8002482 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80c9 	beq.w	800263e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ac:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	f000 8083 	beq.w	80025c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d15e      	bne.n	8002580 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c2:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a08      	ldr	r2, [pc, #32]	@ (80024e8 <HAL_RCC_OscConfig+0x4b8>)
 80024c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7fe fdaf 	bl	8001030 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d4:	e00c      	b.n	80024f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7fe fdab 	bl	8001030 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d905      	bls.n	80024f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0ab      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f0:	4b55      	ldr	r3, [pc, #340]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ec      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024fc:	4b52      	ldr	r3, [pc, #328]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	4b52      	ldr	r3, [pc, #328]	@ (800264c <HAL_RCC_OscConfig+0x61c>)
 8002502:	4013      	ands	r3, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6a11      	ldr	r1, [r2, #32]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800250c:	3a01      	subs	r2, #1
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	4311      	orrs	r1, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002516:	0212      	lsls	r2, r2, #8
 8002518:	4311      	orrs	r1, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800251e:	0852      	lsrs	r2, r2, #1
 8002520:	3a01      	subs	r2, #1
 8002522:	0552      	lsls	r2, r2, #21
 8002524:	4311      	orrs	r1, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800252a:	0852      	lsrs	r2, r2, #1
 800252c:	3a01      	subs	r2, #1
 800252e:	0652      	lsls	r2, r2, #25
 8002530:	4311      	orrs	r1, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002536:	06d2      	lsls	r2, r2, #27
 8002538:	430a      	orrs	r2, r1
 800253a:	4943      	ldr	r1, [pc, #268]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 800253c:	4313      	orrs	r3, r2
 800253e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b41      	ldr	r3, [pc, #260]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a40      	ldr	r2, [pc, #256]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 8002546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800254a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800254c:	4b3e      	ldr	r3, [pc, #248]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a3d      	ldr	r2, [pc, #244]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 8002552:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002556:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fd6a 	bl	8001030 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002560:	f7fe fd66 	bl	8001030 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e066      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002572:	4b35      	ldr	r3, [pc, #212]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x530>
 800257e:	e05e      	b.n	800263e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002580:	4b31      	ldr	r3, [pc, #196]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a30      	ldr	r2, [pc, #192]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 8002586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800258a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fd50 	bl	8001030 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe fd4c 	bl	8001030 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e04c      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a6:	4b28      	ldr	r3, [pc, #160]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80025b2:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	4924      	ldr	r1, [pc, #144]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 80025b8:	4b25      	ldr	r3, [pc, #148]	@ (8002650 <HAL_RCC_OscConfig+0x620>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	60cb      	str	r3, [r1, #12]
 80025be:	e03e      	b.n	800263e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e039      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f003 0203 	and.w	r2, r3, #3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d12c      	bne.n	800263a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	3b01      	subs	r3, #1
 80025ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d123      	bne.n	800263a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d11b      	bne.n	800263a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d113      	bne.n	800263a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	3b01      	subs	r3, #1
 8002620:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d109      	bne.n	800263a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002630:	085b      	lsrs	r3, r3, #1
 8002632:	3b01      	subs	r3, #1
 8002634:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	019f800c 	.word	0x019f800c
 8002650:	feeefffc 	.word	0xfeeefffc

08002654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e11e      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800266c:	4b91      	ldr	r3, [pc, #580]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d910      	bls.n	800269c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b8e      	ldr	r3, [pc, #568]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 020f 	bic.w	r2, r3, #15
 8002682:	498c      	ldr	r1, [pc, #560]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b8a      	ldr	r3, [pc, #552]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e106      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d073      	beq.n	8002790 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d129      	bne.n	8002704 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b0:	4b81      	ldr	r3, [pc, #516]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0f4      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80026c0:	f000 f966 	bl	8002990 <RCC_GetSysClockFreqFromPLLSource>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4a7c      	ldr	r2, [pc, #496]	@ (80028bc <HAL_RCC_ClockConfig+0x268>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d93f      	bls.n	800274e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026ce:	4b7a      	ldr	r3, [pc, #488]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d033      	beq.n	800274e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d12f      	bne.n	800274e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026ee:	4b72      	ldr	r3, [pc, #456]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026f6:	4a70      	ldr	r2, [pc, #448]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80026f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026fe:	2380      	movs	r3, #128	@ 0x80
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	e024      	b.n	800274e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d107      	bne.n	800271c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800270c:	4b6a      	ldr	r3, [pc, #424]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0c6      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800271c:	4b66      	ldr	r3, [pc, #408]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0be      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800272c:	f000 f8ce 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8002730:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4a61      	ldr	r2, [pc, #388]	@ (80028bc <HAL_RCC_ClockConfig+0x268>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d909      	bls.n	800274e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800273a:	4b5f      	ldr	r3, [pc, #380]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002742:	4a5d      	ldr	r2, [pc, #372]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 8002744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002748:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800274e:	4b5a      	ldr	r3, [pc, #360]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f023 0203 	bic.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4957      	ldr	r1, [pc, #348]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002760:	f7fe fc66 	bl	8001030 <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	e00a      	b.n	800277e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7fe fc62 	bl	8001030 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e095      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	4b4e      	ldr	r3, [pc, #312]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 020c 	and.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d1eb      	bne.n	8002768 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d023      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a8:	4b43      	ldr	r3, [pc, #268]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a42      	ldr	r2, [pc, #264]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027c0:	4b3d      	ldr	r3, [pc, #244]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80027c8:	4a3b      	ldr	r2, [pc, #236]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d0:	4b39      	ldr	r3, [pc, #228]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4936      	ldr	r1, [pc, #216]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b80      	cmp	r3, #128	@ 0x80
 80027e8:	d105      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027ea:	4b33      	ldr	r3, [pc, #204]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	4a32      	ldr	r2, [pc, #200]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 80027f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f6:	4b2f      	ldr	r3, [pc, #188]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d21d      	bcs.n	8002840 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002804:	4b2b      	ldr	r3, [pc, #172]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 020f 	bic.w	r2, r3, #15
 800280c:	4929      	ldr	r1, [pc, #164]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	4313      	orrs	r3, r2
 8002812:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002814:	f7fe fc0c 	bl	8001030 <HAL_GetTick>
 8002818:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	e00a      	b.n	8002832 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f7fe fc08 	bl	8001030 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e03b      	b.n	80028aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b20      	ldr	r3, [pc, #128]	@ (80028b4 <HAL_RCC_ClockConfig+0x260>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d1ed      	bne.n	800281c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284c:	4b1a      	ldr	r3, [pc, #104]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4917      	ldr	r1, [pc, #92]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800286a:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	490f      	ldr	r1, [pc, #60]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800287e:	f000 f825 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8002882:	4602      	mov	r2, r0
 8002884:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <HAL_RCC_ClockConfig+0x264>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	490c      	ldr	r1, [pc, #48]	@ (80028c0 <HAL_RCC_ClockConfig+0x26c>)
 8002890:	5ccb      	ldrb	r3, [r1, r3]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <HAL_RCC_ClockConfig+0x270>)
 800289c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800289e:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <HAL_RCC_ClockConfig+0x274>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fb78 	bl	8000f98 <HAL_InitTick>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	04c4b400 	.word	0x04c4b400
 80028c0:	08004cb8 	.word	0x08004cb8
 80028c4:	20004008 	.word	0x20004008
 80028c8:	2000400c 	.word	0x2000400c

080028cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028de:	4b2a      	ldr	r3, [pc, #168]	@ (8002988 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	e047      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028e4:	4b27      	ldr	r3, [pc, #156]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 030c 	and.w	r3, r3, #12
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d102      	bne.n	80028f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028f0:	4b26      	ldr	r3, [pc, #152]	@ (800298c <HAL_RCC_GetSysClockFreq+0xc0>)
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	e03e      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028f6:	4b23      	ldr	r3, [pc, #140]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	d136      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002902:	4b20      	ldr	r3, [pc, #128]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800290c:	4b1d      	ldr	r3, [pc, #116]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	3301      	adds	r3, #1
 8002918:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d10c      	bne.n	800293a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002920:	4a1a      	ldr	r2, [pc, #104]	@ (800298c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	4a16      	ldr	r2, [pc, #88]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800292a:	68d2      	ldr	r2, [r2, #12]
 800292c:	0a12      	lsrs	r2, r2, #8
 800292e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	617b      	str	r3, [r7, #20]
      break;
 8002938:	e00c      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800293a:	4a13      	ldr	r2, [pc, #76]	@ (8002988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4a10      	ldr	r2, [pc, #64]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002944:	68d2      	ldr	r2, [r2, #12]
 8002946:	0a12      	lsrs	r2, r2, #8
 8002948:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800294c:	fb02 f303 	mul.w	r3, r2, r3
 8002950:	617b      	str	r3, [r7, #20]
      break;
 8002952:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	0e5b      	lsrs	r3, r3, #25
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	3301      	adds	r3, #1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	e001      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002974:	693b      	ldr	r3, [r7, #16]
}
 8002976:	4618      	mov	r0, r3
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	00f42400 	.word	0x00f42400
 800298c:	016e3600 	.word	0x016e3600

08002990 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002996:	4b1e      	ldr	r3, [pc, #120]	@ (8002a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3301      	adds	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d10c      	bne.n	80029ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029b4:	4a17      	ldr	r2, [pc, #92]	@ (8002a14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	4a14      	ldr	r2, [pc, #80]	@ (8002a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029be:	68d2      	ldr	r2, [r2, #12]
 80029c0:	0a12      	lsrs	r2, r2, #8
 80029c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	617b      	str	r3, [r7, #20]
    break;
 80029cc:	e00c      	b.n	80029e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ce:	4a12      	ldr	r2, [pc, #72]	@ (8002a18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029d8:	68d2      	ldr	r2, [r2, #12]
 80029da:	0a12      	lsrs	r2, r2, #8
 80029dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	617b      	str	r3, [r7, #20]
    break;
 80029e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029e8:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0e5b      	lsrs	r3, r3, #25
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	3301      	adds	r3, #1
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a02:	687b      	ldr	r3, [r7, #4]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40021000 	.word	0x40021000
 8002a14:	016e3600 	.word	0x016e3600
 8002a18:	00f42400 	.word	0x00f42400

08002a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e09d      	b.n	8002b6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d108      	bne.n	8002a48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a3e:	d009      	beq.n	8002a54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
 8002a46:	e005      	b.n	8002a54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe f814 	bl	8000a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a94:	d902      	bls.n	8002a9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e002      	b.n	8002aa2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002aaa:	d007      	beq.n	8002abc <HAL_SPI_Init+0xa0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ab4:	d002      	beq.n	8002abc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afe:	ea42 0103 	orr.w	r1, r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b06:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	f003 0204 	and.w	r2, r3, #4
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002b38:	ea42 0103 	orr.w	r1, r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e01a      	b.n	8002bba <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b9a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7fe f83b 	bl	8000c18 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bd8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d00c      	beq.n	8002c00 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bec:	d106      	bne.n	8002bfc <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <HAL_SPI_TransmitReceive_DMA+0x38>
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d001      	beq.n	8002c00 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e158      	b.n	8002eb2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002c0c:	887b      	ldrh	r3, [r7, #2]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e14d      	b.n	8002eb2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_SPI_TransmitReceive_DMA+0x60>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e146      	b.n	8002eb2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d003      	beq.n	8002c40 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2205      	movs	r2, #5
 8002c3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	887a      	ldrh	r2, [r7, #2]
 8002c56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	887a      	ldrh	r2, [r7, #2]
 8002c62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8002c88:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c92:	d908      	bls.n	8002ca6 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	e06f      	b.n	8002d86 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cb4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cc0:	d126      	bne.n	8002d10 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10f      	bne.n	8002cee <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cdc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	085b      	lsrs	r3, r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cec:	e010      	b.n	8002d10 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cfc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d1a:	d134      	bne.n	8002d86 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d2a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d111      	bne.n	8002d60 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d4a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002d5e:	e012      	b.n	8002d86 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d6e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d108      	bne.n	8002da4 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d96:	4a49      	ldr	r2, [pc, #292]	@ (8002ebc <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8002d98:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9e:	4a48      	ldr	r2, [pc, #288]	@ (8002ec0 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8002da0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002da2:	e007      	b.n	8002db4 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da8:	4a46      	ldr	r2, [pc, #280]	@ (8002ec4 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8002daa:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db0:	4a45      	ldr	r2, [pc, #276]	@ (8002ec8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8002db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db8:	4a44      	ldr	r2, [pc, #272]	@ (8002ecc <HAL_SPI_TransmitReceive_DMA+0x308>)
 8002dba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	330c      	adds	r3, #12
 8002dce:	4619      	mov	r1, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ddc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002dde:	f7fe fba3 	bl	8001528 <HAL_DMA_Start_IT>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dec:	f043 0210 	orr.w	r2, r3, #16
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e058      	b.n	8002eb2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e24:	2200      	movs	r2, #0
 8002e26:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e38:	4619      	mov	r1, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	330c      	adds	r3, #12
 8002e40:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e46:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e48:	f7fe fb6e 	bl	8001528 <HAL_DMA_Start_IT>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00b      	beq.n	8002e6a <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e56:	f043 0210 	orr.w	r2, r3, #16
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e023      	b.n	8002eb2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e74:	2b40      	cmp	r3, #64	@ 0x40
 8002e76:	d007      	beq.n	8002e88 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e86:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0220 	orr.w	r2, r2, #32
 8002e9e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0202 	orr.w	r2, r2, #2
 8002eae:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	0800331f 	.word	0x0800331f
 8002ec0:	080031e7 	.word	0x080031e7
 8002ec4:	0800333b 	.word	0x0800333b
 8002ec8:	0800328f 	.word	0x0800328f
 8002ecc:	08003357 	.word	0x08003357

08002ed0 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	@ 0x28
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002edc:	4b88      	ldr	r3, [pc, #544]	@ (8003100 <HAL_SPI_Abort+0x230>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a88      	ldr	r2, [pc, #544]	@ (8003104 <HAL_SPI_Abort+0x234>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0a5b      	lsrs	r3, r3, #9
 8002ee8:	2264      	movs	r2, #100	@ 0x64
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0220 	bic.w	r2, r2, #32
 8002f02:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0e:	2b80      	cmp	r3, #128	@ 0x80
 8002f10:	d117      	bne.n	8002f42 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a7c      	ldr	r2, [pc, #496]	@ (8003108 <HAL_SPI_Abort+0x238>)
 8002f16:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8002f2a:	e008      	b.n	8002f3e <HAL_SPI_Abort+0x6e>
      }
      count--;
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b07      	cmp	r3, #7
 8002f3c:	d1ec      	bne.n	8002f18 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4c:	2b40      	cmp	r3, #64	@ 0x40
 8002f4e:	d117      	bne.n	8002f80 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a6e      	ldr	r2, [pc, #440]	@ (800310c <HAL_SPI_Abort+0x23c>)
 8002f54:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d106      	bne.n	8002f6a <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8002f68:	e008      	b.n	8002f7c <HAL_SPI_Abort+0xac>
      }
      count--;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b07      	cmp	r3, #7
 8002f7a:	d1ec      	bne.n	8002f56 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d141      	bne.n	8003012 <HAL_SPI_Abort+0x142>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d03d      	beq.n	8003012 <HAL_SPI_Abort+0x142>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fb3b 	bl	800161e <HAL_DMA_Abort>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2240      	movs	r2, #64	@ 0x40
 8002fb2:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0202 	bic.w	r2, r2, #2
 8002fc2:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002fc4:	f7fe f834 	bl	8001030 <HAL_GetTick>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2164      	movs	r1, #100	@ 0x64
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fb58 	bl	8003684 <SPI_EndRxTxTransaction>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_SPI_Abort+0x110>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2240      	movs	r2, #64	@ 0x40
 8002fde:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fee:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8002ff0:	f7fe f81e 	bl	8001030 <HAL_GetTick>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	2364      	movs	r3, #100	@ 0x64
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fa51 	bl	80034a8 <SPI_WaitFifoStateUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_SPI_Abort+0x142>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2240      	movs	r2, #64	@ 0x40
 8003010:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d143      	bne.n	80030a8 <HAL_SPI_Abort+0x1d8>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	2b00      	cmp	r3, #0
 8003026:	d03f      	beq.n	80030a8 <HAL_SPI_Abort+0x1d8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302c:	2200      	movs	r2, #0
 800302e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe faf2 	bl	800161e <HAL_DMA_Abort>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_SPI_Abort+0x176>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2240      	movs	r2, #64	@ 0x40
 8003044:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003054:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003056:	f7fd ffeb 	bl	8001030 <HAL_GetTick>
 800305a:	4603      	mov	r3, r0
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	2364      	movs	r3, #100	@ 0x64
 8003060:	2200      	movs	r2, #0
 8003062:	2180      	movs	r1, #128	@ 0x80
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f997 	bl	8003398 <SPI_WaitFlagStateUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_SPI_Abort+0x1a6>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2240      	movs	r2, #64	@ 0x40
 8003074:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003076:	f7fd ffdb 	bl	8001030 <HAL_GetTick>
 800307a:	4603      	mov	r3, r0
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	2364      	movs	r3, #100	@ 0x64
 8003080:	2200      	movs	r2, #0
 8003082:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fa0e 	bl	80034a8 <SPI_WaitFifoStateUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_SPI_Abort+0x1c8>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2240      	movs	r2, #64	@ 0x40
 8003096:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ba:	2b40      	cmp	r3, #64	@ 0x40
 80030bc:	d102      	bne.n	80030c4 <HAL_SPI_Abort+0x1f4>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	77fb      	strb	r3, [r7, #31]
 80030c2:	e002      	b.n	80030ca <HAL_SPI_Abort+0x1fa>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return errorcode;
 80030f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20004008 	.word	0x20004008
 8003104:	057619f1 	.word	0x057619f1
 8003108:	080037d1 	.word	0x080037d1
 800310c:	08003711 	.word	0x08003711

08003110 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00f      	beq.n	8003144 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe fa78 	bl	800161e <HAL_DMA_Abort>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003138:	f043 0210 	orr.w	r2, r3, #16
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00f      	beq.n	800316c <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe fa64 	bl	800161e <HAL_DMA_Abort>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003160:	f043 0210 	orr.w	r2, r3, #16
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0203 	bic.w	r2, r2, #3
 800317a:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 8003184:	7bfb      	ldrb	r3, [r7, #15]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031d8:	b2db      	uxtb	r3, r3
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f4:	f7fd ff1c 	bl	8001030 <HAL_GetTick>
 80031f8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b20      	cmp	r3, #32
 8003206:	d03c      	beq.n	8003282 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0220 	bic.w	r2, r2, #32
 8003216:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10d      	bne.n	800323c <SPI_DMAReceiveCplt+0x56>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003228:	d108      	bne.n	800323c <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0203 	bic.w	r2, r2, #3
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	e007      	b.n	800324c <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	2164      	movs	r1, #100	@ 0x64
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f9bf 	bl	80035d4 <SPI_EndRxTransaction>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f7fd fbc8 	bl	8000a10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003280:	e002      	b.n	8003288 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f7ff ff83 	bl	800318e <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800329c:	f7fd fec8 	bl	8001030 <HAL_GetTick>
 80032a0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d030      	beq.n	8003312 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0220 	bic.w	r2, r2, #32
 80032be:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	2164      	movs	r1, #100	@ 0x64
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f9dd 	bl	8003684 <SPI_EndRxTxTransaction>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0203 	bic.w	r2, r2, #3
 80032ea:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f7fd fb80 	bl	8000a10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003310:	e002      	b.n	8003318 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f7fd fb6a 	bl	80009ec <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff ff38 	bl	80031a2 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003346:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff ff34 	bl	80031b6 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003362:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0203 	bic.w	r2, r2, #3
 8003372:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003378:	f043 0210 	orr.w	r2, r3, #16
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f7fd fb41 	bl	8000a10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033a8:	f7fd fe42 	bl	8001030 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	4413      	add	r3, r2
 80033b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033b8:	f7fd fe3a 	bl	8001030 <HAL_GetTick>
 80033bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033be:	4b39      	ldr	r3, [pc, #228]	@ (80034a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	015b      	lsls	r3, r3, #5
 80033c4:	0d1b      	lsrs	r3, r3, #20
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	fb02 f303 	mul.w	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ce:	e054      	b.n	800347a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d050      	beq.n	800347a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033d8:	f7fd fe2a 	bl	8001030 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d902      	bls.n	80033ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d13d      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003406:	d111      	bne.n	800342c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003410:	d004      	beq.n	800341c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341a:	d107      	bne.n	800342c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800342a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003434:	d10f      	bne.n	8003456 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003454:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e017      	b.n	800349a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3b01      	subs	r3, #1
 8003478:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4013      	ands	r3, r2
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	429a      	cmp	r2, r3
 8003488:	bf0c      	ite	eq
 800348a:	2301      	moveq	r3, #1
 800348c:	2300      	movne	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	429a      	cmp	r2, r3
 8003496:	d19b      	bne.n	80033d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20004008 	.word	0x20004008

080034a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	@ 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034ba:	f7fd fdb9 	bl	8001030 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	4413      	add	r3, r2
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80034ca:	f7fd fdb1 	bl	8001030 <HAL_GetTick>
 80034ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	330c      	adds	r3, #12
 80034d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80034d8:	4b3d      	ldr	r3, [pc, #244]	@ (80035d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	00da      	lsls	r2, r3, #3
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	0d1b      	lsrs	r3, r3, #20
 80034e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80034f0:	e060      	b.n	80035b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80034f8:	d107      	bne.n	800350a <SPI_WaitFifoStateUntilTimeout+0x62>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d104      	bne.n	800350a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003508:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d050      	beq.n	80035b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003512:	f7fd fd8d 	bl	8001030 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800351e:	429a      	cmp	r2, r3
 8003520:	d902      	bls.n	8003528 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	2b00      	cmp	r3, #0
 8003526:	d13d      	bne.n	80035a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003536:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003540:	d111      	bne.n	8003566 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800354a:	d004      	beq.n	8003556 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003554:	d107      	bne.n	8003566 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003564:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800356e:	d10f      	bne.n	8003590 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800358e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e010      	b.n	80035c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d196      	bne.n	80034f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3728      	adds	r7, #40	@ 0x28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20004008 	.word	0x20004008

080035d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035e8:	d111      	bne.n	800360e <SPI_EndRxTransaction+0x3a>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035f2:	d004      	beq.n	80035fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035fc:	d107      	bne.n	800360e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2200      	movs	r2, #0
 8003616:	2180      	movs	r1, #128	@ 0x80
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff febd 	bl	8003398 <SPI_WaitFlagStateUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e023      	b.n	800367c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800363c:	d11d      	bne.n	800367a <SPI_EndRxTransaction+0xa6>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003646:	d004      	beq.n	8003652 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003650:	d113      	bne.n	800367a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2200      	movs	r2, #0
 800365a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff ff22 	bl	80034a8 <SPI_WaitFifoStateUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d007      	beq.n	800367a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800366e:	f043 0220 	orr.w	r2, r3, #32
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e000      	b.n	800367c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2200      	movs	r2, #0
 8003698:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f7ff ff03 	bl	80034a8 <SPI_WaitFifoStateUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ac:	f043 0220 	orr.w	r2, r3, #32
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e027      	b.n	8003708 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2200      	movs	r2, #0
 80036c0:	2180      	movs	r1, #128	@ 0x80
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f7ff fe68 	bl	8003398 <SPI_WaitFlagStateUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e014      	b.n	8003708 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f7ff fedc 	bl	80034a8 <SPI_WaitFifoStateUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fa:	f043 0220 	orr.w	r2, r3, #32
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e000      	b.n	8003708 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af02      	add	r7, sp, #8
 8003716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003726:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003728:	4b27      	ldr	r3, [pc, #156]	@ (80037c8 <SPI_AbortRx_ISR+0xb8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a27      	ldr	r2, [pc, #156]	@ (80037cc <SPI_AbortRx_ISR+0xbc>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	0a5b      	lsrs	r3, r3, #9
 8003734:	2264      	movs	r2, #100	@ 0x64
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800374a:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003756:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800375e:	e009      	b.n	8003774 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3b01      	subs	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003770:	2b40      	cmp	r3, #64	@ 0x40
 8003772:	d0eb      	beq.n	800374c <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003774:	f7fd fc5c 	bl	8001030 <HAL_GetTick>
 8003778:	4603      	mov	r3, r0
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2364      	movs	r3, #100	@ 0x64
 800377e:	2200      	movs	r2, #0
 8003780:	2180      	movs	r1, #128	@ 0x80
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff fe08 	bl	8003398 <SPI_WaitFlagStateUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2240      	movs	r2, #64	@ 0x40
 8003792:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003794:	f7fd fc4c 	bl	8001030 <HAL_GetTick>
 8003798:	4603      	mov	r3, r0
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2364      	movs	r3, #100	@ 0x64
 800379e:	2200      	movs	r2, #0
 80037a0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fe7f 	bl	80034a8 <SPI_WaitFifoStateUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2240      	movs	r2, #64	@ 0x40
 80037b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2207      	movs	r2, #7
 80037ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20004008 	.word	0x20004008
 80037cc:	057619f1 	.word	0x057619f1

080037d0 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80037d8:	4b4c      	ldr	r3, [pc, #304]	@ (800390c <SPI_AbortTx_ISR+0x13c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a4c      	ldr	r2, [pc, #304]	@ (8003910 <SPI_AbortTx_ISR+0x140>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	0a5b      	lsrs	r3, r3, #9
 80037e4:	2264      	movs	r2, #100	@ 0x64
 80037e6:	fb02 f303 	mul.w	r3, r2, r3
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037fa:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003806:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800380e:	e009      	b.n	8003824 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3b01      	subs	r3, #1
 8003814:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003820:	2b80      	cmp	r3, #128	@ 0x80
 8003822:	d0eb      	beq.n	80037fc <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003824:	f7fd fc04 	bl	8001030 <HAL_GetTick>
 8003828:	4603      	mov	r3, r0
 800382a:	461a      	mov	r2, r3
 800382c:	2164      	movs	r1, #100	@ 0x64
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff ff28 	bl	8003684 <SPI_EndRxTxTransaction>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2240      	movs	r2, #64	@ 0x40
 800383e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800384e:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003850:	f7fd fbee 	bl	8001030 <HAL_GetTick>
 8003854:	4603      	mov	r3, r0
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2364      	movs	r3, #100	@ 0x64
 800385a:	2200      	movs	r2, #0
 800385c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff fe21 	bl	80034a8 <SPI_WaitFifoStateUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2240      	movs	r2, #64	@ 0x40
 8003870:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387c:	2b40      	cmp	r3, #64	@ 0x40
 800387e:	d13c      	bne.n	80038fa <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800388e:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80038a2:	e009      	b.n	80038b8 <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b4:	2b40      	cmp	r3, #64	@ 0x40
 80038b6:	d0eb      	beq.n	8003890 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80038b8:	f7fd fbba 	bl	8001030 <HAL_GetTick>
 80038bc:	4603      	mov	r3, r0
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2364      	movs	r3, #100	@ 0x64
 80038c2:	2200      	movs	r2, #0
 80038c4:	2180      	movs	r1, #128	@ 0x80
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff fd66 	bl	8003398 <SPI_WaitFlagStateUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2240      	movs	r2, #64	@ 0x40
 80038d6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 80038d8:	f7fd fbaa 	bl	8001030 <HAL_GetTick>
 80038dc:	4603      	mov	r3, r0
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2364      	movs	r3, #100	@ 0x64
 80038e2:	2200      	movs	r2, #0
 80038e4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fddd 	bl	80034a8 <SPI_WaitFifoStateUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2240      	movs	r2, #64	@ 0x40
 80038f8:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2207      	movs	r2, #7
 80038fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20004008 	.word	0x20004008
 8003910:	057619f1 	.word	0x057619f1

08003914 <rand>:
 8003914:	4b16      	ldr	r3, [pc, #88]	@ (8003970 <rand+0x5c>)
 8003916:	b510      	push	{r4, lr}
 8003918:	681c      	ldr	r4, [r3, #0]
 800391a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800391c:	b9b3      	cbnz	r3, 800394c <rand+0x38>
 800391e:	2018      	movs	r0, #24
 8003920:	f000 fa50 	bl	8003dc4 <malloc>
 8003924:	4602      	mov	r2, r0
 8003926:	6320      	str	r0, [r4, #48]	@ 0x30
 8003928:	b920      	cbnz	r0, 8003934 <rand+0x20>
 800392a:	4b12      	ldr	r3, [pc, #72]	@ (8003974 <rand+0x60>)
 800392c:	4812      	ldr	r0, [pc, #72]	@ (8003978 <rand+0x64>)
 800392e:	2152      	movs	r1, #82	@ 0x52
 8003930:	f000 f9e0 	bl	8003cf4 <__assert_func>
 8003934:	4911      	ldr	r1, [pc, #68]	@ (800397c <rand+0x68>)
 8003936:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <rand+0x6c>)
 8003938:	e9c0 1300 	strd	r1, r3, [r0]
 800393c:	4b11      	ldr	r3, [pc, #68]	@ (8003984 <rand+0x70>)
 800393e:	6083      	str	r3, [r0, #8]
 8003940:	230b      	movs	r3, #11
 8003942:	8183      	strh	r3, [r0, #12]
 8003944:	2100      	movs	r1, #0
 8003946:	2001      	movs	r0, #1
 8003948:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800394c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800394e:	480e      	ldr	r0, [pc, #56]	@ (8003988 <rand+0x74>)
 8003950:	690b      	ldr	r3, [r1, #16]
 8003952:	694c      	ldr	r4, [r1, #20]
 8003954:	4a0d      	ldr	r2, [pc, #52]	@ (800398c <rand+0x78>)
 8003956:	4358      	muls	r0, r3
 8003958:	fb02 0004 	mla	r0, r2, r4, r0
 800395c:	fba3 3202 	umull	r3, r2, r3, r2
 8003960:	3301      	adds	r3, #1
 8003962:	eb40 0002 	adc.w	r0, r0, r2
 8003966:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800396a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800396e:	bd10      	pop	{r4, pc}
 8003970:	20004020 	.word	0x20004020
 8003974:	08004cc8 	.word	0x08004cc8
 8003978:	08004cdf 	.word	0x08004cdf
 800397c:	abcd330e 	.word	0xabcd330e
 8003980:	e66d1234 	.word	0xe66d1234
 8003984:	0005deec 	.word	0x0005deec
 8003988:	5851f42d 	.word	0x5851f42d
 800398c:	4c957f2d 	.word	0x4c957f2d

08003990 <std>:
 8003990:	2300      	movs	r3, #0
 8003992:	b510      	push	{r4, lr}
 8003994:	4604      	mov	r4, r0
 8003996:	e9c0 3300 	strd	r3, r3, [r0]
 800399a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800399e:	6083      	str	r3, [r0, #8]
 80039a0:	8181      	strh	r1, [r0, #12]
 80039a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80039a4:	81c2      	strh	r2, [r0, #14]
 80039a6:	6183      	str	r3, [r0, #24]
 80039a8:	4619      	mov	r1, r3
 80039aa:	2208      	movs	r2, #8
 80039ac:	305c      	adds	r0, #92	@ 0x5c
 80039ae:	f000 f916 	bl	8003bde <memset>
 80039b2:	4b0d      	ldr	r3, [pc, #52]	@ (80039e8 <std+0x58>)
 80039b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80039b6:	4b0d      	ldr	r3, [pc, #52]	@ (80039ec <std+0x5c>)
 80039b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80039ba:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <std+0x60>)
 80039bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80039be:	4b0d      	ldr	r3, [pc, #52]	@ (80039f4 <std+0x64>)
 80039c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80039c2:	4b0d      	ldr	r3, [pc, #52]	@ (80039f8 <std+0x68>)
 80039c4:	6224      	str	r4, [r4, #32]
 80039c6:	429c      	cmp	r4, r3
 80039c8:	d006      	beq.n	80039d8 <std+0x48>
 80039ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80039ce:	4294      	cmp	r4, r2
 80039d0:	d002      	beq.n	80039d8 <std+0x48>
 80039d2:	33d0      	adds	r3, #208	@ 0xd0
 80039d4:	429c      	cmp	r4, r3
 80039d6:	d105      	bne.n	80039e4 <std+0x54>
 80039d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80039dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039e0:	f000 b976 	b.w	8003cd0 <__retarget_lock_init_recursive>
 80039e4:	bd10      	pop	{r4, pc}
 80039e6:	bf00      	nop
 80039e8:	08003b59 	.word	0x08003b59
 80039ec:	08003b7b 	.word	0x08003b7b
 80039f0:	08003bb3 	.word	0x08003bb3
 80039f4:	08003bd7 	.word	0x08003bd7
 80039f8:	20008204 	.word	0x20008204

080039fc <stdio_exit_handler>:
 80039fc:	4a02      	ldr	r2, [pc, #8]	@ (8003a08 <stdio_exit_handler+0xc>)
 80039fe:	4903      	ldr	r1, [pc, #12]	@ (8003a0c <stdio_exit_handler+0x10>)
 8003a00:	4803      	ldr	r0, [pc, #12]	@ (8003a10 <stdio_exit_handler+0x14>)
 8003a02:	f000 b869 	b.w	8003ad8 <_fwalk_sglue>
 8003a06:	bf00      	nop
 8003a08:	20004014 	.word	0x20004014
 8003a0c:	08004601 	.word	0x08004601
 8003a10:	20004024 	.word	0x20004024

08003a14 <cleanup_stdio>:
 8003a14:	6841      	ldr	r1, [r0, #4]
 8003a16:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <cleanup_stdio+0x34>)
 8003a18:	4299      	cmp	r1, r3
 8003a1a:	b510      	push	{r4, lr}
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	d001      	beq.n	8003a24 <cleanup_stdio+0x10>
 8003a20:	f000 fdee 	bl	8004600 <_fflush_r>
 8003a24:	68a1      	ldr	r1, [r4, #8]
 8003a26:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <cleanup_stdio+0x38>)
 8003a28:	4299      	cmp	r1, r3
 8003a2a:	d002      	beq.n	8003a32 <cleanup_stdio+0x1e>
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f000 fde7 	bl	8004600 <_fflush_r>
 8003a32:	68e1      	ldr	r1, [r4, #12]
 8003a34:	4b06      	ldr	r3, [pc, #24]	@ (8003a50 <cleanup_stdio+0x3c>)
 8003a36:	4299      	cmp	r1, r3
 8003a38:	d004      	beq.n	8003a44 <cleanup_stdio+0x30>
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a40:	f000 bdde 	b.w	8004600 <_fflush_r>
 8003a44:	bd10      	pop	{r4, pc}
 8003a46:	bf00      	nop
 8003a48:	20008204 	.word	0x20008204
 8003a4c:	2000826c 	.word	0x2000826c
 8003a50:	200082d4 	.word	0x200082d4

08003a54 <global_stdio_init.part.0>:
 8003a54:	b510      	push	{r4, lr}
 8003a56:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <global_stdio_init.part.0+0x30>)
 8003a58:	4c0b      	ldr	r4, [pc, #44]	@ (8003a88 <global_stdio_init.part.0+0x34>)
 8003a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a8c <global_stdio_init.part.0+0x38>)
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	4620      	mov	r0, r4
 8003a60:	2200      	movs	r2, #0
 8003a62:	2104      	movs	r1, #4
 8003a64:	f7ff ff94 	bl	8003990 <std>
 8003a68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	2109      	movs	r1, #9
 8003a70:	f7ff ff8e 	bl	8003990 <std>
 8003a74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a78:	2202      	movs	r2, #2
 8003a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a7e:	2112      	movs	r1, #18
 8003a80:	f7ff bf86 	b.w	8003990 <std>
 8003a84:	2000833c 	.word	0x2000833c
 8003a88:	20008204 	.word	0x20008204
 8003a8c:	080039fd 	.word	0x080039fd

08003a90 <__sfp_lock_acquire>:
 8003a90:	4801      	ldr	r0, [pc, #4]	@ (8003a98 <__sfp_lock_acquire+0x8>)
 8003a92:	f000 b91e 	b.w	8003cd2 <__retarget_lock_acquire_recursive>
 8003a96:	bf00      	nop
 8003a98:	20008345 	.word	0x20008345

08003a9c <__sfp_lock_release>:
 8003a9c:	4801      	ldr	r0, [pc, #4]	@ (8003aa4 <__sfp_lock_release+0x8>)
 8003a9e:	f000 b919 	b.w	8003cd4 <__retarget_lock_release_recursive>
 8003aa2:	bf00      	nop
 8003aa4:	20008345 	.word	0x20008345

08003aa8 <__sinit>:
 8003aa8:	b510      	push	{r4, lr}
 8003aaa:	4604      	mov	r4, r0
 8003aac:	f7ff fff0 	bl	8003a90 <__sfp_lock_acquire>
 8003ab0:	6a23      	ldr	r3, [r4, #32]
 8003ab2:	b11b      	cbz	r3, 8003abc <__sinit+0x14>
 8003ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ab8:	f7ff bff0 	b.w	8003a9c <__sfp_lock_release>
 8003abc:	4b04      	ldr	r3, [pc, #16]	@ (8003ad0 <__sinit+0x28>)
 8003abe:	6223      	str	r3, [r4, #32]
 8003ac0:	4b04      	ldr	r3, [pc, #16]	@ (8003ad4 <__sinit+0x2c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f5      	bne.n	8003ab4 <__sinit+0xc>
 8003ac8:	f7ff ffc4 	bl	8003a54 <global_stdio_init.part.0>
 8003acc:	e7f2      	b.n	8003ab4 <__sinit+0xc>
 8003ace:	bf00      	nop
 8003ad0:	08003a15 	.word	0x08003a15
 8003ad4:	2000833c 	.word	0x2000833c

08003ad8 <_fwalk_sglue>:
 8003ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003adc:	4607      	mov	r7, r0
 8003ade:	4688      	mov	r8, r1
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ae8:	f1b9 0901 	subs.w	r9, r9, #1
 8003aec:	d505      	bpl.n	8003afa <_fwalk_sglue+0x22>
 8003aee:	6824      	ldr	r4, [r4, #0]
 8003af0:	2c00      	cmp	r4, #0
 8003af2:	d1f7      	bne.n	8003ae4 <_fwalk_sglue+0xc>
 8003af4:	4630      	mov	r0, r6
 8003af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003afa:	89ab      	ldrh	r3, [r5, #12]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d907      	bls.n	8003b10 <_fwalk_sglue+0x38>
 8003b00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b04:	3301      	adds	r3, #1
 8003b06:	d003      	beq.n	8003b10 <_fwalk_sglue+0x38>
 8003b08:	4629      	mov	r1, r5
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	47c0      	blx	r8
 8003b0e:	4306      	orrs	r6, r0
 8003b10:	3568      	adds	r5, #104	@ 0x68
 8003b12:	e7e9      	b.n	8003ae8 <_fwalk_sglue+0x10>

08003b14 <siprintf>:
 8003b14:	b40e      	push	{r1, r2, r3}
 8003b16:	b510      	push	{r4, lr}
 8003b18:	b09d      	sub	sp, #116	@ 0x74
 8003b1a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003b1c:	9002      	str	r0, [sp, #8]
 8003b1e:	9006      	str	r0, [sp, #24]
 8003b20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b24:	480a      	ldr	r0, [pc, #40]	@ (8003b50 <siprintf+0x3c>)
 8003b26:	9107      	str	r1, [sp, #28]
 8003b28:	9104      	str	r1, [sp, #16]
 8003b2a:	490a      	ldr	r1, [pc, #40]	@ (8003b54 <siprintf+0x40>)
 8003b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b30:	9105      	str	r1, [sp, #20]
 8003b32:	2400      	movs	r4, #0
 8003b34:	a902      	add	r1, sp, #8
 8003b36:	6800      	ldr	r0, [r0, #0]
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003b3c:	f000 fa54 	bl	8003fe8 <_svfiprintf_r>
 8003b40:	9b02      	ldr	r3, [sp, #8]
 8003b42:	701c      	strb	r4, [r3, #0]
 8003b44:	b01d      	add	sp, #116	@ 0x74
 8003b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b4a:	b003      	add	sp, #12
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20004020 	.word	0x20004020
 8003b54:	ffff0208 	.word	0xffff0208

08003b58 <__sread>:
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b60:	f000 f868 	bl	8003c34 <_read_r>
 8003b64:	2800      	cmp	r0, #0
 8003b66:	bfab      	itete	ge
 8003b68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8003b6c:	181b      	addge	r3, r3, r0
 8003b6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b72:	bfac      	ite	ge
 8003b74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b76:	81a3      	strhlt	r3, [r4, #12]
 8003b78:	bd10      	pop	{r4, pc}

08003b7a <__swrite>:
 8003b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7e:	461f      	mov	r7, r3
 8003b80:	898b      	ldrh	r3, [r1, #12]
 8003b82:	05db      	lsls	r3, r3, #23
 8003b84:	4605      	mov	r5, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	4616      	mov	r6, r2
 8003b8a:	d505      	bpl.n	8003b98 <__swrite+0x1e>
 8003b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b90:	2302      	movs	r3, #2
 8003b92:	2200      	movs	r2, #0
 8003b94:	f000 f83c 	bl	8003c10 <_lseek_r>
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ba2:	81a3      	strh	r3, [r4, #12]
 8003ba4:	4632      	mov	r2, r6
 8003ba6:	463b      	mov	r3, r7
 8003ba8:	4628      	mov	r0, r5
 8003baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bae:	f000 b853 	b.w	8003c58 <_write_r>

08003bb2 <__sseek>:
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	460c      	mov	r4, r1
 8003bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bba:	f000 f829 	bl	8003c10 <_lseek_r>
 8003bbe:	1c43      	adds	r3, r0, #1
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	bf15      	itete	ne
 8003bc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003bc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003bca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003bce:	81a3      	strheq	r3, [r4, #12]
 8003bd0:	bf18      	it	ne
 8003bd2:	81a3      	strhne	r3, [r4, #12]
 8003bd4:	bd10      	pop	{r4, pc}

08003bd6 <__sclose>:
 8003bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bda:	f000 b809 	b.w	8003bf0 <_close_r>

08003bde <memset>:
 8003bde:	4402      	add	r2, r0
 8003be0:	4603      	mov	r3, r0
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d100      	bne.n	8003be8 <memset+0xa>
 8003be6:	4770      	bx	lr
 8003be8:	f803 1b01 	strb.w	r1, [r3], #1
 8003bec:	e7f9      	b.n	8003be2 <memset+0x4>
	...

08003bf0 <_close_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4d06      	ldr	r5, [pc, #24]	@ (8003c0c <_close_r+0x1c>)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	602b      	str	r3, [r5, #0]
 8003bfc:	f7fd f8d1 	bl	8000da2 <_close>
 8003c00:	1c43      	adds	r3, r0, #1
 8003c02:	d102      	bne.n	8003c0a <_close_r+0x1a>
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	b103      	cbz	r3, 8003c0a <_close_r+0x1a>
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
 8003c0c:	20008340 	.word	0x20008340

08003c10 <_lseek_r>:
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	4d07      	ldr	r5, [pc, #28]	@ (8003c30 <_lseek_r+0x20>)
 8003c14:	4604      	mov	r4, r0
 8003c16:	4608      	mov	r0, r1
 8003c18:	4611      	mov	r1, r2
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	602a      	str	r2, [r5, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f7fd f8e6 	bl	8000df0 <_lseek>
 8003c24:	1c43      	adds	r3, r0, #1
 8003c26:	d102      	bne.n	8003c2e <_lseek_r+0x1e>
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	b103      	cbz	r3, 8003c2e <_lseek_r+0x1e>
 8003c2c:	6023      	str	r3, [r4, #0]
 8003c2e:	bd38      	pop	{r3, r4, r5, pc}
 8003c30:	20008340 	.word	0x20008340

08003c34 <_read_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	4d07      	ldr	r5, [pc, #28]	@ (8003c54 <_read_r+0x20>)
 8003c38:	4604      	mov	r4, r0
 8003c3a:	4608      	mov	r0, r1
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	2200      	movs	r2, #0
 8003c40:	602a      	str	r2, [r5, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	f7fd f874 	bl	8000d30 <_read>
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	d102      	bne.n	8003c52 <_read_r+0x1e>
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	b103      	cbz	r3, 8003c52 <_read_r+0x1e>
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
 8003c54:	20008340 	.word	0x20008340

08003c58 <_write_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4d07      	ldr	r5, [pc, #28]	@ (8003c78 <_write_r+0x20>)
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	4608      	mov	r0, r1
 8003c60:	4611      	mov	r1, r2
 8003c62:	2200      	movs	r2, #0
 8003c64:	602a      	str	r2, [r5, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f7fd f87f 	bl	8000d6a <_write>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d102      	bne.n	8003c76 <_write_r+0x1e>
 8003c70:	682b      	ldr	r3, [r5, #0]
 8003c72:	b103      	cbz	r3, 8003c76 <_write_r+0x1e>
 8003c74:	6023      	str	r3, [r4, #0]
 8003c76:	bd38      	pop	{r3, r4, r5, pc}
 8003c78:	20008340 	.word	0x20008340

08003c7c <__errno>:
 8003c7c:	4b01      	ldr	r3, [pc, #4]	@ (8003c84 <__errno+0x8>)
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20004020 	.word	0x20004020

08003c88 <__libc_init_array>:
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	4d0d      	ldr	r5, [pc, #52]	@ (8003cc0 <__libc_init_array+0x38>)
 8003c8c:	4c0d      	ldr	r4, [pc, #52]	@ (8003cc4 <__libc_init_array+0x3c>)
 8003c8e:	1b64      	subs	r4, r4, r5
 8003c90:	10a4      	asrs	r4, r4, #2
 8003c92:	2600      	movs	r6, #0
 8003c94:	42a6      	cmp	r6, r4
 8003c96:	d109      	bne.n	8003cac <__libc_init_array+0x24>
 8003c98:	4d0b      	ldr	r5, [pc, #44]	@ (8003cc8 <__libc_init_array+0x40>)
 8003c9a:	4c0c      	ldr	r4, [pc, #48]	@ (8003ccc <__libc_init_array+0x44>)
 8003c9c:	f000 ffee 	bl	8004c7c <_init>
 8003ca0:	1b64      	subs	r4, r4, r5
 8003ca2:	10a4      	asrs	r4, r4, #2
 8003ca4:	2600      	movs	r6, #0
 8003ca6:	42a6      	cmp	r6, r4
 8003ca8:	d105      	bne.n	8003cb6 <__libc_init_array+0x2e>
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
 8003cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb0:	4798      	blx	r3
 8003cb2:	3601      	adds	r6, #1
 8003cb4:	e7ee      	b.n	8003c94 <__libc_init_array+0xc>
 8003cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cba:	4798      	blx	r3
 8003cbc:	3601      	adds	r6, #1
 8003cbe:	e7f2      	b.n	8003ca6 <__libc_init_array+0x1e>
 8003cc0:	08004db0 	.word	0x08004db0
 8003cc4:	08004db0 	.word	0x08004db0
 8003cc8:	08004db0 	.word	0x08004db0
 8003ccc:	08004db4 	.word	0x08004db4

08003cd0 <__retarget_lock_init_recursive>:
 8003cd0:	4770      	bx	lr

08003cd2 <__retarget_lock_acquire_recursive>:
 8003cd2:	4770      	bx	lr

08003cd4 <__retarget_lock_release_recursive>:
 8003cd4:	4770      	bx	lr

08003cd6 <memcpy>:
 8003cd6:	440a      	add	r2, r1
 8003cd8:	4291      	cmp	r1, r2
 8003cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cde:	d100      	bne.n	8003ce2 <memcpy+0xc>
 8003ce0:	4770      	bx	lr
 8003ce2:	b510      	push	{r4, lr}
 8003ce4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ce8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cec:	4291      	cmp	r1, r2
 8003cee:	d1f9      	bne.n	8003ce4 <memcpy+0xe>
 8003cf0:	bd10      	pop	{r4, pc}
	...

08003cf4 <__assert_func>:
 8003cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cf6:	4614      	mov	r4, r2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b09      	ldr	r3, [pc, #36]	@ (8003d20 <__assert_func+0x2c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4605      	mov	r5, r0
 8003d00:	68d8      	ldr	r0, [r3, #12]
 8003d02:	b14c      	cbz	r4, 8003d18 <__assert_func+0x24>
 8003d04:	4b07      	ldr	r3, [pc, #28]	@ (8003d24 <__assert_func+0x30>)
 8003d06:	9100      	str	r1, [sp, #0]
 8003d08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003d0c:	4906      	ldr	r1, [pc, #24]	@ (8003d28 <__assert_func+0x34>)
 8003d0e:	462b      	mov	r3, r5
 8003d10:	f000 fc9e 	bl	8004650 <fiprintf>
 8003d14:	f000 fcd8 	bl	80046c8 <abort>
 8003d18:	4b04      	ldr	r3, [pc, #16]	@ (8003d2c <__assert_func+0x38>)
 8003d1a:	461c      	mov	r4, r3
 8003d1c:	e7f3      	b.n	8003d06 <__assert_func+0x12>
 8003d1e:	bf00      	nop
 8003d20:	20004020 	.word	0x20004020
 8003d24:	08004d37 	.word	0x08004d37
 8003d28:	08004d44 	.word	0x08004d44
 8003d2c:	08004d72 	.word	0x08004d72

08003d30 <_free_r>:
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	4605      	mov	r5, r0
 8003d34:	2900      	cmp	r1, #0
 8003d36:	d041      	beq.n	8003dbc <_free_r+0x8c>
 8003d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d3c:	1f0c      	subs	r4, r1, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bfb8      	it	lt
 8003d42:	18e4      	addlt	r4, r4, r3
 8003d44:	f000 f8e8 	bl	8003f18 <__malloc_lock>
 8003d48:	4a1d      	ldr	r2, [pc, #116]	@ (8003dc0 <_free_r+0x90>)
 8003d4a:	6813      	ldr	r3, [r2, #0]
 8003d4c:	b933      	cbnz	r3, 8003d5c <_free_r+0x2c>
 8003d4e:	6063      	str	r3, [r4, #4]
 8003d50:	6014      	str	r4, [r2, #0]
 8003d52:	4628      	mov	r0, r5
 8003d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d58:	f000 b8e4 	b.w	8003f24 <__malloc_unlock>
 8003d5c:	42a3      	cmp	r3, r4
 8003d5e:	d908      	bls.n	8003d72 <_free_r+0x42>
 8003d60:	6820      	ldr	r0, [r4, #0]
 8003d62:	1821      	adds	r1, r4, r0
 8003d64:	428b      	cmp	r3, r1
 8003d66:	bf01      	itttt	eq
 8003d68:	6819      	ldreq	r1, [r3, #0]
 8003d6a:	685b      	ldreq	r3, [r3, #4]
 8003d6c:	1809      	addeq	r1, r1, r0
 8003d6e:	6021      	streq	r1, [r4, #0]
 8003d70:	e7ed      	b.n	8003d4e <_free_r+0x1e>
 8003d72:	461a      	mov	r2, r3
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	b10b      	cbz	r3, 8003d7c <_free_r+0x4c>
 8003d78:	42a3      	cmp	r3, r4
 8003d7a:	d9fa      	bls.n	8003d72 <_free_r+0x42>
 8003d7c:	6811      	ldr	r1, [r2, #0]
 8003d7e:	1850      	adds	r0, r2, r1
 8003d80:	42a0      	cmp	r0, r4
 8003d82:	d10b      	bne.n	8003d9c <_free_r+0x6c>
 8003d84:	6820      	ldr	r0, [r4, #0]
 8003d86:	4401      	add	r1, r0
 8003d88:	1850      	adds	r0, r2, r1
 8003d8a:	4283      	cmp	r3, r0
 8003d8c:	6011      	str	r1, [r2, #0]
 8003d8e:	d1e0      	bne.n	8003d52 <_free_r+0x22>
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	6053      	str	r3, [r2, #4]
 8003d96:	4408      	add	r0, r1
 8003d98:	6010      	str	r0, [r2, #0]
 8003d9a:	e7da      	b.n	8003d52 <_free_r+0x22>
 8003d9c:	d902      	bls.n	8003da4 <_free_r+0x74>
 8003d9e:	230c      	movs	r3, #12
 8003da0:	602b      	str	r3, [r5, #0]
 8003da2:	e7d6      	b.n	8003d52 <_free_r+0x22>
 8003da4:	6820      	ldr	r0, [r4, #0]
 8003da6:	1821      	adds	r1, r4, r0
 8003da8:	428b      	cmp	r3, r1
 8003daa:	bf04      	itt	eq
 8003dac:	6819      	ldreq	r1, [r3, #0]
 8003dae:	685b      	ldreq	r3, [r3, #4]
 8003db0:	6063      	str	r3, [r4, #4]
 8003db2:	bf04      	itt	eq
 8003db4:	1809      	addeq	r1, r1, r0
 8003db6:	6021      	streq	r1, [r4, #0]
 8003db8:	6054      	str	r4, [r2, #4]
 8003dba:	e7ca      	b.n	8003d52 <_free_r+0x22>
 8003dbc:	bd38      	pop	{r3, r4, r5, pc}
 8003dbe:	bf00      	nop
 8003dc0:	2000834c 	.word	0x2000834c

08003dc4 <malloc>:
 8003dc4:	4b02      	ldr	r3, [pc, #8]	@ (8003dd0 <malloc+0xc>)
 8003dc6:	4601      	mov	r1, r0
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	f000 b825 	b.w	8003e18 <_malloc_r>
 8003dce:	bf00      	nop
 8003dd0:	20004020 	.word	0x20004020

08003dd4 <sbrk_aligned>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	4e0f      	ldr	r6, [pc, #60]	@ (8003e14 <sbrk_aligned+0x40>)
 8003dd8:	460c      	mov	r4, r1
 8003dda:	6831      	ldr	r1, [r6, #0]
 8003ddc:	4605      	mov	r5, r0
 8003dde:	b911      	cbnz	r1, 8003de6 <sbrk_aligned+0x12>
 8003de0:	f000 fc62 	bl	80046a8 <_sbrk_r>
 8003de4:	6030      	str	r0, [r6, #0]
 8003de6:	4621      	mov	r1, r4
 8003de8:	4628      	mov	r0, r5
 8003dea:	f000 fc5d 	bl	80046a8 <_sbrk_r>
 8003dee:	1c43      	adds	r3, r0, #1
 8003df0:	d103      	bne.n	8003dfa <sbrk_aligned+0x26>
 8003df2:	f04f 34ff 	mov.w	r4, #4294967295
 8003df6:	4620      	mov	r0, r4
 8003df8:	bd70      	pop	{r4, r5, r6, pc}
 8003dfa:	1cc4      	adds	r4, r0, #3
 8003dfc:	f024 0403 	bic.w	r4, r4, #3
 8003e00:	42a0      	cmp	r0, r4
 8003e02:	d0f8      	beq.n	8003df6 <sbrk_aligned+0x22>
 8003e04:	1a21      	subs	r1, r4, r0
 8003e06:	4628      	mov	r0, r5
 8003e08:	f000 fc4e 	bl	80046a8 <_sbrk_r>
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d1f2      	bne.n	8003df6 <sbrk_aligned+0x22>
 8003e10:	e7ef      	b.n	8003df2 <sbrk_aligned+0x1e>
 8003e12:	bf00      	nop
 8003e14:	20008348 	.word	0x20008348

08003e18 <_malloc_r>:
 8003e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e1c:	1ccd      	adds	r5, r1, #3
 8003e1e:	f025 0503 	bic.w	r5, r5, #3
 8003e22:	3508      	adds	r5, #8
 8003e24:	2d0c      	cmp	r5, #12
 8003e26:	bf38      	it	cc
 8003e28:	250c      	movcc	r5, #12
 8003e2a:	2d00      	cmp	r5, #0
 8003e2c:	4606      	mov	r6, r0
 8003e2e:	db01      	blt.n	8003e34 <_malloc_r+0x1c>
 8003e30:	42a9      	cmp	r1, r5
 8003e32:	d904      	bls.n	8003e3e <_malloc_r+0x26>
 8003e34:	230c      	movs	r3, #12
 8003e36:	6033      	str	r3, [r6, #0]
 8003e38:	2000      	movs	r0, #0
 8003e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f14 <_malloc_r+0xfc>
 8003e42:	f000 f869 	bl	8003f18 <__malloc_lock>
 8003e46:	f8d8 3000 	ldr.w	r3, [r8]
 8003e4a:	461c      	mov	r4, r3
 8003e4c:	bb44      	cbnz	r4, 8003ea0 <_malloc_r+0x88>
 8003e4e:	4629      	mov	r1, r5
 8003e50:	4630      	mov	r0, r6
 8003e52:	f7ff ffbf 	bl	8003dd4 <sbrk_aligned>
 8003e56:	1c43      	adds	r3, r0, #1
 8003e58:	4604      	mov	r4, r0
 8003e5a:	d158      	bne.n	8003f0e <_malloc_r+0xf6>
 8003e5c:	f8d8 4000 	ldr.w	r4, [r8]
 8003e60:	4627      	mov	r7, r4
 8003e62:	2f00      	cmp	r7, #0
 8003e64:	d143      	bne.n	8003eee <_malloc_r+0xd6>
 8003e66:	2c00      	cmp	r4, #0
 8003e68:	d04b      	beq.n	8003f02 <_malloc_r+0xea>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	4639      	mov	r1, r7
 8003e6e:	4630      	mov	r0, r6
 8003e70:	eb04 0903 	add.w	r9, r4, r3
 8003e74:	f000 fc18 	bl	80046a8 <_sbrk_r>
 8003e78:	4581      	cmp	r9, r0
 8003e7a:	d142      	bne.n	8003f02 <_malloc_r+0xea>
 8003e7c:	6821      	ldr	r1, [r4, #0]
 8003e7e:	1a6d      	subs	r5, r5, r1
 8003e80:	4629      	mov	r1, r5
 8003e82:	4630      	mov	r0, r6
 8003e84:	f7ff ffa6 	bl	8003dd4 <sbrk_aligned>
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d03a      	beq.n	8003f02 <_malloc_r+0xea>
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	442b      	add	r3, r5
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	f8d8 3000 	ldr.w	r3, [r8]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	bb62      	cbnz	r2, 8003ef4 <_malloc_r+0xdc>
 8003e9a:	f8c8 7000 	str.w	r7, [r8]
 8003e9e:	e00f      	b.n	8003ec0 <_malloc_r+0xa8>
 8003ea0:	6822      	ldr	r2, [r4, #0]
 8003ea2:	1b52      	subs	r2, r2, r5
 8003ea4:	d420      	bmi.n	8003ee8 <_malloc_r+0xd0>
 8003ea6:	2a0b      	cmp	r2, #11
 8003ea8:	d917      	bls.n	8003eda <_malloc_r+0xc2>
 8003eaa:	1961      	adds	r1, r4, r5
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	6025      	str	r5, [r4, #0]
 8003eb0:	bf18      	it	ne
 8003eb2:	6059      	strne	r1, [r3, #4]
 8003eb4:	6863      	ldr	r3, [r4, #4]
 8003eb6:	bf08      	it	eq
 8003eb8:	f8c8 1000 	streq.w	r1, [r8]
 8003ebc:	5162      	str	r2, [r4, r5]
 8003ebe:	604b      	str	r3, [r1, #4]
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f000 f82f 	bl	8003f24 <__malloc_unlock>
 8003ec6:	f104 000b 	add.w	r0, r4, #11
 8003eca:	1d23      	adds	r3, r4, #4
 8003ecc:	f020 0007 	bic.w	r0, r0, #7
 8003ed0:	1ac2      	subs	r2, r0, r3
 8003ed2:	bf1c      	itt	ne
 8003ed4:	1a1b      	subne	r3, r3, r0
 8003ed6:	50a3      	strne	r3, [r4, r2]
 8003ed8:	e7af      	b.n	8003e3a <_malloc_r+0x22>
 8003eda:	6862      	ldr	r2, [r4, #4]
 8003edc:	42a3      	cmp	r3, r4
 8003ede:	bf0c      	ite	eq
 8003ee0:	f8c8 2000 	streq.w	r2, [r8]
 8003ee4:	605a      	strne	r2, [r3, #4]
 8003ee6:	e7eb      	b.n	8003ec0 <_malloc_r+0xa8>
 8003ee8:	4623      	mov	r3, r4
 8003eea:	6864      	ldr	r4, [r4, #4]
 8003eec:	e7ae      	b.n	8003e4c <_malloc_r+0x34>
 8003eee:	463c      	mov	r4, r7
 8003ef0:	687f      	ldr	r7, [r7, #4]
 8003ef2:	e7b6      	b.n	8003e62 <_malloc_r+0x4a>
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	42a3      	cmp	r3, r4
 8003efa:	d1fb      	bne.n	8003ef4 <_malloc_r+0xdc>
 8003efc:	2300      	movs	r3, #0
 8003efe:	6053      	str	r3, [r2, #4]
 8003f00:	e7de      	b.n	8003ec0 <_malloc_r+0xa8>
 8003f02:	230c      	movs	r3, #12
 8003f04:	6033      	str	r3, [r6, #0]
 8003f06:	4630      	mov	r0, r6
 8003f08:	f000 f80c 	bl	8003f24 <__malloc_unlock>
 8003f0c:	e794      	b.n	8003e38 <_malloc_r+0x20>
 8003f0e:	6005      	str	r5, [r0, #0]
 8003f10:	e7d6      	b.n	8003ec0 <_malloc_r+0xa8>
 8003f12:	bf00      	nop
 8003f14:	2000834c 	.word	0x2000834c

08003f18 <__malloc_lock>:
 8003f18:	4801      	ldr	r0, [pc, #4]	@ (8003f20 <__malloc_lock+0x8>)
 8003f1a:	f7ff beda 	b.w	8003cd2 <__retarget_lock_acquire_recursive>
 8003f1e:	bf00      	nop
 8003f20:	20008344 	.word	0x20008344

08003f24 <__malloc_unlock>:
 8003f24:	4801      	ldr	r0, [pc, #4]	@ (8003f2c <__malloc_unlock+0x8>)
 8003f26:	f7ff bed5 	b.w	8003cd4 <__retarget_lock_release_recursive>
 8003f2a:	bf00      	nop
 8003f2c:	20008344 	.word	0x20008344

08003f30 <__ssputs_r>:
 8003f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	688e      	ldr	r6, [r1, #8]
 8003f36:	461f      	mov	r7, r3
 8003f38:	42be      	cmp	r6, r7
 8003f3a:	680b      	ldr	r3, [r1, #0]
 8003f3c:	4682      	mov	sl, r0
 8003f3e:	460c      	mov	r4, r1
 8003f40:	4690      	mov	r8, r2
 8003f42:	d82d      	bhi.n	8003fa0 <__ssputs_r+0x70>
 8003f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f4c:	d026      	beq.n	8003f9c <__ssputs_r+0x6c>
 8003f4e:	6965      	ldr	r5, [r4, #20]
 8003f50:	6909      	ldr	r1, [r1, #16]
 8003f52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f56:	eba3 0901 	sub.w	r9, r3, r1
 8003f5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f5e:	1c7b      	adds	r3, r7, #1
 8003f60:	444b      	add	r3, r9
 8003f62:	106d      	asrs	r5, r5, #1
 8003f64:	429d      	cmp	r5, r3
 8003f66:	bf38      	it	cc
 8003f68:	461d      	movcc	r5, r3
 8003f6a:	0553      	lsls	r3, r2, #21
 8003f6c:	d527      	bpl.n	8003fbe <__ssputs_r+0x8e>
 8003f6e:	4629      	mov	r1, r5
 8003f70:	f7ff ff52 	bl	8003e18 <_malloc_r>
 8003f74:	4606      	mov	r6, r0
 8003f76:	b360      	cbz	r0, 8003fd2 <__ssputs_r+0xa2>
 8003f78:	6921      	ldr	r1, [r4, #16]
 8003f7a:	464a      	mov	r2, r9
 8003f7c:	f7ff feab 	bl	8003cd6 <memcpy>
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f8a:	81a3      	strh	r3, [r4, #12]
 8003f8c:	6126      	str	r6, [r4, #16]
 8003f8e:	6165      	str	r5, [r4, #20]
 8003f90:	444e      	add	r6, r9
 8003f92:	eba5 0509 	sub.w	r5, r5, r9
 8003f96:	6026      	str	r6, [r4, #0]
 8003f98:	60a5      	str	r5, [r4, #8]
 8003f9a:	463e      	mov	r6, r7
 8003f9c:	42be      	cmp	r6, r7
 8003f9e:	d900      	bls.n	8003fa2 <__ssputs_r+0x72>
 8003fa0:	463e      	mov	r6, r7
 8003fa2:	6820      	ldr	r0, [r4, #0]
 8003fa4:	4632      	mov	r2, r6
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	f000 fb64 	bl	8004674 <memmove>
 8003fac:	68a3      	ldr	r3, [r4, #8]
 8003fae:	1b9b      	subs	r3, r3, r6
 8003fb0:	60a3      	str	r3, [r4, #8]
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	4433      	add	r3, r6
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	2000      	movs	r0, #0
 8003fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fbe:	462a      	mov	r2, r5
 8003fc0:	f000 fb89 	bl	80046d6 <_realloc_r>
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d1e0      	bne.n	8003f8c <__ssputs_r+0x5c>
 8003fca:	6921      	ldr	r1, [r4, #16]
 8003fcc:	4650      	mov	r0, sl
 8003fce:	f7ff feaf 	bl	8003d30 <_free_r>
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	f8ca 3000 	str.w	r3, [sl]
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fde:	81a3      	strh	r3, [r4, #12]
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	e7e9      	b.n	8003fba <__ssputs_r+0x8a>
	...

08003fe8 <_svfiprintf_r>:
 8003fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fec:	4698      	mov	r8, r3
 8003fee:	898b      	ldrh	r3, [r1, #12]
 8003ff0:	061b      	lsls	r3, r3, #24
 8003ff2:	b09d      	sub	sp, #116	@ 0x74
 8003ff4:	4607      	mov	r7, r0
 8003ff6:	460d      	mov	r5, r1
 8003ff8:	4614      	mov	r4, r2
 8003ffa:	d510      	bpl.n	800401e <_svfiprintf_r+0x36>
 8003ffc:	690b      	ldr	r3, [r1, #16]
 8003ffe:	b973      	cbnz	r3, 800401e <_svfiprintf_r+0x36>
 8004000:	2140      	movs	r1, #64	@ 0x40
 8004002:	f7ff ff09 	bl	8003e18 <_malloc_r>
 8004006:	6028      	str	r0, [r5, #0]
 8004008:	6128      	str	r0, [r5, #16]
 800400a:	b930      	cbnz	r0, 800401a <_svfiprintf_r+0x32>
 800400c:	230c      	movs	r3, #12
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	b01d      	add	sp, #116	@ 0x74
 8004016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401a:	2340      	movs	r3, #64	@ 0x40
 800401c:	616b      	str	r3, [r5, #20]
 800401e:	2300      	movs	r3, #0
 8004020:	9309      	str	r3, [sp, #36]	@ 0x24
 8004022:	2320      	movs	r3, #32
 8004024:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004028:	f8cd 800c 	str.w	r8, [sp, #12]
 800402c:	2330      	movs	r3, #48	@ 0x30
 800402e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041cc <_svfiprintf_r+0x1e4>
 8004032:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004036:	f04f 0901 	mov.w	r9, #1
 800403a:	4623      	mov	r3, r4
 800403c:	469a      	mov	sl, r3
 800403e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004042:	b10a      	cbz	r2, 8004048 <_svfiprintf_r+0x60>
 8004044:	2a25      	cmp	r2, #37	@ 0x25
 8004046:	d1f9      	bne.n	800403c <_svfiprintf_r+0x54>
 8004048:	ebba 0b04 	subs.w	fp, sl, r4
 800404c:	d00b      	beq.n	8004066 <_svfiprintf_r+0x7e>
 800404e:	465b      	mov	r3, fp
 8004050:	4622      	mov	r2, r4
 8004052:	4629      	mov	r1, r5
 8004054:	4638      	mov	r0, r7
 8004056:	f7ff ff6b 	bl	8003f30 <__ssputs_r>
 800405a:	3001      	adds	r0, #1
 800405c:	f000 80a7 	beq.w	80041ae <_svfiprintf_r+0x1c6>
 8004060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004062:	445a      	add	r2, fp
 8004064:	9209      	str	r2, [sp, #36]	@ 0x24
 8004066:	f89a 3000 	ldrb.w	r3, [sl]
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 809f 	beq.w	80041ae <_svfiprintf_r+0x1c6>
 8004070:	2300      	movs	r3, #0
 8004072:	f04f 32ff 	mov.w	r2, #4294967295
 8004076:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800407a:	f10a 0a01 	add.w	sl, sl, #1
 800407e:	9304      	str	r3, [sp, #16]
 8004080:	9307      	str	r3, [sp, #28]
 8004082:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004086:	931a      	str	r3, [sp, #104]	@ 0x68
 8004088:	4654      	mov	r4, sl
 800408a:	2205      	movs	r2, #5
 800408c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004090:	484e      	ldr	r0, [pc, #312]	@ (80041cc <_svfiprintf_r+0x1e4>)
 8004092:	f7fc f8c5 	bl	8000220 <memchr>
 8004096:	9a04      	ldr	r2, [sp, #16]
 8004098:	b9d8      	cbnz	r0, 80040d2 <_svfiprintf_r+0xea>
 800409a:	06d0      	lsls	r0, r2, #27
 800409c:	bf44      	itt	mi
 800409e:	2320      	movmi	r3, #32
 80040a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040a4:	0711      	lsls	r1, r2, #28
 80040a6:	bf44      	itt	mi
 80040a8:	232b      	movmi	r3, #43	@ 0x2b
 80040aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040ae:	f89a 3000 	ldrb.w	r3, [sl]
 80040b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80040b4:	d015      	beq.n	80040e2 <_svfiprintf_r+0xfa>
 80040b6:	9a07      	ldr	r2, [sp, #28]
 80040b8:	4654      	mov	r4, sl
 80040ba:	2000      	movs	r0, #0
 80040bc:	f04f 0c0a 	mov.w	ip, #10
 80040c0:	4621      	mov	r1, r4
 80040c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040c6:	3b30      	subs	r3, #48	@ 0x30
 80040c8:	2b09      	cmp	r3, #9
 80040ca:	d94b      	bls.n	8004164 <_svfiprintf_r+0x17c>
 80040cc:	b1b0      	cbz	r0, 80040fc <_svfiprintf_r+0x114>
 80040ce:	9207      	str	r2, [sp, #28]
 80040d0:	e014      	b.n	80040fc <_svfiprintf_r+0x114>
 80040d2:	eba0 0308 	sub.w	r3, r0, r8
 80040d6:	fa09 f303 	lsl.w	r3, r9, r3
 80040da:	4313      	orrs	r3, r2
 80040dc:	9304      	str	r3, [sp, #16]
 80040de:	46a2      	mov	sl, r4
 80040e0:	e7d2      	b.n	8004088 <_svfiprintf_r+0xa0>
 80040e2:	9b03      	ldr	r3, [sp, #12]
 80040e4:	1d19      	adds	r1, r3, #4
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	9103      	str	r1, [sp, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bfbb      	ittet	lt
 80040ee:	425b      	neglt	r3, r3
 80040f0:	f042 0202 	orrlt.w	r2, r2, #2
 80040f4:	9307      	strge	r3, [sp, #28]
 80040f6:	9307      	strlt	r3, [sp, #28]
 80040f8:	bfb8      	it	lt
 80040fa:	9204      	strlt	r2, [sp, #16]
 80040fc:	7823      	ldrb	r3, [r4, #0]
 80040fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004100:	d10a      	bne.n	8004118 <_svfiprintf_r+0x130>
 8004102:	7863      	ldrb	r3, [r4, #1]
 8004104:	2b2a      	cmp	r3, #42	@ 0x2a
 8004106:	d132      	bne.n	800416e <_svfiprintf_r+0x186>
 8004108:	9b03      	ldr	r3, [sp, #12]
 800410a:	1d1a      	adds	r2, r3, #4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	9203      	str	r2, [sp, #12]
 8004110:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004114:	3402      	adds	r4, #2
 8004116:	9305      	str	r3, [sp, #20]
 8004118:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041dc <_svfiprintf_r+0x1f4>
 800411c:	7821      	ldrb	r1, [r4, #0]
 800411e:	2203      	movs	r2, #3
 8004120:	4650      	mov	r0, sl
 8004122:	f7fc f87d 	bl	8000220 <memchr>
 8004126:	b138      	cbz	r0, 8004138 <_svfiprintf_r+0x150>
 8004128:	9b04      	ldr	r3, [sp, #16]
 800412a:	eba0 000a 	sub.w	r0, r0, sl
 800412e:	2240      	movs	r2, #64	@ 0x40
 8004130:	4082      	lsls	r2, r0
 8004132:	4313      	orrs	r3, r2
 8004134:	3401      	adds	r4, #1
 8004136:	9304      	str	r3, [sp, #16]
 8004138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800413c:	4824      	ldr	r0, [pc, #144]	@ (80041d0 <_svfiprintf_r+0x1e8>)
 800413e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004142:	2206      	movs	r2, #6
 8004144:	f7fc f86c 	bl	8000220 <memchr>
 8004148:	2800      	cmp	r0, #0
 800414a:	d036      	beq.n	80041ba <_svfiprintf_r+0x1d2>
 800414c:	4b21      	ldr	r3, [pc, #132]	@ (80041d4 <_svfiprintf_r+0x1ec>)
 800414e:	bb1b      	cbnz	r3, 8004198 <_svfiprintf_r+0x1b0>
 8004150:	9b03      	ldr	r3, [sp, #12]
 8004152:	3307      	adds	r3, #7
 8004154:	f023 0307 	bic.w	r3, r3, #7
 8004158:	3308      	adds	r3, #8
 800415a:	9303      	str	r3, [sp, #12]
 800415c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800415e:	4433      	add	r3, r6
 8004160:	9309      	str	r3, [sp, #36]	@ 0x24
 8004162:	e76a      	b.n	800403a <_svfiprintf_r+0x52>
 8004164:	fb0c 3202 	mla	r2, ip, r2, r3
 8004168:	460c      	mov	r4, r1
 800416a:	2001      	movs	r0, #1
 800416c:	e7a8      	b.n	80040c0 <_svfiprintf_r+0xd8>
 800416e:	2300      	movs	r3, #0
 8004170:	3401      	adds	r4, #1
 8004172:	9305      	str	r3, [sp, #20]
 8004174:	4619      	mov	r1, r3
 8004176:	f04f 0c0a 	mov.w	ip, #10
 800417a:	4620      	mov	r0, r4
 800417c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004180:	3a30      	subs	r2, #48	@ 0x30
 8004182:	2a09      	cmp	r2, #9
 8004184:	d903      	bls.n	800418e <_svfiprintf_r+0x1a6>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0c6      	beq.n	8004118 <_svfiprintf_r+0x130>
 800418a:	9105      	str	r1, [sp, #20]
 800418c:	e7c4      	b.n	8004118 <_svfiprintf_r+0x130>
 800418e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004192:	4604      	mov	r4, r0
 8004194:	2301      	movs	r3, #1
 8004196:	e7f0      	b.n	800417a <_svfiprintf_r+0x192>
 8004198:	ab03      	add	r3, sp, #12
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	462a      	mov	r2, r5
 800419e:	4b0e      	ldr	r3, [pc, #56]	@ (80041d8 <_svfiprintf_r+0x1f0>)
 80041a0:	a904      	add	r1, sp, #16
 80041a2:	4638      	mov	r0, r7
 80041a4:	f3af 8000 	nop.w
 80041a8:	1c42      	adds	r2, r0, #1
 80041aa:	4606      	mov	r6, r0
 80041ac:	d1d6      	bne.n	800415c <_svfiprintf_r+0x174>
 80041ae:	89ab      	ldrh	r3, [r5, #12]
 80041b0:	065b      	lsls	r3, r3, #25
 80041b2:	f53f af2d 	bmi.w	8004010 <_svfiprintf_r+0x28>
 80041b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041b8:	e72c      	b.n	8004014 <_svfiprintf_r+0x2c>
 80041ba:	ab03      	add	r3, sp, #12
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	462a      	mov	r2, r5
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <_svfiprintf_r+0x1f0>)
 80041c2:	a904      	add	r1, sp, #16
 80041c4:	4638      	mov	r0, r7
 80041c6:	f000 f879 	bl	80042bc <_printf_i>
 80041ca:	e7ed      	b.n	80041a8 <_svfiprintf_r+0x1c0>
 80041cc:	08004d73 	.word	0x08004d73
 80041d0:	08004d7d 	.word	0x08004d7d
 80041d4:	00000000 	.word	0x00000000
 80041d8:	08003f31 	.word	0x08003f31
 80041dc:	08004d79 	.word	0x08004d79

080041e0 <_printf_common>:
 80041e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e4:	4616      	mov	r6, r2
 80041e6:	4698      	mov	r8, r3
 80041e8:	688a      	ldr	r2, [r1, #8]
 80041ea:	690b      	ldr	r3, [r1, #16]
 80041ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041f0:	4293      	cmp	r3, r2
 80041f2:	bfb8      	it	lt
 80041f4:	4613      	movlt	r3, r2
 80041f6:	6033      	str	r3, [r6, #0]
 80041f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041fc:	4607      	mov	r7, r0
 80041fe:	460c      	mov	r4, r1
 8004200:	b10a      	cbz	r2, 8004206 <_printf_common+0x26>
 8004202:	3301      	adds	r3, #1
 8004204:	6033      	str	r3, [r6, #0]
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	0699      	lsls	r1, r3, #26
 800420a:	bf42      	ittt	mi
 800420c:	6833      	ldrmi	r3, [r6, #0]
 800420e:	3302      	addmi	r3, #2
 8004210:	6033      	strmi	r3, [r6, #0]
 8004212:	6825      	ldr	r5, [r4, #0]
 8004214:	f015 0506 	ands.w	r5, r5, #6
 8004218:	d106      	bne.n	8004228 <_printf_common+0x48>
 800421a:	f104 0a19 	add.w	sl, r4, #25
 800421e:	68e3      	ldr	r3, [r4, #12]
 8004220:	6832      	ldr	r2, [r6, #0]
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	42ab      	cmp	r3, r5
 8004226:	dc26      	bgt.n	8004276 <_printf_common+0x96>
 8004228:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800422c:	6822      	ldr	r2, [r4, #0]
 800422e:	3b00      	subs	r3, #0
 8004230:	bf18      	it	ne
 8004232:	2301      	movne	r3, #1
 8004234:	0692      	lsls	r2, r2, #26
 8004236:	d42b      	bmi.n	8004290 <_printf_common+0xb0>
 8004238:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800423c:	4641      	mov	r1, r8
 800423e:	4638      	mov	r0, r7
 8004240:	47c8      	blx	r9
 8004242:	3001      	adds	r0, #1
 8004244:	d01e      	beq.n	8004284 <_printf_common+0xa4>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	6922      	ldr	r2, [r4, #16]
 800424a:	f003 0306 	and.w	r3, r3, #6
 800424e:	2b04      	cmp	r3, #4
 8004250:	bf02      	ittt	eq
 8004252:	68e5      	ldreq	r5, [r4, #12]
 8004254:	6833      	ldreq	r3, [r6, #0]
 8004256:	1aed      	subeq	r5, r5, r3
 8004258:	68a3      	ldr	r3, [r4, #8]
 800425a:	bf0c      	ite	eq
 800425c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004260:	2500      	movne	r5, #0
 8004262:	4293      	cmp	r3, r2
 8004264:	bfc4      	itt	gt
 8004266:	1a9b      	subgt	r3, r3, r2
 8004268:	18ed      	addgt	r5, r5, r3
 800426a:	2600      	movs	r6, #0
 800426c:	341a      	adds	r4, #26
 800426e:	42b5      	cmp	r5, r6
 8004270:	d11a      	bne.n	80042a8 <_printf_common+0xc8>
 8004272:	2000      	movs	r0, #0
 8004274:	e008      	b.n	8004288 <_printf_common+0xa8>
 8004276:	2301      	movs	r3, #1
 8004278:	4652      	mov	r2, sl
 800427a:	4641      	mov	r1, r8
 800427c:	4638      	mov	r0, r7
 800427e:	47c8      	blx	r9
 8004280:	3001      	adds	r0, #1
 8004282:	d103      	bne.n	800428c <_printf_common+0xac>
 8004284:	f04f 30ff 	mov.w	r0, #4294967295
 8004288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428c:	3501      	adds	r5, #1
 800428e:	e7c6      	b.n	800421e <_printf_common+0x3e>
 8004290:	18e1      	adds	r1, r4, r3
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	2030      	movs	r0, #48	@ 0x30
 8004296:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800429a:	4422      	add	r2, r4
 800429c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042a4:	3302      	adds	r3, #2
 80042a6:	e7c7      	b.n	8004238 <_printf_common+0x58>
 80042a8:	2301      	movs	r3, #1
 80042aa:	4622      	mov	r2, r4
 80042ac:	4641      	mov	r1, r8
 80042ae:	4638      	mov	r0, r7
 80042b0:	47c8      	blx	r9
 80042b2:	3001      	adds	r0, #1
 80042b4:	d0e6      	beq.n	8004284 <_printf_common+0xa4>
 80042b6:	3601      	adds	r6, #1
 80042b8:	e7d9      	b.n	800426e <_printf_common+0x8e>
	...

080042bc <_printf_i>:
 80042bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042c0:	7e0f      	ldrb	r7, [r1, #24]
 80042c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042c4:	2f78      	cmp	r7, #120	@ 0x78
 80042c6:	4691      	mov	r9, r2
 80042c8:	4680      	mov	r8, r0
 80042ca:	460c      	mov	r4, r1
 80042cc:	469a      	mov	sl, r3
 80042ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042d2:	d807      	bhi.n	80042e4 <_printf_i+0x28>
 80042d4:	2f62      	cmp	r7, #98	@ 0x62
 80042d6:	d80a      	bhi.n	80042ee <_printf_i+0x32>
 80042d8:	2f00      	cmp	r7, #0
 80042da:	f000 80d1 	beq.w	8004480 <_printf_i+0x1c4>
 80042de:	2f58      	cmp	r7, #88	@ 0x58
 80042e0:	f000 80b8 	beq.w	8004454 <_printf_i+0x198>
 80042e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042ec:	e03a      	b.n	8004364 <_printf_i+0xa8>
 80042ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042f2:	2b15      	cmp	r3, #21
 80042f4:	d8f6      	bhi.n	80042e4 <_printf_i+0x28>
 80042f6:	a101      	add	r1, pc, #4	@ (adr r1, 80042fc <_printf_i+0x40>)
 80042f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042fc:	08004355 	.word	0x08004355
 8004300:	08004369 	.word	0x08004369
 8004304:	080042e5 	.word	0x080042e5
 8004308:	080042e5 	.word	0x080042e5
 800430c:	080042e5 	.word	0x080042e5
 8004310:	080042e5 	.word	0x080042e5
 8004314:	08004369 	.word	0x08004369
 8004318:	080042e5 	.word	0x080042e5
 800431c:	080042e5 	.word	0x080042e5
 8004320:	080042e5 	.word	0x080042e5
 8004324:	080042e5 	.word	0x080042e5
 8004328:	08004467 	.word	0x08004467
 800432c:	08004393 	.word	0x08004393
 8004330:	08004421 	.word	0x08004421
 8004334:	080042e5 	.word	0x080042e5
 8004338:	080042e5 	.word	0x080042e5
 800433c:	08004489 	.word	0x08004489
 8004340:	080042e5 	.word	0x080042e5
 8004344:	08004393 	.word	0x08004393
 8004348:	080042e5 	.word	0x080042e5
 800434c:	080042e5 	.word	0x080042e5
 8004350:	08004429 	.word	0x08004429
 8004354:	6833      	ldr	r3, [r6, #0]
 8004356:	1d1a      	adds	r2, r3, #4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6032      	str	r2, [r6, #0]
 800435c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004360:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004364:	2301      	movs	r3, #1
 8004366:	e09c      	b.n	80044a2 <_printf_i+0x1e6>
 8004368:	6833      	ldr	r3, [r6, #0]
 800436a:	6820      	ldr	r0, [r4, #0]
 800436c:	1d19      	adds	r1, r3, #4
 800436e:	6031      	str	r1, [r6, #0]
 8004370:	0606      	lsls	r6, r0, #24
 8004372:	d501      	bpl.n	8004378 <_printf_i+0xbc>
 8004374:	681d      	ldr	r5, [r3, #0]
 8004376:	e003      	b.n	8004380 <_printf_i+0xc4>
 8004378:	0645      	lsls	r5, r0, #25
 800437a:	d5fb      	bpl.n	8004374 <_printf_i+0xb8>
 800437c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004380:	2d00      	cmp	r5, #0
 8004382:	da03      	bge.n	800438c <_printf_i+0xd0>
 8004384:	232d      	movs	r3, #45	@ 0x2d
 8004386:	426d      	negs	r5, r5
 8004388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800438c:	4858      	ldr	r0, [pc, #352]	@ (80044f0 <_printf_i+0x234>)
 800438e:	230a      	movs	r3, #10
 8004390:	e011      	b.n	80043b6 <_printf_i+0xfa>
 8004392:	6821      	ldr	r1, [r4, #0]
 8004394:	6833      	ldr	r3, [r6, #0]
 8004396:	0608      	lsls	r0, r1, #24
 8004398:	f853 5b04 	ldr.w	r5, [r3], #4
 800439c:	d402      	bmi.n	80043a4 <_printf_i+0xe8>
 800439e:	0649      	lsls	r1, r1, #25
 80043a0:	bf48      	it	mi
 80043a2:	b2ad      	uxthmi	r5, r5
 80043a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80043a6:	4852      	ldr	r0, [pc, #328]	@ (80044f0 <_printf_i+0x234>)
 80043a8:	6033      	str	r3, [r6, #0]
 80043aa:	bf14      	ite	ne
 80043ac:	230a      	movne	r3, #10
 80043ae:	2308      	moveq	r3, #8
 80043b0:	2100      	movs	r1, #0
 80043b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043b6:	6866      	ldr	r6, [r4, #4]
 80043b8:	60a6      	str	r6, [r4, #8]
 80043ba:	2e00      	cmp	r6, #0
 80043bc:	db05      	blt.n	80043ca <_printf_i+0x10e>
 80043be:	6821      	ldr	r1, [r4, #0]
 80043c0:	432e      	orrs	r6, r5
 80043c2:	f021 0104 	bic.w	r1, r1, #4
 80043c6:	6021      	str	r1, [r4, #0]
 80043c8:	d04b      	beq.n	8004462 <_printf_i+0x1a6>
 80043ca:	4616      	mov	r6, r2
 80043cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80043d0:	fb03 5711 	mls	r7, r3, r1, r5
 80043d4:	5dc7      	ldrb	r7, [r0, r7]
 80043d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043da:	462f      	mov	r7, r5
 80043dc:	42bb      	cmp	r3, r7
 80043de:	460d      	mov	r5, r1
 80043e0:	d9f4      	bls.n	80043cc <_printf_i+0x110>
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d10b      	bne.n	80043fe <_printf_i+0x142>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	07df      	lsls	r7, r3, #31
 80043ea:	d508      	bpl.n	80043fe <_printf_i+0x142>
 80043ec:	6923      	ldr	r3, [r4, #16]
 80043ee:	6861      	ldr	r1, [r4, #4]
 80043f0:	4299      	cmp	r1, r3
 80043f2:	bfde      	ittt	le
 80043f4:	2330      	movle	r3, #48	@ 0x30
 80043f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043fe:	1b92      	subs	r2, r2, r6
 8004400:	6122      	str	r2, [r4, #16]
 8004402:	f8cd a000 	str.w	sl, [sp]
 8004406:	464b      	mov	r3, r9
 8004408:	aa03      	add	r2, sp, #12
 800440a:	4621      	mov	r1, r4
 800440c:	4640      	mov	r0, r8
 800440e:	f7ff fee7 	bl	80041e0 <_printf_common>
 8004412:	3001      	adds	r0, #1
 8004414:	d14a      	bne.n	80044ac <_printf_i+0x1f0>
 8004416:	f04f 30ff 	mov.w	r0, #4294967295
 800441a:	b004      	add	sp, #16
 800441c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	f043 0320 	orr.w	r3, r3, #32
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	4832      	ldr	r0, [pc, #200]	@ (80044f4 <_printf_i+0x238>)
 800442a:	2778      	movs	r7, #120	@ 0x78
 800442c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	6831      	ldr	r1, [r6, #0]
 8004434:	061f      	lsls	r7, r3, #24
 8004436:	f851 5b04 	ldr.w	r5, [r1], #4
 800443a:	d402      	bmi.n	8004442 <_printf_i+0x186>
 800443c:	065f      	lsls	r7, r3, #25
 800443e:	bf48      	it	mi
 8004440:	b2ad      	uxthmi	r5, r5
 8004442:	6031      	str	r1, [r6, #0]
 8004444:	07d9      	lsls	r1, r3, #31
 8004446:	bf44      	itt	mi
 8004448:	f043 0320 	orrmi.w	r3, r3, #32
 800444c:	6023      	strmi	r3, [r4, #0]
 800444e:	b11d      	cbz	r5, 8004458 <_printf_i+0x19c>
 8004450:	2310      	movs	r3, #16
 8004452:	e7ad      	b.n	80043b0 <_printf_i+0xf4>
 8004454:	4826      	ldr	r0, [pc, #152]	@ (80044f0 <_printf_i+0x234>)
 8004456:	e7e9      	b.n	800442c <_printf_i+0x170>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	f023 0320 	bic.w	r3, r3, #32
 800445e:	6023      	str	r3, [r4, #0]
 8004460:	e7f6      	b.n	8004450 <_printf_i+0x194>
 8004462:	4616      	mov	r6, r2
 8004464:	e7bd      	b.n	80043e2 <_printf_i+0x126>
 8004466:	6833      	ldr	r3, [r6, #0]
 8004468:	6825      	ldr	r5, [r4, #0]
 800446a:	6961      	ldr	r1, [r4, #20]
 800446c:	1d18      	adds	r0, r3, #4
 800446e:	6030      	str	r0, [r6, #0]
 8004470:	062e      	lsls	r6, r5, #24
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	d501      	bpl.n	800447a <_printf_i+0x1be>
 8004476:	6019      	str	r1, [r3, #0]
 8004478:	e002      	b.n	8004480 <_printf_i+0x1c4>
 800447a:	0668      	lsls	r0, r5, #25
 800447c:	d5fb      	bpl.n	8004476 <_printf_i+0x1ba>
 800447e:	8019      	strh	r1, [r3, #0]
 8004480:	2300      	movs	r3, #0
 8004482:	6123      	str	r3, [r4, #16]
 8004484:	4616      	mov	r6, r2
 8004486:	e7bc      	b.n	8004402 <_printf_i+0x146>
 8004488:	6833      	ldr	r3, [r6, #0]
 800448a:	1d1a      	adds	r2, r3, #4
 800448c:	6032      	str	r2, [r6, #0]
 800448e:	681e      	ldr	r6, [r3, #0]
 8004490:	6862      	ldr	r2, [r4, #4]
 8004492:	2100      	movs	r1, #0
 8004494:	4630      	mov	r0, r6
 8004496:	f7fb fec3 	bl	8000220 <memchr>
 800449a:	b108      	cbz	r0, 80044a0 <_printf_i+0x1e4>
 800449c:	1b80      	subs	r0, r0, r6
 800449e:	6060      	str	r0, [r4, #4]
 80044a0:	6863      	ldr	r3, [r4, #4]
 80044a2:	6123      	str	r3, [r4, #16]
 80044a4:	2300      	movs	r3, #0
 80044a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044aa:	e7aa      	b.n	8004402 <_printf_i+0x146>
 80044ac:	6923      	ldr	r3, [r4, #16]
 80044ae:	4632      	mov	r2, r6
 80044b0:	4649      	mov	r1, r9
 80044b2:	4640      	mov	r0, r8
 80044b4:	47d0      	blx	sl
 80044b6:	3001      	adds	r0, #1
 80044b8:	d0ad      	beq.n	8004416 <_printf_i+0x15a>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	079b      	lsls	r3, r3, #30
 80044be:	d413      	bmi.n	80044e8 <_printf_i+0x22c>
 80044c0:	68e0      	ldr	r0, [r4, #12]
 80044c2:	9b03      	ldr	r3, [sp, #12]
 80044c4:	4298      	cmp	r0, r3
 80044c6:	bfb8      	it	lt
 80044c8:	4618      	movlt	r0, r3
 80044ca:	e7a6      	b.n	800441a <_printf_i+0x15e>
 80044cc:	2301      	movs	r3, #1
 80044ce:	4632      	mov	r2, r6
 80044d0:	4649      	mov	r1, r9
 80044d2:	4640      	mov	r0, r8
 80044d4:	47d0      	blx	sl
 80044d6:	3001      	adds	r0, #1
 80044d8:	d09d      	beq.n	8004416 <_printf_i+0x15a>
 80044da:	3501      	adds	r5, #1
 80044dc:	68e3      	ldr	r3, [r4, #12]
 80044de:	9903      	ldr	r1, [sp, #12]
 80044e0:	1a5b      	subs	r3, r3, r1
 80044e2:	42ab      	cmp	r3, r5
 80044e4:	dcf2      	bgt.n	80044cc <_printf_i+0x210>
 80044e6:	e7eb      	b.n	80044c0 <_printf_i+0x204>
 80044e8:	2500      	movs	r5, #0
 80044ea:	f104 0619 	add.w	r6, r4, #25
 80044ee:	e7f5      	b.n	80044dc <_printf_i+0x220>
 80044f0:	08004d84 	.word	0x08004d84
 80044f4:	08004d95 	.word	0x08004d95

080044f8 <__sflush_r>:
 80044f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004500:	0716      	lsls	r6, r2, #28
 8004502:	4605      	mov	r5, r0
 8004504:	460c      	mov	r4, r1
 8004506:	d454      	bmi.n	80045b2 <__sflush_r+0xba>
 8004508:	684b      	ldr	r3, [r1, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	dc02      	bgt.n	8004514 <__sflush_r+0x1c>
 800450e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	dd48      	ble.n	80045a6 <__sflush_r+0xae>
 8004514:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004516:	2e00      	cmp	r6, #0
 8004518:	d045      	beq.n	80045a6 <__sflush_r+0xae>
 800451a:	2300      	movs	r3, #0
 800451c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004520:	682f      	ldr	r7, [r5, #0]
 8004522:	6a21      	ldr	r1, [r4, #32]
 8004524:	602b      	str	r3, [r5, #0]
 8004526:	d030      	beq.n	800458a <__sflush_r+0x92>
 8004528:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	0759      	lsls	r1, r3, #29
 800452e:	d505      	bpl.n	800453c <__sflush_r+0x44>
 8004530:	6863      	ldr	r3, [r4, #4]
 8004532:	1ad2      	subs	r2, r2, r3
 8004534:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004536:	b10b      	cbz	r3, 800453c <__sflush_r+0x44>
 8004538:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800453a:	1ad2      	subs	r2, r2, r3
 800453c:	2300      	movs	r3, #0
 800453e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004540:	6a21      	ldr	r1, [r4, #32]
 8004542:	4628      	mov	r0, r5
 8004544:	47b0      	blx	r6
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	d106      	bne.n	800455a <__sflush_r+0x62>
 800454c:	6829      	ldr	r1, [r5, #0]
 800454e:	291d      	cmp	r1, #29
 8004550:	d82b      	bhi.n	80045aa <__sflush_r+0xb2>
 8004552:	4a2a      	ldr	r2, [pc, #168]	@ (80045fc <__sflush_r+0x104>)
 8004554:	40ca      	lsrs	r2, r1
 8004556:	07d6      	lsls	r6, r2, #31
 8004558:	d527      	bpl.n	80045aa <__sflush_r+0xb2>
 800455a:	2200      	movs	r2, #0
 800455c:	6062      	str	r2, [r4, #4]
 800455e:	04d9      	lsls	r1, r3, #19
 8004560:	6922      	ldr	r2, [r4, #16]
 8004562:	6022      	str	r2, [r4, #0]
 8004564:	d504      	bpl.n	8004570 <__sflush_r+0x78>
 8004566:	1c42      	adds	r2, r0, #1
 8004568:	d101      	bne.n	800456e <__sflush_r+0x76>
 800456a:	682b      	ldr	r3, [r5, #0]
 800456c:	b903      	cbnz	r3, 8004570 <__sflush_r+0x78>
 800456e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004572:	602f      	str	r7, [r5, #0]
 8004574:	b1b9      	cbz	r1, 80045a6 <__sflush_r+0xae>
 8004576:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800457a:	4299      	cmp	r1, r3
 800457c:	d002      	beq.n	8004584 <__sflush_r+0x8c>
 800457e:	4628      	mov	r0, r5
 8004580:	f7ff fbd6 	bl	8003d30 <_free_r>
 8004584:	2300      	movs	r3, #0
 8004586:	6363      	str	r3, [r4, #52]	@ 0x34
 8004588:	e00d      	b.n	80045a6 <__sflush_r+0xae>
 800458a:	2301      	movs	r3, #1
 800458c:	4628      	mov	r0, r5
 800458e:	47b0      	blx	r6
 8004590:	4602      	mov	r2, r0
 8004592:	1c50      	adds	r0, r2, #1
 8004594:	d1c9      	bne.n	800452a <__sflush_r+0x32>
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0c6      	beq.n	800452a <__sflush_r+0x32>
 800459c:	2b1d      	cmp	r3, #29
 800459e:	d001      	beq.n	80045a4 <__sflush_r+0xac>
 80045a0:	2b16      	cmp	r3, #22
 80045a2:	d11e      	bne.n	80045e2 <__sflush_r+0xea>
 80045a4:	602f      	str	r7, [r5, #0]
 80045a6:	2000      	movs	r0, #0
 80045a8:	e022      	b.n	80045f0 <__sflush_r+0xf8>
 80045aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045ae:	b21b      	sxth	r3, r3
 80045b0:	e01b      	b.n	80045ea <__sflush_r+0xf2>
 80045b2:	690f      	ldr	r7, [r1, #16]
 80045b4:	2f00      	cmp	r7, #0
 80045b6:	d0f6      	beq.n	80045a6 <__sflush_r+0xae>
 80045b8:	0793      	lsls	r3, r2, #30
 80045ba:	680e      	ldr	r6, [r1, #0]
 80045bc:	bf08      	it	eq
 80045be:	694b      	ldreq	r3, [r1, #20]
 80045c0:	600f      	str	r7, [r1, #0]
 80045c2:	bf18      	it	ne
 80045c4:	2300      	movne	r3, #0
 80045c6:	eba6 0807 	sub.w	r8, r6, r7
 80045ca:	608b      	str	r3, [r1, #8]
 80045cc:	f1b8 0f00 	cmp.w	r8, #0
 80045d0:	dde9      	ble.n	80045a6 <__sflush_r+0xae>
 80045d2:	6a21      	ldr	r1, [r4, #32]
 80045d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80045d6:	4643      	mov	r3, r8
 80045d8:	463a      	mov	r2, r7
 80045da:	4628      	mov	r0, r5
 80045dc:	47b0      	blx	r6
 80045de:	2800      	cmp	r0, #0
 80045e0:	dc08      	bgt.n	80045f4 <__sflush_r+0xfc>
 80045e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045ea:	81a3      	strh	r3, [r4, #12]
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295
 80045f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f4:	4407      	add	r7, r0
 80045f6:	eba8 0800 	sub.w	r8, r8, r0
 80045fa:	e7e7      	b.n	80045cc <__sflush_r+0xd4>
 80045fc:	20400001 	.word	0x20400001

08004600 <_fflush_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	690b      	ldr	r3, [r1, #16]
 8004604:	4605      	mov	r5, r0
 8004606:	460c      	mov	r4, r1
 8004608:	b913      	cbnz	r3, 8004610 <_fflush_r+0x10>
 800460a:	2500      	movs	r5, #0
 800460c:	4628      	mov	r0, r5
 800460e:	bd38      	pop	{r3, r4, r5, pc}
 8004610:	b118      	cbz	r0, 800461a <_fflush_r+0x1a>
 8004612:	6a03      	ldr	r3, [r0, #32]
 8004614:	b90b      	cbnz	r3, 800461a <_fflush_r+0x1a>
 8004616:	f7ff fa47 	bl	8003aa8 <__sinit>
 800461a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f3      	beq.n	800460a <_fflush_r+0xa>
 8004622:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004624:	07d0      	lsls	r0, r2, #31
 8004626:	d404      	bmi.n	8004632 <_fflush_r+0x32>
 8004628:	0599      	lsls	r1, r3, #22
 800462a:	d402      	bmi.n	8004632 <_fflush_r+0x32>
 800462c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800462e:	f7ff fb50 	bl	8003cd2 <__retarget_lock_acquire_recursive>
 8004632:	4628      	mov	r0, r5
 8004634:	4621      	mov	r1, r4
 8004636:	f7ff ff5f 	bl	80044f8 <__sflush_r>
 800463a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800463c:	07da      	lsls	r2, r3, #31
 800463e:	4605      	mov	r5, r0
 8004640:	d4e4      	bmi.n	800460c <_fflush_r+0xc>
 8004642:	89a3      	ldrh	r3, [r4, #12]
 8004644:	059b      	lsls	r3, r3, #22
 8004646:	d4e1      	bmi.n	800460c <_fflush_r+0xc>
 8004648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800464a:	f7ff fb43 	bl	8003cd4 <__retarget_lock_release_recursive>
 800464e:	e7dd      	b.n	800460c <_fflush_r+0xc>

08004650 <fiprintf>:
 8004650:	b40e      	push	{r1, r2, r3}
 8004652:	b503      	push	{r0, r1, lr}
 8004654:	4601      	mov	r1, r0
 8004656:	ab03      	add	r3, sp, #12
 8004658:	4805      	ldr	r0, [pc, #20]	@ (8004670 <fiprintf+0x20>)
 800465a:	f853 2b04 	ldr.w	r2, [r3], #4
 800465e:	6800      	ldr	r0, [r0, #0]
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	f000 f88f 	bl	8004784 <_vfiprintf_r>
 8004666:	b002      	add	sp, #8
 8004668:	f85d eb04 	ldr.w	lr, [sp], #4
 800466c:	b003      	add	sp, #12
 800466e:	4770      	bx	lr
 8004670:	20004020 	.word	0x20004020

08004674 <memmove>:
 8004674:	4288      	cmp	r0, r1
 8004676:	b510      	push	{r4, lr}
 8004678:	eb01 0402 	add.w	r4, r1, r2
 800467c:	d902      	bls.n	8004684 <memmove+0x10>
 800467e:	4284      	cmp	r4, r0
 8004680:	4623      	mov	r3, r4
 8004682:	d807      	bhi.n	8004694 <memmove+0x20>
 8004684:	1e43      	subs	r3, r0, #1
 8004686:	42a1      	cmp	r1, r4
 8004688:	d008      	beq.n	800469c <memmove+0x28>
 800468a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800468e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004692:	e7f8      	b.n	8004686 <memmove+0x12>
 8004694:	4402      	add	r2, r0
 8004696:	4601      	mov	r1, r0
 8004698:	428a      	cmp	r2, r1
 800469a:	d100      	bne.n	800469e <memmove+0x2a>
 800469c:	bd10      	pop	{r4, pc}
 800469e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046a6:	e7f7      	b.n	8004698 <memmove+0x24>

080046a8 <_sbrk_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4d06      	ldr	r5, [pc, #24]	@ (80046c4 <_sbrk_r+0x1c>)
 80046ac:	2300      	movs	r3, #0
 80046ae:	4604      	mov	r4, r0
 80046b0:	4608      	mov	r0, r1
 80046b2:	602b      	str	r3, [r5, #0]
 80046b4:	f7fc fbaa 	bl	8000e0c <_sbrk>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d102      	bne.n	80046c2 <_sbrk_r+0x1a>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	b103      	cbz	r3, 80046c2 <_sbrk_r+0x1a>
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	20008340 	.word	0x20008340

080046c8 <abort>:
 80046c8:	b508      	push	{r3, lr}
 80046ca:	2006      	movs	r0, #6
 80046cc:	f000 fa2e 	bl	8004b2c <raise>
 80046d0:	2001      	movs	r0, #1
 80046d2:	f7fc fb22 	bl	8000d1a <_exit>

080046d6 <_realloc_r>:
 80046d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046da:	4607      	mov	r7, r0
 80046dc:	4614      	mov	r4, r2
 80046de:	460d      	mov	r5, r1
 80046e0:	b921      	cbnz	r1, 80046ec <_realloc_r+0x16>
 80046e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046e6:	4611      	mov	r1, r2
 80046e8:	f7ff bb96 	b.w	8003e18 <_malloc_r>
 80046ec:	b92a      	cbnz	r2, 80046fa <_realloc_r+0x24>
 80046ee:	f7ff fb1f 	bl	8003d30 <_free_r>
 80046f2:	4625      	mov	r5, r4
 80046f4:	4628      	mov	r0, r5
 80046f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046fa:	f000 fa33 	bl	8004b64 <_malloc_usable_size_r>
 80046fe:	4284      	cmp	r4, r0
 8004700:	4606      	mov	r6, r0
 8004702:	d802      	bhi.n	800470a <_realloc_r+0x34>
 8004704:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004708:	d8f4      	bhi.n	80046f4 <_realloc_r+0x1e>
 800470a:	4621      	mov	r1, r4
 800470c:	4638      	mov	r0, r7
 800470e:	f7ff fb83 	bl	8003e18 <_malloc_r>
 8004712:	4680      	mov	r8, r0
 8004714:	b908      	cbnz	r0, 800471a <_realloc_r+0x44>
 8004716:	4645      	mov	r5, r8
 8004718:	e7ec      	b.n	80046f4 <_realloc_r+0x1e>
 800471a:	42b4      	cmp	r4, r6
 800471c:	4622      	mov	r2, r4
 800471e:	4629      	mov	r1, r5
 8004720:	bf28      	it	cs
 8004722:	4632      	movcs	r2, r6
 8004724:	f7ff fad7 	bl	8003cd6 <memcpy>
 8004728:	4629      	mov	r1, r5
 800472a:	4638      	mov	r0, r7
 800472c:	f7ff fb00 	bl	8003d30 <_free_r>
 8004730:	e7f1      	b.n	8004716 <_realloc_r+0x40>

08004732 <__sfputc_r>:
 8004732:	6893      	ldr	r3, [r2, #8]
 8004734:	3b01      	subs	r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	b410      	push	{r4}
 800473a:	6093      	str	r3, [r2, #8]
 800473c:	da08      	bge.n	8004750 <__sfputc_r+0x1e>
 800473e:	6994      	ldr	r4, [r2, #24]
 8004740:	42a3      	cmp	r3, r4
 8004742:	db01      	blt.n	8004748 <__sfputc_r+0x16>
 8004744:	290a      	cmp	r1, #10
 8004746:	d103      	bne.n	8004750 <__sfputc_r+0x1e>
 8004748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800474c:	f000 b932 	b.w	80049b4 <__swbuf_r>
 8004750:	6813      	ldr	r3, [r2, #0]
 8004752:	1c58      	adds	r0, r3, #1
 8004754:	6010      	str	r0, [r2, #0]
 8004756:	7019      	strb	r1, [r3, #0]
 8004758:	4608      	mov	r0, r1
 800475a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800475e:	4770      	bx	lr

08004760 <__sfputs_r>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	4606      	mov	r6, r0
 8004764:	460f      	mov	r7, r1
 8004766:	4614      	mov	r4, r2
 8004768:	18d5      	adds	r5, r2, r3
 800476a:	42ac      	cmp	r4, r5
 800476c:	d101      	bne.n	8004772 <__sfputs_r+0x12>
 800476e:	2000      	movs	r0, #0
 8004770:	e007      	b.n	8004782 <__sfputs_r+0x22>
 8004772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004776:	463a      	mov	r2, r7
 8004778:	4630      	mov	r0, r6
 800477a:	f7ff ffda 	bl	8004732 <__sfputc_r>
 800477e:	1c43      	adds	r3, r0, #1
 8004780:	d1f3      	bne.n	800476a <__sfputs_r+0xa>
 8004782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004784 <_vfiprintf_r>:
 8004784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004788:	460d      	mov	r5, r1
 800478a:	b09d      	sub	sp, #116	@ 0x74
 800478c:	4614      	mov	r4, r2
 800478e:	4698      	mov	r8, r3
 8004790:	4606      	mov	r6, r0
 8004792:	b118      	cbz	r0, 800479c <_vfiprintf_r+0x18>
 8004794:	6a03      	ldr	r3, [r0, #32]
 8004796:	b90b      	cbnz	r3, 800479c <_vfiprintf_r+0x18>
 8004798:	f7ff f986 	bl	8003aa8 <__sinit>
 800479c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800479e:	07d9      	lsls	r1, r3, #31
 80047a0:	d405      	bmi.n	80047ae <_vfiprintf_r+0x2a>
 80047a2:	89ab      	ldrh	r3, [r5, #12]
 80047a4:	059a      	lsls	r2, r3, #22
 80047a6:	d402      	bmi.n	80047ae <_vfiprintf_r+0x2a>
 80047a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047aa:	f7ff fa92 	bl	8003cd2 <__retarget_lock_acquire_recursive>
 80047ae:	89ab      	ldrh	r3, [r5, #12]
 80047b0:	071b      	lsls	r3, r3, #28
 80047b2:	d501      	bpl.n	80047b8 <_vfiprintf_r+0x34>
 80047b4:	692b      	ldr	r3, [r5, #16]
 80047b6:	b99b      	cbnz	r3, 80047e0 <_vfiprintf_r+0x5c>
 80047b8:	4629      	mov	r1, r5
 80047ba:	4630      	mov	r0, r6
 80047bc:	f000 f938 	bl	8004a30 <__swsetup_r>
 80047c0:	b170      	cbz	r0, 80047e0 <_vfiprintf_r+0x5c>
 80047c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047c4:	07dc      	lsls	r4, r3, #31
 80047c6:	d504      	bpl.n	80047d2 <_vfiprintf_r+0x4e>
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295
 80047cc:	b01d      	add	sp, #116	@ 0x74
 80047ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d2:	89ab      	ldrh	r3, [r5, #12]
 80047d4:	0598      	lsls	r0, r3, #22
 80047d6:	d4f7      	bmi.n	80047c8 <_vfiprintf_r+0x44>
 80047d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047da:	f7ff fa7b 	bl	8003cd4 <__retarget_lock_release_recursive>
 80047de:	e7f3      	b.n	80047c8 <_vfiprintf_r+0x44>
 80047e0:	2300      	movs	r3, #0
 80047e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80047e4:	2320      	movs	r3, #32
 80047e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80047ee:	2330      	movs	r3, #48	@ 0x30
 80047f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80049a0 <_vfiprintf_r+0x21c>
 80047f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047f8:	f04f 0901 	mov.w	r9, #1
 80047fc:	4623      	mov	r3, r4
 80047fe:	469a      	mov	sl, r3
 8004800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004804:	b10a      	cbz	r2, 800480a <_vfiprintf_r+0x86>
 8004806:	2a25      	cmp	r2, #37	@ 0x25
 8004808:	d1f9      	bne.n	80047fe <_vfiprintf_r+0x7a>
 800480a:	ebba 0b04 	subs.w	fp, sl, r4
 800480e:	d00b      	beq.n	8004828 <_vfiprintf_r+0xa4>
 8004810:	465b      	mov	r3, fp
 8004812:	4622      	mov	r2, r4
 8004814:	4629      	mov	r1, r5
 8004816:	4630      	mov	r0, r6
 8004818:	f7ff ffa2 	bl	8004760 <__sfputs_r>
 800481c:	3001      	adds	r0, #1
 800481e:	f000 80a7 	beq.w	8004970 <_vfiprintf_r+0x1ec>
 8004822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004824:	445a      	add	r2, fp
 8004826:	9209      	str	r2, [sp, #36]	@ 0x24
 8004828:	f89a 3000 	ldrb.w	r3, [sl]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 809f 	beq.w	8004970 <_vfiprintf_r+0x1ec>
 8004832:	2300      	movs	r3, #0
 8004834:	f04f 32ff 	mov.w	r2, #4294967295
 8004838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800483c:	f10a 0a01 	add.w	sl, sl, #1
 8004840:	9304      	str	r3, [sp, #16]
 8004842:	9307      	str	r3, [sp, #28]
 8004844:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004848:	931a      	str	r3, [sp, #104]	@ 0x68
 800484a:	4654      	mov	r4, sl
 800484c:	2205      	movs	r2, #5
 800484e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004852:	4853      	ldr	r0, [pc, #332]	@ (80049a0 <_vfiprintf_r+0x21c>)
 8004854:	f7fb fce4 	bl	8000220 <memchr>
 8004858:	9a04      	ldr	r2, [sp, #16]
 800485a:	b9d8      	cbnz	r0, 8004894 <_vfiprintf_r+0x110>
 800485c:	06d1      	lsls	r1, r2, #27
 800485e:	bf44      	itt	mi
 8004860:	2320      	movmi	r3, #32
 8004862:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004866:	0713      	lsls	r3, r2, #28
 8004868:	bf44      	itt	mi
 800486a:	232b      	movmi	r3, #43	@ 0x2b
 800486c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004870:	f89a 3000 	ldrb.w	r3, [sl]
 8004874:	2b2a      	cmp	r3, #42	@ 0x2a
 8004876:	d015      	beq.n	80048a4 <_vfiprintf_r+0x120>
 8004878:	9a07      	ldr	r2, [sp, #28]
 800487a:	4654      	mov	r4, sl
 800487c:	2000      	movs	r0, #0
 800487e:	f04f 0c0a 	mov.w	ip, #10
 8004882:	4621      	mov	r1, r4
 8004884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004888:	3b30      	subs	r3, #48	@ 0x30
 800488a:	2b09      	cmp	r3, #9
 800488c:	d94b      	bls.n	8004926 <_vfiprintf_r+0x1a2>
 800488e:	b1b0      	cbz	r0, 80048be <_vfiprintf_r+0x13a>
 8004890:	9207      	str	r2, [sp, #28]
 8004892:	e014      	b.n	80048be <_vfiprintf_r+0x13a>
 8004894:	eba0 0308 	sub.w	r3, r0, r8
 8004898:	fa09 f303 	lsl.w	r3, r9, r3
 800489c:	4313      	orrs	r3, r2
 800489e:	9304      	str	r3, [sp, #16]
 80048a0:	46a2      	mov	sl, r4
 80048a2:	e7d2      	b.n	800484a <_vfiprintf_r+0xc6>
 80048a4:	9b03      	ldr	r3, [sp, #12]
 80048a6:	1d19      	adds	r1, r3, #4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	9103      	str	r1, [sp, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bfbb      	ittet	lt
 80048b0:	425b      	neglt	r3, r3
 80048b2:	f042 0202 	orrlt.w	r2, r2, #2
 80048b6:	9307      	strge	r3, [sp, #28]
 80048b8:	9307      	strlt	r3, [sp, #28]
 80048ba:	bfb8      	it	lt
 80048bc:	9204      	strlt	r2, [sp, #16]
 80048be:	7823      	ldrb	r3, [r4, #0]
 80048c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80048c2:	d10a      	bne.n	80048da <_vfiprintf_r+0x156>
 80048c4:	7863      	ldrb	r3, [r4, #1]
 80048c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80048c8:	d132      	bne.n	8004930 <_vfiprintf_r+0x1ac>
 80048ca:	9b03      	ldr	r3, [sp, #12]
 80048cc:	1d1a      	adds	r2, r3, #4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	9203      	str	r2, [sp, #12]
 80048d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048d6:	3402      	adds	r4, #2
 80048d8:	9305      	str	r3, [sp, #20]
 80048da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80049b0 <_vfiprintf_r+0x22c>
 80048de:	7821      	ldrb	r1, [r4, #0]
 80048e0:	2203      	movs	r2, #3
 80048e2:	4650      	mov	r0, sl
 80048e4:	f7fb fc9c 	bl	8000220 <memchr>
 80048e8:	b138      	cbz	r0, 80048fa <_vfiprintf_r+0x176>
 80048ea:	9b04      	ldr	r3, [sp, #16]
 80048ec:	eba0 000a 	sub.w	r0, r0, sl
 80048f0:	2240      	movs	r2, #64	@ 0x40
 80048f2:	4082      	lsls	r2, r0
 80048f4:	4313      	orrs	r3, r2
 80048f6:	3401      	adds	r4, #1
 80048f8:	9304      	str	r3, [sp, #16]
 80048fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048fe:	4829      	ldr	r0, [pc, #164]	@ (80049a4 <_vfiprintf_r+0x220>)
 8004900:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004904:	2206      	movs	r2, #6
 8004906:	f7fb fc8b 	bl	8000220 <memchr>
 800490a:	2800      	cmp	r0, #0
 800490c:	d03f      	beq.n	800498e <_vfiprintf_r+0x20a>
 800490e:	4b26      	ldr	r3, [pc, #152]	@ (80049a8 <_vfiprintf_r+0x224>)
 8004910:	bb1b      	cbnz	r3, 800495a <_vfiprintf_r+0x1d6>
 8004912:	9b03      	ldr	r3, [sp, #12]
 8004914:	3307      	adds	r3, #7
 8004916:	f023 0307 	bic.w	r3, r3, #7
 800491a:	3308      	adds	r3, #8
 800491c:	9303      	str	r3, [sp, #12]
 800491e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004920:	443b      	add	r3, r7
 8004922:	9309      	str	r3, [sp, #36]	@ 0x24
 8004924:	e76a      	b.n	80047fc <_vfiprintf_r+0x78>
 8004926:	fb0c 3202 	mla	r2, ip, r2, r3
 800492a:	460c      	mov	r4, r1
 800492c:	2001      	movs	r0, #1
 800492e:	e7a8      	b.n	8004882 <_vfiprintf_r+0xfe>
 8004930:	2300      	movs	r3, #0
 8004932:	3401      	adds	r4, #1
 8004934:	9305      	str	r3, [sp, #20]
 8004936:	4619      	mov	r1, r3
 8004938:	f04f 0c0a 	mov.w	ip, #10
 800493c:	4620      	mov	r0, r4
 800493e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004942:	3a30      	subs	r2, #48	@ 0x30
 8004944:	2a09      	cmp	r2, #9
 8004946:	d903      	bls.n	8004950 <_vfiprintf_r+0x1cc>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0c6      	beq.n	80048da <_vfiprintf_r+0x156>
 800494c:	9105      	str	r1, [sp, #20]
 800494e:	e7c4      	b.n	80048da <_vfiprintf_r+0x156>
 8004950:	fb0c 2101 	mla	r1, ip, r1, r2
 8004954:	4604      	mov	r4, r0
 8004956:	2301      	movs	r3, #1
 8004958:	e7f0      	b.n	800493c <_vfiprintf_r+0x1b8>
 800495a:	ab03      	add	r3, sp, #12
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	462a      	mov	r2, r5
 8004960:	4b12      	ldr	r3, [pc, #72]	@ (80049ac <_vfiprintf_r+0x228>)
 8004962:	a904      	add	r1, sp, #16
 8004964:	4630      	mov	r0, r6
 8004966:	f3af 8000 	nop.w
 800496a:	4607      	mov	r7, r0
 800496c:	1c78      	adds	r0, r7, #1
 800496e:	d1d6      	bne.n	800491e <_vfiprintf_r+0x19a>
 8004970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004972:	07d9      	lsls	r1, r3, #31
 8004974:	d405      	bmi.n	8004982 <_vfiprintf_r+0x1fe>
 8004976:	89ab      	ldrh	r3, [r5, #12]
 8004978:	059a      	lsls	r2, r3, #22
 800497a:	d402      	bmi.n	8004982 <_vfiprintf_r+0x1fe>
 800497c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800497e:	f7ff f9a9 	bl	8003cd4 <__retarget_lock_release_recursive>
 8004982:	89ab      	ldrh	r3, [r5, #12]
 8004984:	065b      	lsls	r3, r3, #25
 8004986:	f53f af1f 	bmi.w	80047c8 <_vfiprintf_r+0x44>
 800498a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800498c:	e71e      	b.n	80047cc <_vfiprintf_r+0x48>
 800498e:	ab03      	add	r3, sp, #12
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	462a      	mov	r2, r5
 8004994:	4b05      	ldr	r3, [pc, #20]	@ (80049ac <_vfiprintf_r+0x228>)
 8004996:	a904      	add	r1, sp, #16
 8004998:	4630      	mov	r0, r6
 800499a:	f7ff fc8f 	bl	80042bc <_printf_i>
 800499e:	e7e4      	b.n	800496a <_vfiprintf_r+0x1e6>
 80049a0:	08004d73 	.word	0x08004d73
 80049a4:	08004d7d 	.word	0x08004d7d
 80049a8:	00000000 	.word	0x00000000
 80049ac:	08004761 	.word	0x08004761
 80049b0:	08004d79 	.word	0x08004d79

080049b4 <__swbuf_r>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	460e      	mov	r6, r1
 80049b8:	4614      	mov	r4, r2
 80049ba:	4605      	mov	r5, r0
 80049bc:	b118      	cbz	r0, 80049c6 <__swbuf_r+0x12>
 80049be:	6a03      	ldr	r3, [r0, #32]
 80049c0:	b90b      	cbnz	r3, 80049c6 <__swbuf_r+0x12>
 80049c2:	f7ff f871 	bl	8003aa8 <__sinit>
 80049c6:	69a3      	ldr	r3, [r4, #24]
 80049c8:	60a3      	str	r3, [r4, #8]
 80049ca:	89a3      	ldrh	r3, [r4, #12]
 80049cc:	071a      	lsls	r2, r3, #28
 80049ce:	d501      	bpl.n	80049d4 <__swbuf_r+0x20>
 80049d0:	6923      	ldr	r3, [r4, #16]
 80049d2:	b943      	cbnz	r3, 80049e6 <__swbuf_r+0x32>
 80049d4:	4621      	mov	r1, r4
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 f82a 	bl	8004a30 <__swsetup_r>
 80049dc:	b118      	cbz	r0, 80049e6 <__swbuf_r+0x32>
 80049de:	f04f 37ff 	mov.w	r7, #4294967295
 80049e2:	4638      	mov	r0, r7
 80049e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	6922      	ldr	r2, [r4, #16]
 80049ea:	1a98      	subs	r0, r3, r2
 80049ec:	6963      	ldr	r3, [r4, #20]
 80049ee:	b2f6      	uxtb	r6, r6
 80049f0:	4283      	cmp	r3, r0
 80049f2:	4637      	mov	r7, r6
 80049f4:	dc05      	bgt.n	8004a02 <__swbuf_r+0x4e>
 80049f6:	4621      	mov	r1, r4
 80049f8:	4628      	mov	r0, r5
 80049fa:	f7ff fe01 	bl	8004600 <_fflush_r>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d1ed      	bne.n	80049de <__swbuf_r+0x2a>
 8004a02:	68a3      	ldr	r3, [r4, #8]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	60a3      	str	r3, [r4, #8]
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	6022      	str	r2, [r4, #0]
 8004a0e:	701e      	strb	r6, [r3, #0]
 8004a10:	6962      	ldr	r2, [r4, #20]
 8004a12:	1c43      	adds	r3, r0, #1
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d004      	beq.n	8004a22 <__swbuf_r+0x6e>
 8004a18:	89a3      	ldrh	r3, [r4, #12]
 8004a1a:	07db      	lsls	r3, r3, #31
 8004a1c:	d5e1      	bpl.n	80049e2 <__swbuf_r+0x2e>
 8004a1e:	2e0a      	cmp	r6, #10
 8004a20:	d1df      	bne.n	80049e2 <__swbuf_r+0x2e>
 8004a22:	4621      	mov	r1, r4
 8004a24:	4628      	mov	r0, r5
 8004a26:	f7ff fdeb 	bl	8004600 <_fflush_r>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d0d9      	beq.n	80049e2 <__swbuf_r+0x2e>
 8004a2e:	e7d6      	b.n	80049de <__swbuf_r+0x2a>

08004a30 <__swsetup_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4b29      	ldr	r3, [pc, #164]	@ (8004ad8 <__swsetup_r+0xa8>)
 8004a34:	4605      	mov	r5, r0
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	460c      	mov	r4, r1
 8004a3a:	b118      	cbz	r0, 8004a44 <__swsetup_r+0x14>
 8004a3c:	6a03      	ldr	r3, [r0, #32]
 8004a3e:	b90b      	cbnz	r3, 8004a44 <__swsetup_r+0x14>
 8004a40:	f7ff f832 	bl	8003aa8 <__sinit>
 8004a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a48:	0719      	lsls	r1, r3, #28
 8004a4a:	d422      	bmi.n	8004a92 <__swsetup_r+0x62>
 8004a4c:	06da      	lsls	r2, r3, #27
 8004a4e:	d407      	bmi.n	8004a60 <__swsetup_r+0x30>
 8004a50:	2209      	movs	r2, #9
 8004a52:	602a      	str	r2, [r5, #0]
 8004a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a58:	81a3      	strh	r3, [r4, #12]
 8004a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5e:	e033      	b.n	8004ac8 <__swsetup_r+0x98>
 8004a60:	0758      	lsls	r0, r3, #29
 8004a62:	d512      	bpl.n	8004a8a <__swsetup_r+0x5a>
 8004a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a66:	b141      	cbz	r1, 8004a7a <__swsetup_r+0x4a>
 8004a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a6c:	4299      	cmp	r1, r3
 8004a6e:	d002      	beq.n	8004a76 <__swsetup_r+0x46>
 8004a70:	4628      	mov	r0, r5
 8004a72:	f7ff f95d 	bl	8003d30 <_free_r>
 8004a76:	2300      	movs	r3, #0
 8004a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	2300      	movs	r3, #0
 8004a84:	6063      	str	r3, [r4, #4]
 8004a86:	6923      	ldr	r3, [r4, #16]
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	f043 0308 	orr.w	r3, r3, #8
 8004a90:	81a3      	strh	r3, [r4, #12]
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	b94b      	cbnz	r3, 8004aaa <__swsetup_r+0x7a>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aa0:	d003      	beq.n	8004aaa <__swsetup_r+0x7a>
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f000 f88b 	bl	8004bc0 <__smakebuf_r>
 8004aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aae:	f013 0201 	ands.w	r2, r3, #1
 8004ab2:	d00a      	beq.n	8004aca <__swsetup_r+0x9a>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	60a2      	str	r2, [r4, #8]
 8004ab8:	6962      	ldr	r2, [r4, #20]
 8004aba:	4252      	negs	r2, r2
 8004abc:	61a2      	str	r2, [r4, #24]
 8004abe:	6922      	ldr	r2, [r4, #16]
 8004ac0:	b942      	cbnz	r2, 8004ad4 <__swsetup_r+0xa4>
 8004ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ac6:	d1c5      	bne.n	8004a54 <__swsetup_r+0x24>
 8004ac8:	bd38      	pop	{r3, r4, r5, pc}
 8004aca:	0799      	lsls	r1, r3, #30
 8004acc:	bf58      	it	pl
 8004ace:	6962      	ldrpl	r2, [r4, #20]
 8004ad0:	60a2      	str	r2, [r4, #8]
 8004ad2:	e7f4      	b.n	8004abe <__swsetup_r+0x8e>
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	e7f7      	b.n	8004ac8 <__swsetup_r+0x98>
 8004ad8:	20004020 	.word	0x20004020

08004adc <_raise_r>:
 8004adc:	291f      	cmp	r1, #31
 8004ade:	b538      	push	{r3, r4, r5, lr}
 8004ae0:	4605      	mov	r5, r0
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	d904      	bls.n	8004af0 <_raise_r+0x14>
 8004ae6:	2316      	movs	r3, #22
 8004ae8:	6003      	str	r3, [r0, #0]
 8004aea:	f04f 30ff 	mov.w	r0, #4294967295
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004af2:	b112      	cbz	r2, 8004afa <_raise_r+0x1e>
 8004af4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004af8:	b94b      	cbnz	r3, 8004b0e <_raise_r+0x32>
 8004afa:	4628      	mov	r0, r5
 8004afc:	f000 f830 	bl	8004b60 <_getpid_r>
 8004b00:	4622      	mov	r2, r4
 8004b02:	4601      	mov	r1, r0
 8004b04:	4628      	mov	r0, r5
 8004b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b0a:	f000 b817 	b.w	8004b3c <_kill_r>
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d00a      	beq.n	8004b28 <_raise_r+0x4c>
 8004b12:	1c59      	adds	r1, r3, #1
 8004b14:	d103      	bne.n	8004b1e <_raise_r+0x42>
 8004b16:	2316      	movs	r3, #22
 8004b18:	6003      	str	r3, [r0, #0]
 8004b1a:	2001      	movs	r0, #1
 8004b1c:	e7e7      	b.n	8004aee <_raise_r+0x12>
 8004b1e:	2100      	movs	r1, #0
 8004b20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004b24:	4620      	mov	r0, r4
 8004b26:	4798      	blx	r3
 8004b28:	2000      	movs	r0, #0
 8004b2a:	e7e0      	b.n	8004aee <_raise_r+0x12>

08004b2c <raise>:
 8004b2c:	4b02      	ldr	r3, [pc, #8]	@ (8004b38 <raise+0xc>)
 8004b2e:	4601      	mov	r1, r0
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	f7ff bfd3 	b.w	8004adc <_raise_r>
 8004b36:	bf00      	nop
 8004b38:	20004020 	.word	0x20004020

08004b3c <_kill_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4d07      	ldr	r5, [pc, #28]	@ (8004b5c <_kill_r+0x20>)
 8004b40:	2300      	movs	r3, #0
 8004b42:	4604      	mov	r4, r0
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	602b      	str	r3, [r5, #0]
 8004b4a:	f7fc f8d6 	bl	8000cfa <_kill>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	d102      	bne.n	8004b58 <_kill_r+0x1c>
 8004b52:	682b      	ldr	r3, [r5, #0]
 8004b54:	b103      	cbz	r3, 8004b58 <_kill_r+0x1c>
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	bd38      	pop	{r3, r4, r5, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20008340 	.word	0x20008340

08004b60 <_getpid_r>:
 8004b60:	f7fc b8c3 	b.w	8000cea <_getpid>

08004b64 <_malloc_usable_size_r>:
 8004b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b68:	1f18      	subs	r0, r3, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bfbc      	itt	lt
 8004b6e:	580b      	ldrlt	r3, [r1, r0]
 8004b70:	18c0      	addlt	r0, r0, r3
 8004b72:	4770      	bx	lr

08004b74 <__swhatbuf_r>:
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	460c      	mov	r4, r1
 8004b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b7c:	2900      	cmp	r1, #0
 8004b7e:	b096      	sub	sp, #88	@ 0x58
 8004b80:	4615      	mov	r5, r2
 8004b82:	461e      	mov	r6, r3
 8004b84:	da0d      	bge.n	8004ba2 <__swhatbuf_r+0x2e>
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	bf14      	ite	ne
 8004b92:	2340      	movne	r3, #64	@ 0x40
 8004b94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b98:	2000      	movs	r0, #0
 8004b9a:	6031      	str	r1, [r6, #0]
 8004b9c:	602b      	str	r3, [r5, #0]
 8004b9e:	b016      	add	sp, #88	@ 0x58
 8004ba0:	bd70      	pop	{r4, r5, r6, pc}
 8004ba2:	466a      	mov	r2, sp
 8004ba4:	f000 f848 	bl	8004c38 <_fstat_r>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	dbec      	blt.n	8004b86 <__swhatbuf_r+0x12>
 8004bac:	9901      	ldr	r1, [sp, #4]
 8004bae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004bb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004bb6:	4259      	negs	r1, r3
 8004bb8:	4159      	adcs	r1, r3
 8004bba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bbe:	e7eb      	b.n	8004b98 <__swhatbuf_r+0x24>

08004bc0 <__smakebuf_r>:
 8004bc0:	898b      	ldrh	r3, [r1, #12]
 8004bc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bc4:	079d      	lsls	r5, r3, #30
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	460c      	mov	r4, r1
 8004bca:	d507      	bpl.n	8004bdc <__smakebuf_r+0x1c>
 8004bcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	6123      	str	r3, [r4, #16]
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	6163      	str	r3, [r4, #20]
 8004bd8:	b003      	add	sp, #12
 8004bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bdc:	ab01      	add	r3, sp, #4
 8004bde:	466a      	mov	r2, sp
 8004be0:	f7ff ffc8 	bl	8004b74 <__swhatbuf_r>
 8004be4:	9f00      	ldr	r7, [sp, #0]
 8004be6:	4605      	mov	r5, r0
 8004be8:	4639      	mov	r1, r7
 8004bea:	4630      	mov	r0, r6
 8004bec:	f7ff f914 	bl	8003e18 <_malloc_r>
 8004bf0:	b948      	cbnz	r0, 8004c06 <__smakebuf_r+0x46>
 8004bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bf6:	059a      	lsls	r2, r3, #22
 8004bf8:	d4ee      	bmi.n	8004bd8 <__smakebuf_r+0x18>
 8004bfa:	f023 0303 	bic.w	r3, r3, #3
 8004bfe:	f043 0302 	orr.w	r3, r3, #2
 8004c02:	81a3      	strh	r3, [r4, #12]
 8004c04:	e7e2      	b.n	8004bcc <__smakebuf_r+0xc>
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	6020      	str	r0, [r4, #0]
 8004c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	9b01      	ldr	r3, [sp, #4]
 8004c12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c16:	b15b      	cbz	r3, 8004c30 <__smakebuf_r+0x70>
 8004c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f000 f81d 	bl	8004c5c <_isatty_r>
 8004c22:	b128      	cbz	r0, 8004c30 <__smakebuf_r+0x70>
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	f023 0303 	bic.w	r3, r3, #3
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	81a3      	strh	r3, [r4, #12]
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	431d      	orrs	r5, r3
 8004c34:	81a5      	strh	r5, [r4, #12]
 8004c36:	e7cf      	b.n	8004bd8 <__smakebuf_r+0x18>

08004c38 <_fstat_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4d07      	ldr	r5, [pc, #28]	@ (8004c58 <_fstat_r+0x20>)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	602b      	str	r3, [r5, #0]
 8004c46:	f7fc f8b8 	bl	8000dba <_fstat>
 8004c4a:	1c43      	adds	r3, r0, #1
 8004c4c:	d102      	bne.n	8004c54 <_fstat_r+0x1c>
 8004c4e:	682b      	ldr	r3, [r5, #0]
 8004c50:	b103      	cbz	r3, 8004c54 <_fstat_r+0x1c>
 8004c52:	6023      	str	r3, [r4, #0]
 8004c54:	bd38      	pop	{r3, r4, r5, pc}
 8004c56:	bf00      	nop
 8004c58:	20008340 	.word	0x20008340

08004c5c <_isatty_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4d06      	ldr	r5, [pc, #24]	@ (8004c78 <_isatty_r+0x1c>)
 8004c60:	2300      	movs	r3, #0
 8004c62:	4604      	mov	r4, r0
 8004c64:	4608      	mov	r0, r1
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	f7fc f8b7 	bl	8000dda <_isatty>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d102      	bne.n	8004c76 <_isatty_r+0x1a>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	b103      	cbz	r3, 8004c76 <_isatty_r+0x1a>
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	20008340 	.word	0x20008340

08004c7c <_init>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr

08004c88 <_fini>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr
