
SPI_FullDuplex_ComDMA_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d24  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004f04  08004f04  00005f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005018  08005018  00007270  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005018  08005018  00006018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005020  08005020  00007270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005020  08005020  00006020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005024  08005024  00006024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  08005028  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000270  08005298  00007270  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  08005298  00007750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007270  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000b126  00000000  00000000  000072a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000083  00000000  00000000  000123c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00009b7f  00000000  00000000  00012449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001db4  00000000  00000000  0001bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009c8  00000000  00000000  0001dd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ed24c  00000000  00000000  0001e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000747  00000000  00000000  0010b994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00025f4e  00000000  00000000  0010c0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132029  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003158  00000000  00000000  0013206c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000270 	.word	0x20000270
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004eec 	.word	0x08004eec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000274 	.word	0x20000274
 800021c:	08004eec 	.word	0x08004eec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c0:	480d      	ldr	r0, [pc, #52]	@ (80002f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480d      	ldr	r0, [pc, #52]	@ (80002fc <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490e      	ldr	r1, [pc, #56]	@ (8000300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000304 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	@ (8000308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0b      	ldr	r4, [pc, #44]	@ (800030c <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002ea:	f000 fdc9 	bl	8000e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ee:	f003 fe03 	bl	8003ef8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002f2:	f000 f981 	bl	80005f8 <main>

080002f6 <LoopForever>:

LoopForever:
    b LoopForever
 80002f6:	e7fe      	b.n	80002f6 <LoopForever>
  ldr   r0, =_estack
 80002f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8000304:	08005028 	.word	0x08005028
  ldr r2, =_sbss
 8000308:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 800030c:	20000750 	.word	0x20000750

08000310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC1_2_IRQHandler>

08000312 <cal_crc>:

#define SPI1_Process_DBG_PIN                  GPIO_PIN_1
#define SPI1_Process_DBG_PORT                 GPIOA

uint16_t cal_crc(const uint8_t *pBuffer,int pSize)
{
 8000312:	b480      	push	{r7}
 8000314:	b087      	sub	sp, #28
 8000316:	af00      	add	r7, sp, #0
 8000318:	6078      	str	r0, [r7, #4]
 800031a:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF;
 800031c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000320:	82fb      	strh	r3, [r7, #22]
	uint8_t temp;
	for(int x=0;x<pSize;x++)
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
 8000326:	e00c      	b.n	8000342 <cal_crc+0x30>
	{
			temp = pBuffer[x];
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	4413      	add	r3, r2
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	73fb      	strb	r3, [r7, #15]
			crc -= temp;
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	b29b      	uxth	r3, r3
 8000336:	8afa      	ldrh	r2, [r7, #22]
 8000338:	1ad3      	subs	r3, r2, r3
 800033a:	82fb      	strh	r3, [r7, #22]
	for(int x=0;x<pSize;x++)
 800033c:	693b      	ldr	r3, [r7, #16]
 800033e:	3301      	adds	r3, #1
 8000340:	613b      	str	r3, [r7, #16]
 8000342:	693a      	ldr	r2, [r7, #16]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	429a      	cmp	r2, r3
 8000348:	dbee      	blt.n	8000328 <cal_crc+0x16>
	}

	return crc;
 800034a:	8afb      	ldrh	r3, [r7, #22]
}
 800034c:	4618      	mov	r0, r3
 800034e:	371c      	adds	r7, #28
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <Process_Buffer>:
	uint16_t crc;
}SPI_Transfer_Base_t;
#pragma pack(pop)

void Process_Buffer()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0
	// all good!
	SPI_Transfer_Status.Process.Begin_Counter++;
 800035e:	4b2e      	ldr	r3, [pc, #184]	@ (8000418 <Process_Buffer+0xc0>)
 8000360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000362:	3301      	adds	r3, #1
 8000364:	4a2c      	ldr	r2, [pc, #176]	@ (8000418 <Process_Buffer+0xc0>)
 8000366:	6293      	str	r3, [r2, #40]	@ 0x28

	SPI_Transfer_Base_t *packet = (SPI_Transfer_Base_t *)aRxBuffer;
 8000368:	4b2c      	ldr	r3, [pc, #176]	@ (800041c <Process_Buffer+0xc4>)
 800036a:	613b      	str	r3, [r7, #16]

	uint16_t Errors=0;
 800036c:	2300      	movs	r3, #0
 800036e:	81fb      	strh	r3, [r7, #14]
	int Length_Ok=0;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
	int CRC_Ok=0;
 8000374:	2300      	movs	r3, #0
 8000376:	60bb      	str	r3, [r7, #8]

	if(packet->payload.length>sizeof(SPI_Transfer_Base_t))
 8000378:	693b      	ldr	r3, [r7, #16]
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	b29b      	uxth	r3, r3
 800037e:	2b85      	cmp	r3, #133	@ 0x85
 8000380:	d907      	bls.n	8000392 <Process_Buffer+0x3a>
	{
		Errors=0x0001;
 8000382:	2301      	movs	r3, #1
 8000384:	81fb      	strh	r3, [r7, #14]
		SPI_Transfer_Status.Process.Length_Max_Error++;
 8000386:	4b24      	ldr	r3, [pc, #144]	@ (8000418 <Process_Buffer+0xc0>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038a:	3301      	adds	r3, #1
 800038c:	4a22      	ldr	r2, [pc, #136]	@ (8000418 <Process_Buffer+0xc0>)
 800038e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000390:	e018      	b.n	80003c4 <Process_Buffer+0x6c>
	}
	else
	{
		int bytes_rx_in_DMA = SPI_TX_RX_BUFFERSIZE - hspi1.hdmarx->Instance->CNDTR;
 8000392:	4b23      	ldr	r3, [pc, #140]	@ (8000420 <Process_Buffer+0xc8>)
 8000394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800039e:	607b      	str	r3, [r7, #4]
		if(packet->payload.length == (bytes_rx_in_DMA)-2)
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	461a      	mov	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3b02      	subs	r3, #2
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d102      	bne.n	80003b6 <Process_Buffer+0x5e>
		{
			Length_Ok=1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	617b      	str	r3, [r7, #20]
 80003b4:	e006      	b.n	80003c4 <Process_Buffer+0x6c>
		}
		else
		{
			Errors=0x0002;
 80003b6:	2302      	movs	r3, #2
 80003b8:	81fb      	strh	r3, [r7, #14]
			SPI_Transfer_Status.Process.Length_DMA_Count_Error++;
 80003ba:	4b17      	ldr	r3, [pc, #92]	@ (8000418 <Process_Buffer+0xc0>)
 80003bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003be:	3301      	adds	r3, #1
 80003c0:	4a15      	ldr	r2, [pc, #84]	@ (8000418 <Process_Buffer+0xc0>)
 80003c2:	6353      	str	r3, [r2, #52]	@ 0x34
		}
	}


	if(Length_Ok)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d01d      	beq.n	8000406 <Process_Buffer+0xae>
	{
		// ok packet length rx'f matches the DMA counter
		uint16_t rx_crc = cal_crc((uint8_t*)&packet->payload,packet->payload.length);
 80003ca:	693a      	ldr	r2, [r7, #16]
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	4619      	mov	r1, r3
 80003d4:	4610      	mov	r0, r2
 80003d6:	f7ff ff9c 	bl	8000312 <cal_crc>
 80003da:	4603      	mov	r3, r0
 80003dc:	807b      	strh	r3, [r7, #2]

		if(packet->crc == rx_crc)
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	f8b3 3083 	ldrh.w	r3, [r3, #131]	@ 0x83
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	887a      	ldrh	r2, [r7, #2]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d107      	bne.n	80003fc <Process_Buffer+0xa4>
		{
			CRC_Ok=1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
			SPI_Transfer_Status.Process.CRC_OK_Counter++;
 80003f0:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <Process_Buffer+0xc0>)
 80003f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003f4:	3301      	adds	r3, #1
 80003f6:	4a08      	ldr	r2, [pc, #32]	@ (8000418 <Process_Buffer+0xc0>)
 80003f8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80003fa:	e004      	b.n	8000406 <Process_Buffer+0xae>
		}
		else
		{
			SPI_Transfer_Status.Process.CRC_Error_Counter++;
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <Process_Buffer+0xc0>)
 80003fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000400:	3301      	adds	r3, #1
 8000402:	4a05      	ldr	r2, [pc, #20]	@ (8000418 <Process_Buffer+0xc0>)
 8000404:	6393      	str	r3, [r2, #56]	@ 0x38
		}
	}

	SPI_Transfer_Status.Process.End_Counter++;
 8000406:	4b04      	ldr	r3, [pc, #16]	@ (8000418 <Process_Buffer+0xc0>)
 8000408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800040a:	3301      	adds	r3, #1
 800040c:	4a02      	ldr	r2, [pc, #8]	@ (8000418 <Process_Buffer+0xc0>)
 800040e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8000410:	bf00      	nop
 8000412:	3718      	adds	r7, #24
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200005b4 	.word	0x200005b4
 800041c:	200003b0 	.word	0x200003b0
 8000420:	2000028c 	.word	0x2000028c

08000424 <SPI1_TEST_SEND>:

HAL_StatusTypeDef SPI1_TEST_SEND(int pRandom)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b0a9      	sub	sp, #164	@ 0xa4
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	static uint32_t tx_counter;
	memset(aRxBuffer,0xFF,sizeof(aRxBuffer));
 800042c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000430:	21ff      	movs	r1, #255	@ 0xff
 8000432:	4844      	ldr	r0, [pc, #272]	@ (8000544 <SPI1_TEST_SEND+0x120>)
 8000434:	f003 fd0b 	bl	8003e4e <memset>
	memset(aTxBuffer,0,sizeof(aTxBuffer));
 8000438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800043c:	2100      	movs	r1, #0
 800043e:	4842      	ldr	r0, [pc, #264]	@ (8000548 <SPI1_TEST_SEND+0x124>)
 8000440:	f003 fd05 	bl	8003e4e <memset>

	SPI_Transfer_Base_t packet = {};
 8000444:	f107 030c 	add.w	r3, r7, #12
 8000448:	2285      	movs	r2, #133	@ 0x85
 800044a:	2100      	movs	r1, #0
 800044c:	4618      	mov	r0, r3
 800044e:	f003 fcfe 	bl	8003e4e <memset>


	pRandom=0;
 8000452:	2300      	movs	r3, #0
 8000454:	607b      	str	r3, [r7, #4]
	if(pRandom)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d02b      	beq.n	80004b4 <SPI1_TEST_SEND+0x90>
	{
		// random payload
		packet.payload.buffer[4]=tx_counter>>0;
 800045c:	4b3b      	ldr	r3, [pc, #236]	@ (800054c <SPI1_TEST_SEND+0x128>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	74fb      	strb	r3, [r7, #19]
		packet.payload.buffer[5]=tx_counter>>8;
 8000464:	4b39      	ldr	r3, [pc, #228]	@ (800054c <SPI1_TEST_SEND+0x128>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	0a1b      	lsrs	r3, r3, #8
 800046a:	b2db      	uxtb	r3, r3
 800046c:	753b      	strb	r3, [r7, #20]
		packet.payload.buffer[6]=tx_counter>>16;
 800046e:	4b37      	ldr	r3, [pc, #220]	@ (800054c <SPI1_TEST_SEND+0x128>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	0c1b      	lsrs	r3, r3, #16
 8000474:	b2db      	uxtb	r3, r3
 8000476:	757b      	strb	r3, [r7, #21]
		packet.payload.buffer[7]=tx_counter>>24;
 8000478:	4b34      	ldr	r3, [pc, #208]	@ (800054c <SPI1_TEST_SEND+0x128>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	0e1b      	lsrs	r3, r3, #24
 800047e:	b2db      	uxtb	r3, r3
 8000480:	75bb      	strb	r3, [r7, #22]

		for(int x=8;x<sizeof(packet.payload.buffer);x++)
 8000482:	2308      	movs	r3, #8
 8000484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000488:	e00f      	b.n	80004aa <SPI1_TEST_SEND+0x86>
		{
			packet.payload.buffer[x]=rand();
 800048a:	f003 fb7b 	bl	8003b84 <rand>
 800048e:	4603      	mov	r3, r0
 8000490:	b2d9      	uxtb	r1, r3
 8000492:	f107 020f 	add.w	r2, r7, #15
 8000496:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800049a:	4413      	add	r3, r2
 800049c:	460a      	mov	r2, r1
 800049e:	701a      	strb	r2, [r3, #0]
		for(int x=8;x<sizeof(packet.payload.buffer);x++)
 80004a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80004a4:	3301      	adds	r3, #1
 80004a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80004aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80004ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80004b0:	d9eb      	bls.n	800048a <SPI1_TEST_SEND+0x66>
 80004b2:	e00c      	b.n	80004ce <SPI1_TEST_SEND+0xaa>
		}
	}
	else
	{
		sprintf((char *)packet.payload.buffer, "Reply Message Blah Blah,%09ld,%09ld",tx_counter,HAL_GetTick());
 80004b4:	4b25      	ldr	r3, [pc, #148]	@ (800054c <SPI1_TEST_SEND+0x128>)
 80004b6:	681c      	ldr	r4, [r3, #0]
 80004b8:	f000 fd5c 	bl	8000f74 <HAL_GetTick>
 80004bc:	4602      	mov	r2, r0
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	1cd8      	adds	r0, r3, #3
 80004c4:	4613      	mov	r3, r2
 80004c6:	4622      	mov	r2, r4
 80004c8:	4921      	ldr	r1, [pc, #132]	@ (8000550 <SPI1_TEST_SEND+0x12c>)
 80004ca:	f003 fc5b 	bl	8003d84 <siprintf>
	}

	packet.payload.length = sizeof(packet)-2;
 80004ce:	2383      	movs	r3, #131	@ 0x83
 80004d0:	81bb      	strh	r3, [r7, #12]
	packet.crc = cal_crc((const uint8_t *)&packet.payload, packet.payload.length);
 80004d2:	89bb      	ldrh	r3, [r7, #12]
 80004d4:	461a      	mov	r2, r3
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	4611      	mov	r1, r2
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff ff18 	bl	8000312 <cal_crc>
 80004e2:	4603      	mov	r3, r0
 80004e4:	f8a7 308f 	strh.w	r3, [r7, #143]	@ 0x8f

	tx_counter++;
 80004e8:	4b18      	ldr	r3, [pc, #96]	@ (800054c <SPI1_TEST_SEND+0x128>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	3301      	adds	r3, #1
 80004ee:	4a17      	ldr	r2, [pc, #92]	@ (800054c <SPI1_TEST_SEND+0x128>)
 80004f0:	6013      	str	r3, [r2, #0]

	uint8_t* byte_ptr=(uint8_t*)&packet;
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	for(int x=0;x<sizeof(packet);x++)
 80004fa:	2300      	movs	r3, #0
 80004fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000500:	e010      	b.n	8000524 <SPI1_TEST_SEND+0x100>
	{
		aTxBuffer[x]=byte_ptr[x];
 8000502:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000506:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800050a:	4413      	add	r3, r2
 800050c:	7819      	ldrb	r1, [r3, #0]
 800050e:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <SPI1_TEST_SEND+0x124>)
 8000510:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000514:	4413      	add	r3, r2
 8000516:	460a      	mov	r2, r1
 8000518:	701a      	strb	r2, [r3, #0]
	for(int x=0;x<sizeof(packet);x++)
 800051a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800051e:	3301      	adds	r3, #1
 8000520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000524:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000528:	2b84      	cmp	r3, #132	@ 0x84
 800052a:	d9ea      	bls.n	8000502 <SPI1_TEST_SEND+0xde>
	}

	return HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, SPI_TX_RX_BUFFERSIZE);
 800052c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000530:	4a04      	ldr	r2, [pc, #16]	@ (8000544 <SPI1_TEST_SEND+0x120>)
 8000532:	4905      	ldr	r1, [pc, #20]	@ (8000548 <SPI1_TEST_SEND+0x124>)
 8000534:	4807      	ldr	r0, [pc, #28]	@ (8000554 <SPI1_TEST_SEND+0x130>)
 8000536:	f002 fb67 	bl	8002c08 <HAL_SPI_TransmitReceive_DMA>
 800053a:	4603      	mov	r3, r0
}
 800053c:	4618      	mov	r0, r3
 800053e:	37a4      	adds	r7, #164	@ 0xa4
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}
 8000544:	200003b0 	.word	0x200003b0
 8000548:	20000000 	.word	0x20000000
 800054c:	200005f4 	.word	0x200005f4
 8000550:	08004f04 	.word	0x08004f04
 8000554:	2000028c 	.word	0x2000028c

08000558 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_4)
 8000562:	88fb      	ldrh	r3, [r7, #6]
 8000564:	2b10      	cmp	r3, #16
 8000566:	d119      	bne.n	800059c <HAL_GPIO_EXTI_Callback+0x44>
	{
		SPI_Transfer_Status.CS_End.Interrupt_Counter++;
 8000568:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0x4c>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	3301      	adds	r3, #1
 800056e:	4a0d      	ldr	r2, [pc, #52]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000570:	6053      	str	r3, [r2, #4]

		HAL_StatusTypeDef state_res = HAL_SPI_GetState(&hspi1);
 8000572:	480d      	ldr	r0, [pc, #52]	@ (80005a8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000574:	f002 ff4c 	bl	8003410 <HAL_SPI_GetState>
 8000578:	4603      	mov	r3, r0
 800057a:	73fb      	strb	r3, [r7, #15]
		if(state_res<=(HAL_StatusTypeDef)HAL_SPI_STATE_ABORT)
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	2b07      	cmp	r3, #7
 8000580:	d809      	bhi.n	8000596 <HAL_GPIO_EXTI_Callback+0x3e>
		{
			SPI_Transfer_Status.CS_End.States[state_res]++;
 8000582:	7bfa      	ldrb	r2, [r7, #15]
 8000584:	4907      	ldr	r1, [pc, #28]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000586:	0093      	lsls	r3, r2, #2
 8000588:	440b      	add	r3, r1
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	1c59      	adds	r1, r3, #1
 800058e:	4805      	ldr	r0, [pc, #20]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000590:	0093      	lsls	r3, r2, #2
 8000592:	4403      	add	r3, r0
 8000594:	6099      	str	r1, [r3, #8]
		}

		// just make this state - even if no bytes!
		wTransferState = TRANSFER_COMPLETE;
 8000596:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <HAL_GPIO_EXTI_Callback+0x54>)
 8000598:	2201      	movs	r2, #1
 800059a:	601a      	str	r2, [r3, #0]
	}
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200005b4 	.word	0x200005b4
 80005a8:	2000028c 	.word	0x2000028c
 80005ac:	200005b0 	.word	0x200005b0

080005b0 <SPI1_PA4_EN_Intterrupt>:
{
	return HAL_GPIO_ReadPin(SPI1_CS_PORT, SPI1_CS_PIN);
}

void SPI1_PA4_EN_Intterrupt()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 80005c4:	2310      	movs	r3, #16
 80005c6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005cc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SPI1_CS_PORT, &GPIO_InitStruct);
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005da:	f001 fa03 	bl	80019e4 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(SPI1_CS_EXTI_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	200a      	movs	r0, #10
 80005e4:	f000 fdf3 	bl	80011ce <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(SPI1_CS_EXTI_IRQn);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f000 fe0a 	bl	8001202 <HAL_NVIC_EnableIRQ>
}
 80005ee:	bf00      	nop
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fc55 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f883 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f937 	bl	8000878 <MX_GPIO_Init>
  MX_DMA_Init();
 800060a:	f000 f903 	bl	8000814 <MX_DMA_Init>
  MX_SPI1_Init();
 800060e:	f000 f8c9 	bl	80007a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED2);
 8000612:	2000      	movs	r0, #0
 8000614:	f000 fbd2 	bl	8000dbc <BSP_LED_Init>
  SPI1_PA4_EN_Intterrupt();
 8000618:	f7ff ffca 	bl	80005b0 <SPI1_PA4_EN_Intterrupt>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_StatusTypeDef state_res = HAL_SPI_GetState(&hspi1);
 800061c:	4836      	ldr	r0, [pc, #216]	@ (80006f8 <main+0x100>)
 800061e:	f002 fef7 	bl	8003410 <HAL_SPI_GetState>
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]

	  if(Transfer_Init)
 8000626:	4b35      	ldr	r3, [pc, #212]	@ (80006fc <main+0x104>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00c      	beq.n	8000648 <main+0x50>
	  {
		  HAL_StatusTypeDef res = SPI1_TEST_SEND(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f7ff fef8 	bl	8000424 <SPI1_TEST_SEND>
 8000634:	4603      	mov	r3, r0
 8000636:	71bb      	strb	r3, [r7, #6]
		  if ( res != HAL_OK)
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <main+0x4a>
		  {
		    /* Transfer error in transmission process */
		    Error_Handler();
 800063e:	f000 f97b 	bl	8000938 <Error_Handler>
		  }
		  Transfer_Init=0;
 8000642:	4b2e      	ldr	r3, [pc, #184]	@ (80006fc <main+0x104>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
	  }

	  while (wTransferState == TRANSFER_WAIT)
 8000648:	bf00      	nop
 800064a:	4b2d      	ldr	r3, [pc, #180]	@ (8000700 <main+0x108>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0fb      	beq.n	800064a <main+0x52>
	  {
	  }

	  switch (wTransferState)
 8000652:	4b2b      	ldr	r3, [pc, #172]	@ (8000700 <main+0x108>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d002      	beq.n	8000660 <main+0x68>
 800065a:	2b02      	cmp	r3, #2
 800065c:	d029      	beq.n	80006b2 <main+0xba>
 800065e:	e04a      	b.n	80006f6 <main+0xfe>
	  {
	    case TRANSFER_COMPLETE :
	    	HAL_GPIO_WritePin(SPI_Process_DBG_GPIO_Port, SPI_Process_DBG_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2102      	movs	r1, #2
 8000664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000668:	f001 fc20 	bl	8001eac <HAL_GPIO_WritePin>

	    	Process_Buffer();
 800066c:	f7ff fe74 	bl	8000358 <Process_Buffer>

	    	HAL_SPI_DMAStop(&hspi1);
 8000670:	4821      	ldr	r0, [pc, #132]	@ (80006f8 <main+0x100>)
 8000672:	f002 fd6f 	bl	8003154 <HAL_SPI_DMAStop>
			HAL_SPI_Abort(&hspi1);
 8000676:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <main+0x100>)
 8000678:	f002 fc4c 	bl	8002f14 <HAL_SPI_Abort>

			__HAL_RCC_SPI1_FORCE_RESET();
 800067c:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <main+0x10c>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a20      	ldr	r2, [pc, #128]	@ (8000704 <main+0x10c>)
 8000682:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_RCC_SPI1_RELEASE_RESET();
 8000688:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <main+0x10c>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a1d      	ldr	r2, [pc, #116]	@ (8000704 <main+0x10c>)
 800068e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40

			HAL_StatusTypeDef res = SPI1_TEST_SEND(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff fec5 	bl	8000424 <SPI1_TEST_SEND>
 800069a:	4603      	mov	r3, r0
 800069c:	717b      	strb	r3, [r7, #5]

			wTransferState = TRANSFER_PROCESSED;
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <main+0x108>)
 80006a0:	2203      	movs	r2, #3
 80006a2:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(SPI_Process_DBG_GPIO_Port, SPI_Process_DBG_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2102      	movs	r1, #2
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ac:	f001 fbfe 	bl	8001eac <HAL_GPIO_WritePin>
	      break;
 80006b0:	e021      	b.n	80006f6 <main+0xfe>

	    case TRANSFER_ERROR:
	    	SPI_Transfer_Status.HAL_Error_Counter++;
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <main+0x110>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <main+0x110>)
 80006ba:	6013      	str	r3, [r2, #0]
			wTransferState = TRANSFER_PROCESSED;
 80006bc:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <main+0x108>)
 80006be:	2203      	movs	r2, #3
 80006c0:	601a      	str	r2, [r3, #0]

			// https://community.st.com/t5/stm32-mcus-products/restart-spi-dma-transmission/td-p/637909
			HAL_SPI_DMAStop(&hspi1);
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <main+0x100>)
 80006c4:	f002 fd46 	bl	8003154 <HAL_SPI_DMAStop>
			__HAL_RCC_SPI1_FORCE_RESET();
 80006c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <main+0x10c>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000704 <main+0x10c>)
 80006ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006d2:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_RCC_SPI1_RELEASE_RESET();
 80006d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <main+0x10c>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000704 <main+0x10c>)
 80006da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006de:	6413      	str	r3, [r2, #64]	@ 0x40
			HAL_SPI_DeInit(&hspi1);
 80006e0:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <main+0x100>)
 80006e2:	f002 fa68 	bl	8002bb6 <HAL_SPI_DeInit>
			MX_SPI1_Init();
 80006e6:	f000 f85d 	bl	80007a4 <MX_SPI1_Init>
			SPI1_PA4_EN_Intterrupt();
 80006ea:	f7ff ff61 	bl	80005b0 <SPI1_PA4_EN_Intterrupt>

			Transfer_Init=1;
 80006ee:	4b03      	ldr	r3, [pc, #12]	@ (80006fc <main+0x104>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
	      break;
 80006f4:	bf00      	nop
  {
 80006f6:	e791      	b.n	800061c <main+0x24>
 80006f8:	2000028c 	.word	0x2000028c
 80006fc:	20000200 	.word	0x20000200
 8000700:	200005b0 	.word	0x200005b0
 8000704:	40021000 	.word	0x40021000
 8000708:	200005b4 	.word	0x200005b4

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	@ 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	2238      	movs	r2, #56	@ 0x38
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fb97 	bl	8003e4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800072e:	2000      	movs	r0, #0
 8000730:	f001 fbec 	bl	8001f0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073e:	2340      	movs	r3, #64	@ 0x40
 8000740:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000746:	2302      	movs	r3, #2
 8000748:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800074a:	2304      	movs	r3, #4
 800074c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800074e:	2355      	movs	r3, #85	@ 0x55
 8000750:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800075a:	2302      	movs	r3, #2
 800075c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0318 	add.w	r3, r7, #24
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fc86 	bl	8002074 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800076e:	f000 f8e3 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2303      	movs	r3, #3
 8000778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2104      	movs	r1, #4
 800078a:	4618      	mov	r0, r3
 800078c:	f001 ff84 	bl	8002698 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000796:	f000 f8cf 	bl	8000938 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	@ 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a8:	4b18      	ldr	r3, [pc, #96]	@ (800080c <MX_SPI1_Init+0x68>)
 80007aa:	4a19      	ldr	r2, [pc, #100]	@ (8000810 <MX_SPI1_Init+0x6c>)
 80007ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80007ae:	4b17      	ldr	r3, [pc, #92]	@ (800080c <MX_SPI1_Init+0x68>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b4:	4b15      	ldr	r3, [pc, #84]	@ (800080c <MX_SPI1_Init+0x68>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ba:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_SPI1_Init+0x68>)
 80007bc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c2:	4b12      	ldr	r3, [pc, #72]	@ (800080c <MX_SPI1_Init+0x68>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c8:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_SPI1_Init+0x68>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_SPI1_Init+0x68>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <MX_SPI1_Init+0x68>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_SPI1_Init+0x68>)
 80007dc:	2200      	movs	r2, #0
 80007de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <MX_SPI1_Init+0x68>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_SPI1_Init+0x68>)
 80007e8:	2207      	movs	r2, #7
 80007ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <MX_SPI1_Init+0x68>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_SPI1_Init+0x68>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_SPI1_Init+0x68>)
 80007fa:	f002 f931 	bl	8002a60 <HAL_SPI_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000804:	f000 f898 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000028c 	.word	0x2000028c
 8000810:	40013000 	.word	0x40013000

08000814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_DMA_Init+0x60>)
 800081c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800081e:	4a15      	ldr	r2, [pc, #84]	@ (8000874 <MX_DMA_Init+0x60>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6493      	str	r3, [r2, #72]	@ 0x48
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_DMA_Init+0x60>)
 8000828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <MX_DMA_Init+0x60>)
 8000834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000836:	4a0f      	ldr	r2, [pc, #60]	@ (8000874 <MX_DMA_Init+0x60>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6493      	str	r3, [r2, #72]	@ 0x48
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <MX_DMA_Init+0x60>)
 8000840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	200c      	movs	r0, #12
 8000850:	f000 fcbd 	bl	80011ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000854:	200c      	movs	r0, #12
 8000856:	f000 fcd4 	bl	8001202 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	200d      	movs	r0, #13
 8000860:	f000 fcb5 	bl	80011ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000864:	200d      	movs	r0, #13
 8000866:	f000 fccc 	bl	8001202 <HAL_NVIC_EnableIRQ>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <MX_GPIO_Init+0x78>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <MX_GPIO_Init+0x78>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089a:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <MX_GPIO_Init+0x78>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <MX_GPIO_Init+0x78>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	4a11      	ldr	r2, [pc, #68]	@ (80008f0 <MX_GPIO_Init+0x78>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_GPIO_Init+0x78>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_Process_DBG_GPIO_Port, SPI_Process_DBG_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2102      	movs	r1, #2
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c6:	f001 faf1 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_Process_DBG_Pin */
  GPIO_InitStruct.Pin = SPI_Process_DBG_Pin;
 80008ca:	2302      	movs	r3, #2
 80008cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_Process_DBG_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e4:	f001 f87e 	bl	80019e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  static int callbacks;
  /* Turn LED2 on: Transfer in transmission/reception process is complete */


  callbacks++;
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <HAL_SPI_TxRxCpltCallback+0x20>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	4a04      	ldr	r2, [pc, #16]	@ (8000914 <HAL_SPI_TxRxCpltCallback+0x20>)
 8000904:	6013      	str	r3, [r2, #0]
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	200005f8 	.word	0x200005f8

08000918 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <HAL_SPI_ErrorCallback+0x1c>)
 8000922:	2202      	movs	r2, #2
 8000924:	601a      	str	r2, [r3, #0]
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	200005b0 	.word	0x200005b0

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_Off(LED2);
 800093c:	2000      	movs	r0, #0
 800093e:	f000 fa89 	bl	8000e54 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8000942:	2000      	movs	r0, #0
 8000944:	f000 fa86 	bl	8000e54 <BSP_LED_Off>
  while (1)
  {
    /* Toggle LED2 for error */
	BSP_LED_On(LED2);
 8000948:	2000      	movs	r0, #0
 800094a:	f000 fa6d 	bl	8000e28 <BSP_LED_On>
    HAL_Delay(1000);
 800094e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000952:	f000 fb1b 	bl	8000f8c <HAL_Delay>
	BSP_LED_On(LED2);
 8000956:	bf00      	nop
 8000958:	e7f6      	b.n	8000948 <Error_Handler+0x10>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000966:	4a0e      	ldr	r2, [pc, #56]	@ (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6613      	str	r3, [r2, #96]	@ 0x60
 800096e:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097e:	4a08      	ldr	r2, [pc, #32]	@ (80009a0 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000984:	6593      	str	r3, [r2, #88]	@ 0x58
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800098a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000992:	f001 fb5f 	bl	8002054 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a53      	ldr	r2, [pc, #332]	@ (8000b10 <HAL_SPI_MspInit+0x16c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	f040 80a0 	bne.w	8000b08 <HAL_SPI_MspInit+0x164>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c8:	4b52      	ldr	r3, [pc, #328]	@ (8000b14 <HAL_SPI_MspInit+0x170>)
 80009ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009cc:	4a51      	ldr	r2, [pc, #324]	@ (8000b14 <HAL_SPI_MspInit+0x170>)
 80009ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80009d4:	4b4f      	ldr	r3, [pc, #316]	@ (8000b14 <HAL_SPI_MspInit+0x170>)
 80009d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	4b4c      	ldr	r3, [pc, #304]	@ (8000b14 <HAL_SPI_MspInit+0x170>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e4:	4a4b      	ldr	r2, [pc, #300]	@ (8000b14 <HAL_SPI_MspInit+0x170>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ec:	4b49      	ldr	r3, [pc, #292]	@ (8000b14 <HAL_SPI_MspInit+0x170>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f8:	4b46      	ldr	r3, [pc, #280]	@ (8000b14 <HAL_SPI_MspInit+0x170>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	4a45      	ldr	r2, [pc, #276]	@ (8000b14 <HAL_SPI_MspInit+0x170>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a04:	4b43      	ldr	r3, [pc, #268]	@ (8000b14 <HAL_SPI_MspInit+0x170>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a10:	2310      	movs	r3, #16
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a20:	2305      	movs	r3, #5
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2e:	f000 ffd9 	bl	80019e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a32:	2338      	movs	r3, #56	@ 0x38
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a42:	2305      	movs	r3, #5
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4832      	ldr	r0, [pc, #200]	@ (8000b18 <HAL_SPI_MspInit+0x174>)
 8000a4e:	f000 ffc9 	bl	80019e4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000a52:	4b32      	ldr	r3, [pc, #200]	@ (8000b1c <HAL_SPI_MspInit+0x178>)
 8000a54:	4a32      	ldr	r2, [pc, #200]	@ (8000b20 <HAL_SPI_MspInit+0x17c>)
 8000a56:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000a58:	4b30      	ldr	r3, [pc, #192]	@ (8000b1c <HAL_SPI_MspInit+0x178>)
 8000a5a:	220b      	movs	r2, #11
 8000a5c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b1c <HAL_SPI_MspInit+0x178>)
 8000a60:	2210      	movs	r2, #16
 8000a62:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a64:	4b2d      	ldr	r3, [pc, #180]	@ (8000b1c <HAL_SPI_MspInit+0x178>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b1c <HAL_SPI_MspInit+0x178>)
 8000a6c:	2280      	movs	r2, #128	@ 0x80
 8000a6e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	@ (8000b1c <HAL_SPI_MspInit+0x178>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a76:	4b29      	ldr	r3, [pc, #164]	@ (8000b1c <HAL_SPI_MspInit+0x178>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	@ (8000b1c <HAL_SPI_MspInit+0x178>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a82:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <HAL_SPI_MspInit+0x178>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000a88:	4824      	ldr	r0, [pc, #144]	@ (8000b1c <HAL_SPI_MspInit+0x178>)
 8000a8a:	f000 fbe3 	bl	8001254 <HAL_DMA_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 8000a94:	f7ff ff50 	bl	8000938 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a20      	ldr	r2, [pc, #128]	@ (8000b1c <HAL_SPI_MspInit+0x178>)
 8000a9c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b1c <HAL_SPI_MspInit+0x178>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <HAL_SPI_MspInit+0x180>)
 8000aa6:	4a20      	ldr	r2, [pc, #128]	@ (8000b28 <HAL_SPI_MspInit+0x184>)
 8000aa8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <HAL_SPI_MspInit+0x180>)
 8000aac:	220a      	movs	r2, #10
 8000aae:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <HAL_SPI_MspInit+0x180>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <HAL_SPI_MspInit+0x180>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000abc:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_SPI_MspInit+0x180>)
 8000abe:	2280      	movs	r2, #128	@ 0x80
 8000ac0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <HAL_SPI_MspInit+0x180>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <HAL_SPI_MspInit+0x180>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <HAL_SPI_MspInit+0x180>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <HAL_SPI_MspInit+0x180>)
 8000ad6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ada:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000adc:	4811      	ldr	r0, [pc, #68]	@ (8000b24 <HAL_SPI_MspInit+0x180>)
 8000ade:	f000 fbb9 	bl	8001254 <HAL_DMA_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8000ae8:	f7ff ff26 	bl	8000938 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a0d      	ldr	r2, [pc, #52]	@ (8000b24 <HAL_SPI_MspInit+0x180>)
 8000af0:	659a      	str	r2, [r3, #88]	@ 0x58
 8000af2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <HAL_SPI_MspInit+0x180>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2023      	movs	r0, #35	@ 0x23
 8000afe:	f000 fb66 	bl	80011ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b02:	2023      	movs	r0, #35	@ 0x23
 8000b04:	f000 fb7d 	bl	8001202 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	@ 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40013000 	.word	0x40013000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	200002f0 	.word	0x200002f0
 8000b20:	40020030 	.word	0x40020030
 8000b24:	20000350 	.word	0x20000350
 8000b28:	4002001c 	.word	0x4002001c

08000b2c <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a17      	ldr	r2, [pc, #92]	@ (8000b98 <HAL_SPI_MspDeInit+0x6c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d127      	bne.n	8000b8e <HAL_SPI_MspDeInit+0x62>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */
    /* Reset peripherals */
    __HAL_RCC_SPI1_FORCE_RESET();
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <HAL_SPI_MspDeInit+0x70>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	4a16      	ldr	r2, [pc, #88]	@ (8000b9c <HAL_SPI_MspDeInit+0x70>)
 8000b44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b48:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_RCC_SPI1_RELEASE_RESET();
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_SPI_MspDeInit+0x70>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	4a13      	ldr	r2, [pc, #76]	@ (8000b9c <HAL_SPI_MspDeInit+0x70>)
 8000b50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b54:	6413      	str	r3, [r2, #64]	@ 0x40

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_SPI_MspDeInit+0x70>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b5a:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <HAL_SPI_MspDeInit+0x70>)
 8000b5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b60:	6613      	str	r3, [r2, #96]	@ 0x60
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8000b62:	2110      	movs	r1, #16
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b68:	f001 f8be 	bl	8001ce8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8000b6c:	2138      	movs	r1, #56	@ 0x38
 8000b6e:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <HAL_SPI_MspDeInit+0x74>)
 8000b70:	f001 f8ba 	bl	8001ce8 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmatx);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fc13 	bl	80013a4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fc0e 	bl	80013a4 <HAL_DMA_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8000b88:	2023      	movs	r0, #35	@ 0x23
 8000b8a:	f000 fb48 	bl	800121e <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN SPI1_MspDeInit 1 */

    /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40013000 	.word	0x40013000
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	48000400 	.word	0x48000400

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	bf00      	nop
 8000bb8:	e7fd      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bda:	f000 f9b9 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <DMA1_Channel2_IRQHandler+0x10>)
 8000bea:	f000 fdac 	bl	8001746 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000350 	.word	0x20000350

08000bf8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000bfc:	4802      	ldr	r0, [pc, #8]	@ (8000c08 <DMA1_Channel3_IRQHandler+0x10>)
 8000bfe:	f000 fda2 	bl	8001746 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200002f0 	.word	0x200002f0

08000c0c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c10:	4802      	ldr	r0, [pc, #8]	@ (8000c1c <SPI1_IRQHandler+0x10>)
 8000c12:	f002 fadf 	bl	80031d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000028c 	.word	0x2000028c

08000c20 <EXTI4_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI4_IRQHandler(void)   // <----- The ISR Function We're Looking For!
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000c24:	2010      	movs	r0, #16
 8000c26:	f001 f959 	bl	8001edc <HAL_GPIO_EXTI_IRQHandler>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_kill>:

int _kill(int pid, int sig)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c48:	f003 f950 	bl	8003eec <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2216      	movs	r2, #22
 8000c50:	601a      	str	r2, [r3, #0]
  return -1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <_exit>:

void _exit (int status)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c66:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffe7 	bl	8000c3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <_exit+0x12>

08000c74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	e00a      	b.n	8000c9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c86:	f3af 8000 	nop.w
 8000c8a:	4601      	mov	r1, r0
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	60ba      	str	r2, [r7, #8]
 8000c92:	b2ca      	uxtb	r2, r1
 8000c94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf0      	blt.n	8000c86 <_read+0x12>
  }

  return len;
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	e009      	b.n	8000cd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	60ba      	str	r2, [r7, #8]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf1      	blt.n	8000cc0 <_write+0x12>
  }
  return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_close>:

int _close(int file)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <_isatty>:

int _isatty(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	@ (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	@ (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f003 f8b4 	bl	8003eec <__errno>
 8000d84:	4603      	mov	r3, r0
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20020000 	.word	0x20020000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	200005fc 	.word	0x200005fc
 8000db8:	20000750 	.word	0x20000750

08000dbc <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <BSP_LED_Init+0x64>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	4a15      	ldr	r2, [pc, #84]	@ (8000e20 <BSP_LED_Init+0x64>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <BSP_LED_Init+0x64>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000dde:	2320      	movs	r3, #32
 8000de0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e24 <BSP_LED_Init+0x68>)
 8000df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df6:	f107 020c 	add.w	r2, r7, #12
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 fdf1 	bl	80019e4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	4a07      	ldr	r2, [pc, #28]	@ (8000e24 <BSP_LED_Init+0x68>)
 8000e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 f84c 	bl	8001eac <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3720      	adds	r7, #32
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000
 8000e24:	20000204 	.word	0x20000204

08000e28 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4a06      	ldr	r2, [pc, #24]	@ (8000e50 <BSP_LED_On+0x28>)
 8000e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3a:	2120      	movs	r1, #32
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 f834 	bl	8001eac <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000204 	.word	0x20000204

08000e54 <BSP_LED_Off>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	4a06      	ldr	r2, [pc, #24]	@ (8000e7c <BSP_LED_Off+0x28>)
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	2120      	movs	r1, #32
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 f81e 	bl	8001eac <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000204 	.word	0x20000204

08000e80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <SystemInit+0x28>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <SystemInit+0x28>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e94:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <SystemInit+0x28>)
 8000e96:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f000 f97e 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 f80d 	bl	8000edc <HAL_InitTick>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	e001      	b.n	8000ed2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ece:	f7ff fd45 	bl	800095c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed2:	79fb      	ldrb	r3, [r7, #7]

}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <HAL_InitTick+0x68>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d022      	beq.n	8000f36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ef0:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <HAL_InitTick+0x6c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <HAL_InitTick+0x68>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 f998 	bl	800123a <HAL_SYSTICK_Config>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10f      	bne.n	8000f30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b0f      	cmp	r3, #15
 8000f14:	d809      	bhi.n	8000f2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f16:	2200      	movs	r2, #0
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1e:	f000 f956 	bl	80011ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <HAL_InitTick+0x70>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	e007      	b.n	8000f3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e004      	b.n	8000f3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	e001      	b.n	8000f3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000210 	.word	0x20000210
 8000f48:	20000208 	.word	0x20000208
 8000f4c:	2000020c 	.word	0x2000020c

08000f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <HAL_IncTick+0x1c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <HAL_IncTick+0x20>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a03      	ldr	r2, [pc, #12]	@ (8000f6c <HAL_IncTick+0x1c>)
 8000f60:	6013      	str	r3, [r2, #0]
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	20000600 	.word	0x20000600
 8000f70:	20000210 	.word	0x20000210

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000600 	.word	0x20000600

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d004      	beq.n	8000fb0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <HAL_Delay+0x40>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb0:	bf00      	nop
 8000fb2:	f7ff ffdf 	bl	8000f74 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d8f7      	bhi.n	8000fb2 <HAL_Delay+0x26>
  {
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000210 	.word	0x20000210

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4907      	ldr	r1, [pc, #28]	@ (800106c <__NVIC_EnableIRQ+0x38>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db12      	blt.n	80010a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	490a      	ldr	r1, [pc, #40]	@ (80010b4 <__NVIC_DisableIRQ+0x44>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	3320      	adds	r3, #32
 8001098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800109c:	f3bf 8f4f 	dsb	sy
}
 80010a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010a2:	f3bf 8f6f 	isb	sy
}
 80010a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	@ (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	@ (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	@ 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	@ 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f7ff ff8e 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff05 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011dc:	f7ff ff1c 	bl	8001018 <__NVIC_GetPriorityGrouping>
 80011e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	6978      	ldr	r0, [r7, #20]
 80011e8:	f7ff ff90 	bl	800110c <NVIC_EncodePriority>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff5f 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff0f 	bl	8001034 <__NVIC_EnableIRQ>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff1f 	bl	8001070 <__NVIC_DisableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff96 	bl	8001174 <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e08d      	b.n	8001382 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4b47      	ldr	r3, [pc, #284]	@ (800138c <HAL_DMA_Init+0x138>)
 800126e:	429a      	cmp	r2, r3
 8001270:	d80f      	bhi.n	8001292 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	4b45      	ldr	r3, [pc, #276]	@ (8001390 <HAL_DMA_Init+0x13c>)
 800127a:	4413      	add	r3, r2
 800127c:	4a45      	ldr	r2, [pc, #276]	@ (8001394 <HAL_DMA_Init+0x140>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	009a      	lsls	r2, r3, #2
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a42      	ldr	r2, [pc, #264]	@ (8001398 <HAL_DMA_Init+0x144>)
 800128e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001290:	e00e      	b.n	80012b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	4b40      	ldr	r3, [pc, #256]	@ (800139c <HAL_DMA_Init+0x148>)
 800129a:	4413      	add	r3, r2
 800129c:	4a3d      	ldr	r2, [pc, #244]	@ (8001394 <HAL_DMA_Init+0x140>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	009a      	lsls	r2, r3, #2
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a3c      	ldr	r2, [pc, #240]	@ (80013a0 <HAL_DMA_Init+0x14c>)
 80012ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2202      	movs	r2, #2
 80012b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80012c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80012ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 fb0c 	bl	8001920 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001310:	d102      	bne.n	8001318 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800132c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d010      	beq.n	8001358 <HAL_DMA_Init+0x104>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b04      	cmp	r3, #4
 800133c:	d80c      	bhi.n	8001358 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fb2c 	bl	800199c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	e008      	b.n	800136a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40020407 	.word	0x40020407
 8001390:	bffdfff8 	.word	0xbffdfff8
 8001394:	cccccccd 	.word	0xcccccccd
 8001398:	40020000 	.word	0x40020000
 800139c:	bffdfbf8 	.word	0xbffdfbf8
 80013a0:	40020400 	.word	0x40020400

080013a4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e07b      	b.n	80014ae <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0201 	bic.w	r2, r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b3a      	ldr	r3, [pc, #232]	@ (80014b8 <HAL_DMA_DeInit+0x114>)
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d80f      	bhi.n	80013f2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b38      	ldr	r3, [pc, #224]	@ (80014bc <HAL_DMA_DeInit+0x118>)
 80013da:	4413      	add	r3, r2
 80013dc:	4a38      	ldr	r2, [pc, #224]	@ (80014c0 <HAL_DMA_DeInit+0x11c>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	009a      	lsls	r2, r3, #2
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a35      	ldr	r2, [pc, #212]	@ (80014c4 <HAL_DMA_DeInit+0x120>)
 80013ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80013f0:	e00e      	b.n	8001410 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b33      	ldr	r3, [pc, #204]	@ (80014c8 <HAL_DMA_DeInit+0x124>)
 80013fa:	4413      	add	r3, r2
 80013fc:	4a30      	ldr	r2, [pc, #192]	@ (80014c0 <HAL_DMA_DeInit+0x11c>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	009a      	lsls	r2, r3, #2
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a2f      	ldr	r2, [pc, #188]	@ (80014cc <HAL_DMA_DeInit+0x128>)
 800140e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	2101      	movs	r1, #1
 8001426:	fa01 f202 	lsl.w	r2, r1, r2
 800142a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 fa77 	bl	8001920 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001442:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00f      	beq.n	800146c <HAL_DMA_DeInit+0xc8>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b04      	cmp	r3, #4
 8001452:	d80b      	bhi.n	800146c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 faa1 	bl	800199c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800146a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40020407 	.word	0x40020407
 80014bc:	bffdfff8 	.word	0xbffdfff8
 80014c0:	cccccccd 	.word	0xcccccccd
 80014c4:	40020000 	.word	0x40020000
 80014c8:	bffdfbf8 	.word	0xbffdfbf8
 80014cc:	40020400 	.word	0x40020400

080014d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_DMA_Start_IT+0x20>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e066      	b.n	80015be <HAL_DMA_Start_IT+0xee>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d155      	bne.n	80015b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2202      	movs	r2, #2
 8001508:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f9bb 	bl	80018a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 020e 	orr.w	r2, r2, #14
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e00f      	b.n	8001568 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0204 	bic.w	r2, r2, #4
 8001556:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 020a 	orr.w	r2, r2, #10
 8001566:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001584:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001598:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800159c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0201 	orr.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e005      	b.n	80015bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015b8:	2302      	movs	r3, #2
 80015ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b085      	sub	sp, #20
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d005      	beq.n	80015ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2204      	movs	r2, #4
 80015e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e037      	b.n	800165a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 020e 	bic.w	r2, r2, #14
 80015f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001604:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001608:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	f003 021f 	and.w	r2, r3, #31
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001636:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00c      	beq.n	800165a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800164e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001658:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d00d      	beq.n	80016ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2204      	movs	r2, #4
 8001694:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
 80016aa:	e047      	b.n	800173c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 020e 	bic.w	r2, r2, #14
 80016ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	2101      	movs	r1, #1
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00c      	beq.n	800171c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800170c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001710:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800171a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	4798      	blx	r3
    }
  }
  return status;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	2204      	movs	r2, #4
 8001768:	409a      	lsls	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d026      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x7a>
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d021      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0320 	and.w	r3, r3, #32
 8001786:	2b00      	cmp	r3, #0
 8001788:	d107      	bne.n	800179a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0204 	bic.w	r2, r2, #4
 8001798:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	f003 021f 	and.w	r2, r3, #31
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	2104      	movs	r1, #4
 80017a8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d071      	beq.n	800189a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017be:	e06c      	b.n	800189a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	2202      	movs	r2, #2
 80017ca:	409a      	lsls	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d02e      	beq.n	8001832 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d029      	beq.n	8001832 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10b      	bne.n	8001804 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 020a 	bic.w	r2, r2, #10
 80017fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	2102      	movs	r1, #2
 8001812:	fa01 f202 	lsl.w	r2, r1, r2
 8001816:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	2b00      	cmp	r3, #0
 8001826:	d038      	beq.n	800189a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001830:	e033      	b.n	800189a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	2208      	movs	r2, #8
 800183c:	409a      	lsls	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d02a      	beq.n	800189c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d025      	beq.n	800189c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 020e 	bic.w	r2, r2, #14
 800185e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	2101      	movs	r1, #1
 800186e:	fa01 f202 	lsl.w	r2, r1, r2
 8001872:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800189a:	bf00      	nop
 800189c:	bf00      	nop
}
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	f003 021f 	and.w	r2, r3, #31
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	2101      	movs	r1, #1
 80018dc:	fa01 f202 	lsl.w	r2, r1, r2
 80018e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b10      	cmp	r3, #16
 80018f0:	d108      	bne.n	8001904 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001902:	e007      	b.n	8001914 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	60da      	str	r2, [r3, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001930:	429a      	cmp	r2, r3
 8001932:	d802      	bhi.n	800193a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001934:	4b15      	ldr	r3, [pc, #84]	@ (800198c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e001      	b.n	800193e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800193c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	3b08      	subs	r3, #8
 800194a:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800194c:	fba2 2303 	umull	r2, r3, r2, r3
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	009a      	lsls	r2, r3, #2
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4413      	add	r3, r2
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a0b      	ldr	r2, [pc, #44]	@ (8001998 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800196a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	2201      	movs	r2, #1
 8001974:	409a      	lsls	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800197a:	bf00      	nop
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40020407 	.word	0x40020407
 800198c:	40020800 	.word	0x40020800
 8001990:	40020820 	.word	0x40020820
 8001994:	cccccccd 	.word	0xcccccccd
 8001998:	40020880 	.word	0x40020880

0800199c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	461a      	mov	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a08      	ldr	r2, [pc, #32]	@ (80019e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019be:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	2201      	movs	r2, #1
 80019ca:	409a      	lsls	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	1000823f 	.word	0x1000823f
 80019e0:	40020940 	.word	0x40020940

080019e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019f2:	e15a      	b.n	8001caa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2101      	movs	r1, #1
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 814c 	beq.w	8001ca4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d005      	beq.n	8001a24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d130      	bne.n	8001a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	f003 0201 	and.w	r2, r3, #1
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d017      	beq.n	8001ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d123      	bne.n	8001b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	6939      	ldr	r1, [r7, #16]
 8001b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0203 	and.w	r2, r3, #3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80a6 	beq.w	8001ca4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b58:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc8 <HAL_GPIO_Init+0x2e4>)
 8001b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b5c:	4a5a      	ldr	r2, [pc, #360]	@ (8001cc8 <HAL_GPIO_Init+0x2e4>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b64:	4b58      	ldr	r3, [pc, #352]	@ (8001cc8 <HAL_GPIO_Init+0x2e4>)
 8001b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b70:	4a56      	ldr	r2, [pc, #344]	@ (8001ccc <HAL_GPIO_Init+0x2e8>)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3302      	adds	r3, #2
 8001b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	220f      	movs	r2, #15
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b9a:	d01f      	beq.n	8001bdc <HAL_GPIO_Init+0x1f8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd0 <HAL_GPIO_Init+0x2ec>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d019      	beq.n	8001bd8 <HAL_GPIO_Init+0x1f4>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a4b      	ldr	r2, [pc, #300]	@ (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d013      	beq.n	8001bd4 <HAL_GPIO_Init+0x1f0>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a4a      	ldr	r2, [pc, #296]	@ (8001cd8 <HAL_GPIO_Init+0x2f4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_GPIO_Init+0x1ec>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a49      	ldr	r2, [pc, #292]	@ (8001cdc <HAL_GPIO_Init+0x2f8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d007      	beq.n	8001bcc <HAL_GPIO_Init+0x1e8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a48      	ldr	r2, [pc, #288]	@ (8001ce0 <HAL_GPIO_Init+0x2fc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_GPIO_Init+0x1e4>
 8001bc4:	2305      	movs	r3, #5
 8001bc6:	e00a      	b.n	8001bde <HAL_GPIO_Init+0x1fa>
 8001bc8:	2306      	movs	r3, #6
 8001bca:	e008      	b.n	8001bde <HAL_GPIO_Init+0x1fa>
 8001bcc:	2304      	movs	r3, #4
 8001bce:	e006      	b.n	8001bde <HAL_GPIO_Init+0x1fa>
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e004      	b.n	8001bde <HAL_GPIO_Init+0x1fa>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e002      	b.n	8001bde <HAL_GPIO_Init+0x1fa>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_GPIO_Init+0x1fa>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	f002 0203 	and.w	r2, r2, #3
 8001be4:	0092      	lsls	r2, r2, #2
 8001be6:	4093      	lsls	r3, r2
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bee:	4937      	ldr	r1, [pc, #220]	@ (8001ccc <HAL_GPIO_Init+0x2e8>)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bfc:	4b39      	ldr	r3, [pc, #228]	@ (8001ce4 <HAL_GPIO_Init+0x300>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c20:	4a30      	ldr	r2, [pc, #192]	@ (8001ce4 <HAL_GPIO_Init+0x300>)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c26:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce4 <HAL_GPIO_Init+0x300>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c4a:	4a26      	ldr	r2, [pc, #152]	@ (8001ce4 <HAL_GPIO_Init+0x300>)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c50:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <HAL_GPIO_Init+0x300>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce4 <HAL_GPIO_Init+0x300>)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <HAL_GPIO_Init+0x300>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ce4 <HAL_GPIO_Init+0x300>)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f47f ae9d 	bne.w	80019f4 <HAL_GPIO_Init+0x10>
  }
}
 8001cba:	bf00      	nop
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010000 	.word	0x40010000
 8001cd0:	48000400 	.word	0x48000400
 8001cd4:	48000800 	.word	0x48000800
 8001cd8:	48000c00 	.word	0x48000c00
 8001cdc:	48001000 	.word	0x48001000
 8001ce0:	48001400 	.word	0x48001400
 8001ce4:	40010400 	.word	0x40010400

08001ce8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8001cf6:	e0bd      	b.n	8001e74 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80b0 	beq.w	8001e6e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8001d0e:	4a60      	ldr	r2, [pc, #384]	@ (8001e90 <HAL_GPIO_DeInit+0x1a8>)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	089b      	lsrs	r3, r3, #2
 8001d14:	3302      	adds	r3, #2
 8001d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	220f      	movs	r2, #15
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d36:	d01f      	beq.n	8001d78 <HAL_GPIO_DeInit+0x90>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a56      	ldr	r2, [pc, #344]	@ (8001e94 <HAL_GPIO_DeInit+0x1ac>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d019      	beq.n	8001d74 <HAL_GPIO_DeInit+0x8c>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a55      	ldr	r2, [pc, #340]	@ (8001e98 <HAL_GPIO_DeInit+0x1b0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_GPIO_DeInit+0x88>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a54      	ldr	r2, [pc, #336]	@ (8001e9c <HAL_GPIO_DeInit+0x1b4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00d      	beq.n	8001d6c <HAL_GPIO_DeInit+0x84>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a53      	ldr	r2, [pc, #332]	@ (8001ea0 <HAL_GPIO_DeInit+0x1b8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d007      	beq.n	8001d68 <HAL_GPIO_DeInit+0x80>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a52      	ldr	r2, [pc, #328]	@ (8001ea4 <HAL_GPIO_DeInit+0x1bc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d101      	bne.n	8001d64 <HAL_GPIO_DeInit+0x7c>
 8001d60:	2305      	movs	r3, #5
 8001d62:	e00a      	b.n	8001d7a <HAL_GPIO_DeInit+0x92>
 8001d64:	2306      	movs	r3, #6
 8001d66:	e008      	b.n	8001d7a <HAL_GPIO_DeInit+0x92>
 8001d68:	2304      	movs	r3, #4
 8001d6a:	e006      	b.n	8001d7a <HAL_GPIO_DeInit+0x92>
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e004      	b.n	8001d7a <HAL_GPIO_DeInit+0x92>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e002      	b.n	8001d7a <HAL_GPIO_DeInit+0x92>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_GPIO_DeInit+0x92>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	f002 0203 	and.w	r2, r2, #3
 8001d80:	0092      	lsls	r2, r2, #2
 8001d82:	4093      	lsls	r3, r2
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d132      	bne.n	8001df0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001d8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ea8 <HAL_GPIO_DeInit+0x1c0>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4945      	ldr	r1, [pc, #276]	@ (8001ea8 <HAL_GPIO_DeInit+0x1c0>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001d98:	4b43      	ldr	r3, [pc, #268]	@ (8001ea8 <HAL_GPIO_DeInit+0x1c0>)
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	4941      	ldr	r1, [pc, #260]	@ (8001ea8 <HAL_GPIO_DeInit+0x1c0>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001da6:	4b40      	ldr	r3, [pc, #256]	@ (8001ea8 <HAL_GPIO_DeInit+0x1c0>)
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	493e      	ldr	r1, [pc, #248]	@ (8001ea8 <HAL_GPIO_DeInit+0x1c0>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001db4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea8 <HAL_GPIO_DeInit+0x1c0>)
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	493a      	ldr	r1, [pc, #232]	@ (8001ea8 <HAL_GPIO_DeInit+0x1c0>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8001e90 <HAL_GPIO_DeInit+0x1a8>)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	43da      	mvns	r2, r3
 8001de2:	482b      	ldr	r0, [pc, #172]	@ (8001e90 <HAL_GPIO_DeInit+0x1a8>)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	400a      	ands	r2, r1
 8001dea:	3302      	adds	r3, #2
 8001dec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2103      	movs	r1, #3
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	08da      	lsrs	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	08d2      	lsrs	r2, r2, #3
 8001e24:	4019      	ands	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3208      	adds	r2, #8
 8001e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2103      	movs	r1, #3
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	401a      	ands	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	401a      	ands	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2103      	movs	r1, #3
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	401a      	ands	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f47f af3b 	bne.w	8001cf8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	40010000 	.word	0x40010000
 8001e94:	48000400 	.word	0x48000400
 8001e98:	48000800 	.word	0x48000800
 8001e9c:	48000c00 	.word	0x48000c00
 8001ea0:	48001000 	.word	0x48001000
 8001ea4:	48001400 	.word	0x48001400
 8001ea8:	40010400 	.word	0x40010400

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ef2:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fb2c 	bl	8000558 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40010400 	.word	0x40010400

08001f0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d141      	bne.n	8001f9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f26:	d131      	bne.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f28:	4b47      	ldr	r3, [pc, #284]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f2e:	4a46      	ldr	r2, [pc, #280]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f38:	4b43      	ldr	r3, [pc, #268]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f40:	4a41      	ldr	r2, [pc, #260]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f48:	4b40      	ldr	r3, [pc, #256]	@ (800204c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2232      	movs	r2, #50	@ 0x32
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	4a3f      	ldr	r2, [pc, #252]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	0c9b      	lsrs	r3, r3, #18
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f5e:	e002      	b.n	8001f66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f66:	4b38      	ldr	r3, [pc, #224]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f72:	d102      	bne.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f2      	bne.n	8001f60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f7a:	4b33      	ldr	r3, [pc, #204]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f86:	d158      	bne.n	800203a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e057      	b.n	800203c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f92:	4a2d      	ldr	r2, [pc, #180]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f9c:	e04d      	b.n	800203a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fa4:	d141      	bne.n	800202a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fa6:	4b28      	ldr	r3, [pc, #160]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fb2:	d131      	bne.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb4:	4b24      	ldr	r3, [pc, #144]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fba:	4a23      	ldr	r2, [pc, #140]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc4:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800204c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2232      	movs	r2, #50	@ 0x32
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	4a1c      	ldr	r2, [pc, #112]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe4:	0c9b      	lsrs	r3, r3, #18
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fea:	e002      	b.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff2:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ffe:	d102      	bne.n	8002006 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f2      	bne.n	8001fec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800200e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002012:	d112      	bne.n	800203a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e011      	b.n	800203c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800201e:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002024:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002028:	e007      	b.n	800203a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002038:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	40007000 	.word	0x40007000
 800204c:	20000208 	.word	0x20000208
 8002050:	431bde83 	.word	0x431bde83

08002054 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002058:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800205e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002062:	6093      	str	r3, [r2, #8]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40007000 	.word	0x40007000

08002074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e2fe      	b.n	8002684 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d075      	beq.n	800217e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002092:	4b97      	ldr	r3, [pc, #604]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209c:	4b94      	ldr	r3, [pc, #592]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b0c      	cmp	r3, #12
 80020aa:	d102      	bne.n	80020b2 <HAL_RCC_OscConfig+0x3e>
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_OscConfig+0x44>
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d10b      	bne.n	80020d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b8:	4b8d      	ldr	r3, [pc, #564]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d05b      	beq.n	800217c <HAL_RCC_OscConfig+0x108>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d157      	bne.n	800217c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e2d9      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d8:	d106      	bne.n	80020e8 <HAL_RCC_OscConfig+0x74>
 80020da:	4b85      	ldr	r3, [pc, #532]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a84      	ldr	r2, [pc, #528]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e01d      	b.n	8002124 <HAL_RCC_OscConfig+0xb0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0x98>
 80020f2:	4b7f      	ldr	r3, [pc, #508]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a7e      	ldr	r2, [pc, #504]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 80020f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	4b7c      	ldr	r3, [pc, #496]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a7b      	ldr	r2, [pc, #492]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e00b      	b.n	8002124 <HAL_RCC_OscConfig+0xb0>
 800210c:	4b78      	ldr	r3, [pc, #480]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a77      	ldr	r2, [pc, #476]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 8002112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b75      	ldr	r3, [pc, #468]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a74      	ldr	r2, [pc, #464]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 800211e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d013      	beq.n	8002154 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe ff22 	bl	8000f74 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7fe ff1e 	bl	8000f74 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	@ 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e29e      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002146:	4b6a      	ldr	r3, [pc, #424]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0xc0>
 8002152:	e014      	b.n	800217e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7fe ff0e 	bl	8000f74 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7fe ff0a 	bl	8000f74 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	@ 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e28a      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800216e:	4b60      	ldr	r3, [pc, #384]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0xe8>
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d075      	beq.n	8002276 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800218a:	4b59      	ldr	r3, [pc, #356]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002194:	4b56      	ldr	r3, [pc, #344]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2b0c      	cmp	r3, #12
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_OscConfig+0x136>
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d002      	beq.n	80021b0 <HAL_RCC_OscConfig+0x13c>
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d11f      	bne.n	80021f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b0:	4b4f      	ldr	r3, [pc, #316]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_OscConfig+0x154>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e25d      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4b49      	ldr	r3, [pc, #292]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	061b      	lsls	r3, r3, #24
 80021d6:	4946      	ldr	r1, [pc, #280]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021dc:	4b45      	ldr	r3, [pc, #276]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fe7b 	bl	8000edc <HAL_InitTick>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d043      	beq.n	8002274 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e249      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d023      	beq.n	8002240 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f8:	4b3d      	ldr	r3, [pc, #244]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a3c      	ldr	r2, [pc, #240]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 80021fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7fe feb6 	bl	8000f74 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220c:	f7fe feb2 	bl	8000f74 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e232      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800221e:	4b34      	ldr	r3, [pc, #208]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222a:	4b31      	ldr	r3, [pc, #196]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	061b      	lsls	r3, r3, #24
 8002238:	492d      	ldr	r1, [pc, #180]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
 800223e:	e01a      	b.n	8002276 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002240:	4b2b      	ldr	r3, [pc, #172]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2a      	ldr	r2, [pc, #168]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 8002246:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800224a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe fe92 	bl	8000f74 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002254:	f7fe fe8e 	bl	8000f74 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e20e      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002266:	4b22      	ldr	r3, [pc, #136]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x1e0>
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002274:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d041      	beq.n	8002306 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d01c      	beq.n	80022c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228a:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 800228c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002290:	4a17      	ldr	r2, [pc, #92]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229a:	f7fe fe6b 	bl	8000f74 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a2:	f7fe fe67 	bl	8000f74 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e1e7      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b4:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 80022b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0ef      	beq.n	80022a2 <HAL_RCC_OscConfig+0x22e>
 80022c2:	e020      	b.n	8002306 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ca:	4a09      	ldr	r2, [pc, #36]	@ (80022f0 <HAL_RCC_OscConfig+0x27c>)
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7fe fe4e 	bl	8000f74 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022da:	e00d      	b.n	80022f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022dc:	f7fe fe4a 	bl	8000f74 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d906      	bls.n	80022f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1ca      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	2000020c 	.word	0x2000020c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f8:	4b8c      	ldr	r3, [pc, #560]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80022fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ea      	bne.n	80022dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80a6 	beq.w	8002460 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002318:	4b84      	ldr	r3, [pc, #528]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_OscConfig+0x2b4>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x2b6>
 8002328:	2300      	movs	r3, #0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00d      	beq.n	800234a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b7f      	ldr	r3, [pc, #508]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002332:	4a7e      	ldr	r2, [pc, #504]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002338:	6593      	str	r3, [r2, #88]	@ 0x58
 800233a:	4b7c      	ldr	r3, [pc, #496]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002346:	2301      	movs	r3, #1
 8002348:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800234a:	4b79      	ldr	r3, [pc, #484]	@ (8002530 <HAL_RCC_OscConfig+0x4bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002356:	4b76      	ldr	r3, [pc, #472]	@ (8002530 <HAL_RCC_OscConfig+0x4bc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a75      	ldr	r2, [pc, #468]	@ (8002530 <HAL_RCC_OscConfig+0x4bc>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002362:	f7fe fe07 	bl	8000f74 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236a:	f7fe fe03 	bl	8000f74 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e183      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237c:	4b6c      	ldr	r3, [pc, #432]	@ (8002530 <HAL_RCC_OscConfig+0x4bc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d108      	bne.n	80023a2 <HAL_RCC_OscConfig+0x32e>
 8002390:	4b66      	ldr	r3, [pc, #408]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002396:	4a65      	ldr	r2, [pc, #404]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023a0:	e024      	b.n	80023ec <HAL_RCC_OscConfig+0x378>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d110      	bne.n	80023cc <HAL_RCC_OscConfig+0x358>
 80023aa:	4b60      	ldr	r3, [pc, #384]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b0:	4a5e      	ldr	r2, [pc, #376]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023ba:	4b5c      	ldr	r3, [pc, #368]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c0:	4a5a      	ldr	r2, [pc, #360]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023ca:	e00f      	b.n	80023ec <HAL_RCC_OscConfig+0x378>
 80023cc:	4b57      	ldr	r3, [pc, #348]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d2:	4a56      	ldr	r2, [pc, #344]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023dc:	4b53      	ldr	r3, [pc, #332]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e2:	4a52      	ldr	r2, [pc, #328]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d016      	beq.n	8002422 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7fe fdbe 	bl	8000f74 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fc:	f7fe fdba 	bl	8000f74 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e138      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002412:	4b46      	ldr	r3, [pc, #280]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ed      	beq.n	80023fc <HAL_RCC_OscConfig+0x388>
 8002420:	e015      	b.n	800244e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7fe fda7 	bl	8000f74 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe fda3 	bl	8000f74 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e121      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002440:	4b3a      	ldr	r3, [pc, #232]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1ed      	bne.n	800242a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800244e:	7ffb      	ldrb	r3, [r7, #31]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	4b35      	ldr	r3, [pc, #212]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002458:	4a34      	ldr	r2, [pc, #208]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 800245a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800245e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d03c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01c      	beq.n	80024ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002474:	4b2d      	ldr	r3, [pc, #180]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 8002476:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800247a:	4a2c      	ldr	r2, [pc, #176]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7fe fd76 	bl	8000f74 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800248c:	f7fe fd72 	bl	8000f74 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0f2      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800249e:	4b23      	ldr	r3, [pc, #140]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80024a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ef      	beq.n	800248c <HAL_RCC_OscConfig+0x418>
 80024ac:	e01b      	b.n	80024e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ae:	4b1f      	ldr	r3, [pc, #124]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024b4:	4a1d      	ldr	r2, [pc, #116]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe fd59 	bl	8000f74 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c6:	f7fe fd55 	bl	8000f74 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e0d5      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024d8:	4b14      	ldr	r3, [pc, #80]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80024da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1ef      	bne.n	80024c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80c9 	beq.w	8002682 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024f0:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	f000 8083 	beq.w	8002604 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d15e      	bne.n	80025c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b09      	ldr	r3, [pc, #36]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a08      	ldr	r2, [pc, #32]	@ (800252c <HAL_RCC_OscConfig+0x4b8>)
 800250c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe fd2f 	bl	8000f74 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002518:	e00c      	b.n	8002534 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe fd2b 	bl	8000f74 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d905      	bls.n	8002534 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e0ab      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002534:	4b55      	ldr	r3, [pc, #340]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1ec      	bne.n	800251a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002540:	4b52      	ldr	r3, [pc, #328]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	4b52      	ldr	r3, [pc, #328]	@ (8002690 <HAL_RCC_OscConfig+0x61c>)
 8002546:	4013      	ands	r3, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6a11      	ldr	r1, [r2, #32]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002550:	3a01      	subs	r2, #1
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	4311      	orrs	r1, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800255a:	0212      	lsls	r2, r2, #8
 800255c:	4311      	orrs	r1, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002562:	0852      	lsrs	r2, r2, #1
 8002564:	3a01      	subs	r2, #1
 8002566:	0552      	lsls	r2, r2, #21
 8002568:	4311      	orrs	r1, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800256e:	0852      	lsrs	r2, r2, #1
 8002570:	3a01      	subs	r2, #1
 8002572:	0652      	lsls	r2, r2, #25
 8002574:	4311      	orrs	r1, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800257a:	06d2      	lsls	r2, r2, #27
 800257c:	430a      	orrs	r2, r1
 800257e:	4943      	ldr	r1, [pc, #268]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 8002580:	4313      	orrs	r3, r2
 8002582:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002584:	4b41      	ldr	r3, [pc, #260]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a40      	ldr	r2, [pc, #256]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 800258a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800258e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002590:	4b3e      	ldr	r3, [pc, #248]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4a3d      	ldr	r2, [pc, #244]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 8002596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800259a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe fcea 	bl	8000f74 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a4:	f7fe fce6 	bl	8000f74 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e066      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b6:	4b35      	ldr	r3, [pc, #212]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x530>
 80025c2:	e05e      	b.n	8002682 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c4:	4b31      	ldr	r3, [pc, #196]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a30      	ldr	r2, [pc, #192]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 80025ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fcd0 	bl	8000f74 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fccc 	bl	8000f74 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e04c      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ea:	4b28      	ldr	r3, [pc, #160]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80025f6:	4b25      	ldr	r3, [pc, #148]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	4924      	ldr	r1, [pc, #144]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 80025fc:	4b25      	ldr	r3, [pc, #148]	@ (8002694 <HAL_RCC_OscConfig+0x620>)
 80025fe:	4013      	ands	r3, r2
 8002600:	60cb      	str	r3, [r1, #12]
 8002602:	e03e      	b.n	8002682 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e039      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002610:	4b1e      	ldr	r3, [pc, #120]	@ (800268c <HAL_RCC_OscConfig+0x618>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	429a      	cmp	r2, r3
 8002622:	d12c      	bne.n	800267e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	3b01      	subs	r3, #1
 8002630:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d123      	bne.n	800267e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002640:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d11b      	bne.n	800267e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d113      	bne.n	800267e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	3b01      	subs	r3, #1
 8002664:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d109      	bne.n	800267e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002674:	085b      	lsrs	r3, r3, #1
 8002676:	3b01      	subs	r3, #1
 8002678:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d001      	beq.n	8002682 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3720      	adds	r7, #32
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	019f800c 	.word	0x019f800c
 8002694:	feeefffc 	.word	0xfeeefffc

08002698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e11e      	b.n	80028ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b0:	4b91      	ldr	r3, [pc, #580]	@ (80028f8 <HAL_RCC_ClockConfig+0x260>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d910      	bls.n	80026e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b8e      	ldr	r3, [pc, #568]	@ (80028f8 <HAL_RCC_ClockConfig+0x260>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 020f 	bic.w	r2, r3, #15
 80026c6:	498c      	ldr	r1, [pc, #560]	@ (80028f8 <HAL_RCC_ClockConfig+0x260>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ce:	4b8a      	ldr	r3, [pc, #552]	@ (80028f8 <HAL_RCC_ClockConfig+0x260>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e106      	b.n	80028ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d073      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d129      	bne.n	8002748 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f4:	4b81      	ldr	r3, [pc, #516]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0f4      	b.n	80028ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002704:	f000 f966 	bl	80029d4 <RCC_GetSysClockFreqFromPLLSource>
 8002708:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4a7c      	ldr	r2, [pc, #496]	@ (8002900 <HAL_RCC_ClockConfig+0x268>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d93f      	bls.n	8002792 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002712:	4b7a      	ldr	r3, [pc, #488]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002726:	2b00      	cmp	r3, #0
 8002728:	d033      	beq.n	8002792 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800272e:	2b00      	cmp	r3, #0
 8002730:	d12f      	bne.n	8002792 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002732:	4b72      	ldr	r3, [pc, #456]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800273a:	4a70      	ldr	r2, [pc, #448]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 800273c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002740:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002742:	2380      	movs	r3, #128	@ 0x80
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e024      	b.n	8002792 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d107      	bne.n	8002760 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002750:	4b6a      	ldr	r3, [pc, #424]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0c6      	b.n	80028ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002760:	4b66      	ldr	r3, [pc, #408]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0be      	b.n	80028ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002770:	f000 f8ce 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 8002774:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4a61      	ldr	r2, [pc, #388]	@ (8002900 <HAL_RCC_ClockConfig+0x268>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d909      	bls.n	8002792 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800277e:	4b5f      	ldr	r3, [pc, #380]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002786:	4a5d      	ldr	r2, [pc, #372]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 8002788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800278c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002792:	4b5a      	ldr	r3, [pc, #360]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f023 0203 	bic.w	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4957      	ldr	r1, [pc, #348]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a4:	f7fe fbe6 	bl	8000f74 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ac:	f7fe fbe2 	bl	8000f74 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e095      	b.n	80028ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	4b4e      	ldr	r3, [pc, #312]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 020c 	and.w	r2, r3, #12
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d1eb      	bne.n	80027ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d023      	beq.n	8002828 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ec:	4b43      	ldr	r3, [pc, #268]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a42      	ldr	r2, [pc, #264]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 80027f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002804:	4b3d      	ldr	r3, [pc, #244]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800280c:	4a3b      	ldr	r2, [pc, #236]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 800280e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002812:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002814:	4b39      	ldr	r3, [pc, #228]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4936      	ldr	r1, [pc, #216]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
 8002826:	e008      	b.n	800283a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b80      	cmp	r3, #128	@ 0x80
 800282c:	d105      	bne.n	800283a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800282e:	4b33      	ldr	r3, [pc, #204]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4a32      	ldr	r2, [pc, #200]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 8002834:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002838:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800283a:	4b2f      	ldr	r3, [pc, #188]	@ (80028f8 <HAL_RCC_ClockConfig+0x260>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d21d      	bcs.n	8002884 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002848:	4b2b      	ldr	r3, [pc, #172]	@ (80028f8 <HAL_RCC_ClockConfig+0x260>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 020f 	bic.w	r2, r3, #15
 8002850:	4929      	ldr	r1, [pc, #164]	@ (80028f8 <HAL_RCC_ClockConfig+0x260>)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002858:	f7fe fb8c 	bl	8000f74 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7fe fb88 	bl	8000f74 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e03b      	b.n	80028ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <HAL_RCC_ClockConfig+0x260>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d1ed      	bne.n	8002860 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002890:	4b1a      	ldr	r3, [pc, #104]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4917      	ldr	r1, [pc, #92]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ae:	4b13      	ldr	r3, [pc, #76]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	490f      	ldr	r1, [pc, #60]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028c2:	f000 f825 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80028c6:	4602      	mov	r2, r0
 80028c8:	4b0c      	ldr	r3, [pc, #48]	@ (80028fc <HAL_RCC_ClockConfig+0x264>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	490c      	ldr	r1, [pc, #48]	@ (8002904 <HAL_RCC_ClockConfig+0x26c>)
 80028d4:	5ccb      	ldrb	r3, [r1, r3]
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	fa22 f303 	lsr.w	r3, r2, r3
 80028de:	4a0a      	ldr	r2, [pc, #40]	@ (8002908 <HAL_RCC_ClockConfig+0x270>)
 80028e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028e2:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <HAL_RCC_ClockConfig+0x274>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe faf8 	bl	8000edc <HAL_InitTick>
 80028ec:	4603      	mov	r3, r0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40022000 	.word	0x40022000
 80028fc:	40021000 	.word	0x40021000
 8002900:	04c4b400 	.word	0x04c4b400
 8002904:	08004f28 	.word	0x08004f28
 8002908:	20000208 	.word	0x20000208
 800290c:	2000020c 	.word	0x2000020c

08002910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002916:	4b2c      	ldr	r3, [pc, #176]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b04      	cmp	r3, #4
 8002920:	d102      	bne.n	8002928 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002922:	4b2a      	ldr	r3, [pc, #168]	@ (80029cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	e047      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002928:	4b27      	ldr	r3, [pc, #156]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b08      	cmp	r3, #8
 8002932:	d102      	bne.n	800293a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002934:	4b26      	ldr	r3, [pc, #152]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	e03e      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800293a:	4b23      	ldr	r3, [pc, #140]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d136      	bne.n	80029b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002946:	4b20      	ldr	r3, [pc, #128]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002950:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	3301      	adds	r3, #1
 800295c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d10c      	bne.n	800297e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002964:	4a1a      	ldr	r2, [pc, #104]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	4a16      	ldr	r2, [pc, #88]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800296e:	68d2      	ldr	r2, [r2, #12]
 8002970:	0a12      	lsrs	r2, r2, #8
 8002972:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	617b      	str	r3, [r7, #20]
      break;
 800297c:	e00c      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800297e:	4a13      	ldr	r2, [pc, #76]	@ (80029cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4a10      	ldr	r2, [pc, #64]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002988:	68d2      	ldr	r2, [r2, #12]
 800298a:	0a12      	lsrs	r2, r2, #8
 800298c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002990:	fb02 f303 	mul.w	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]
      break;
 8002996:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002998:	4b0b      	ldr	r3, [pc, #44]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	0e5b      	lsrs	r3, r3, #25
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	3301      	adds	r3, #1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	e001      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029b8:	693b      	ldr	r3, [r7, #16]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	00f42400 	.word	0x00f42400
 80029d0:	016e3600 	.word	0x016e3600

080029d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029da:	4b1e      	ldr	r3, [pc, #120]	@ (8002a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	3301      	adds	r3, #1
 80029f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d10c      	bne.n	8002a12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029f8:	4a17      	ldr	r2, [pc, #92]	@ (8002a58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a00:	4a14      	ldr	r2, [pc, #80]	@ (8002a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a02:	68d2      	ldr	r2, [r2, #12]
 8002a04:	0a12      	lsrs	r2, r2, #8
 8002a06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	617b      	str	r3, [r7, #20]
    break;
 8002a10:	e00c      	b.n	8002a2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a12:	4a12      	ldr	r2, [pc, #72]	@ (8002a5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a1c:	68d2      	ldr	r2, [r2, #12]
 8002a1e:	0a12      	lsrs	r2, r2, #8
 8002a20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	617b      	str	r3, [r7, #20]
    break;
 8002a2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a2c:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0e5b      	lsrs	r3, r3, #25
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	3301      	adds	r3, #1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a46:	687b      	ldr	r3, [r7, #4]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	40021000 	.word	0x40021000
 8002a58:	016e3600 	.word	0x016e3600
 8002a5c:	00f42400 	.word	0x00f42400

08002a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e09d      	b.n	8002bae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d108      	bne.n	8002a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a82:	d009      	beq.n	8002a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
 8002a8a:	e005      	b.n	8002a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fd ff76 	bl	80009a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ace:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ad8:	d902      	bls.n	8002ae0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e002      	b.n	8002ae6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ae4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002aee:	d007      	beq.n	8002b00 <HAL_SPI_Init+0xa0>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002af8:	d002      	beq.n	8002b00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b42:	ea42 0103 	orr.w	r1, r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	0c1b      	lsrs	r3, r3, #16
 8002b5c:	f003 0204 	and.w	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002b7c:	ea42 0103 	orr.w	r1, r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e01a      	b.n	8002bfe <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bde:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fd ffa3 	bl	8000b2c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c1c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d00c      	beq.n	8002c44 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c30:	d106      	bne.n	8002c40 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <HAL_SPI_TransmitReceive_DMA+0x38>
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d001      	beq.n	8002c44 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
 8002c42:	e158      	b.n	8002ef6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002c50:	887b      	ldrh	r3, [r7, #2]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e14d      	b.n	8002ef6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_SPI_TransmitReceive_DMA+0x60>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e146      	b.n	8002ef6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d003      	beq.n	8002c84 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2205      	movs	r2, #5
 8002c80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	887a      	ldrh	r2, [r7, #2]
 8002c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	887a      	ldrh	r2, [r7, #2]
 8002ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8002ccc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cd6:	d908      	bls.n	8002cea <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	e06f      	b.n	8002dca <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cf8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d04:	d126      	bne.n	8002d54 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10f      	bne.n	8002d32 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d20:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d30:	e010      	b.n	8002d54 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d40:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d5e:	d134      	bne.n	8002dca <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d6e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d111      	bne.n	8002da4 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d8e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002da2:	e012      	b.n	8002dca <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002db2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	085b      	lsrs	r3, r3, #1
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d108      	bne.n	8002de8 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dda:	4a49      	ldr	r2, [pc, #292]	@ (8002f00 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8002ddc:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	4a48      	ldr	r2, [pc, #288]	@ (8002f04 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8002de4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002de6:	e007      	b.n	8002df8 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dec:	4a46      	ldr	r2, [pc, #280]	@ (8002f08 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8002dee:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df4:	4a45      	ldr	r2, [pc, #276]	@ (8002f0c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8002df6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	4a44      	ldr	r2, [pc, #272]	@ (8002f10 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8002dfe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e04:	2200      	movs	r2, #0
 8002e06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	330c      	adds	r3, #12
 8002e12:	4619      	mov	r1, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e20:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002e22:	f7fe fb55 	bl	80014d0 <HAL_DMA_Start_IT>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00b      	beq.n	8002e44 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e30:	f043 0210 	orr.w	r2, r3, #16
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e058      	b.n	8002ef6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e60:	2200      	movs	r2, #0
 8002e62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e68:	2200      	movs	r2, #0
 8002e6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e70:	2200      	movs	r2, #0
 8002e72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e8a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e8c:	f7fe fb20 	bl	80014d0 <HAL_DMA_Start_IT>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9a:	f043 0210 	orr.w	r2, r3, #16
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e023      	b.n	8002ef6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb8:	2b40      	cmp	r3, #64	@ 0x40
 8002eba:	d007      	beq.n	8002ecc <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0220 	orr.w	r2, r2, #32
 8002ee2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0202 	orr.w	r2, r2, #2
 8002ef2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	08003565 	.word	0x08003565
 8002f04:	0800342d 	.word	0x0800342d
 8002f08:	08003581 	.word	0x08003581
 8002f0c:	080034d5 	.word	0x080034d5
 8002f10:	0800359d 	.word	0x0800359d

08002f14 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	@ 0x28
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002f20:	4b88      	ldr	r3, [pc, #544]	@ (8003144 <HAL_SPI_Abort+0x230>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a88      	ldr	r2, [pc, #544]	@ (8003148 <HAL_SPI_Abort+0x234>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0a5b      	lsrs	r3, r3, #9
 8002f2c:	2264      	movs	r2, #100	@ 0x64
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0220 	bic.w	r2, r2, #32
 8002f46:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f52:	2b80      	cmp	r3, #128	@ 0x80
 8002f54:	d117      	bne.n	8002f86 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a7c      	ldr	r2, [pc, #496]	@ (800314c <HAL_SPI_Abort+0x238>)
 8002f5a:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8002f6e:	e008      	b.n	8002f82 <HAL_SPI_Abort+0x6e>
      }
      count--;
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b07      	cmp	r3, #7
 8002f80:	d1ec      	bne.n	8002f5c <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f90:	2b40      	cmp	r3, #64	@ 0x40
 8002f92:	d117      	bne.n	8002fc4 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a6e      	ldr	r2, [pc, #440]	@ (8003150 <HAL_SPI_Abort+0x23c>)
 8002f98:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d106      	bne.n	8002fae <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8002fac:	e008      	b.n	8002fc0 <HAL_SPI_Abort+0xac>
      }
      count--;
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b07      	cmp	r3, #7
 8002fbe:	d1ec      	bne.n	8002f9a <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d141      	bne.n	8003056 <HAL_SPI_Abort+0x142>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d03d      	beq.n	8003056 <HAL_SPI_Abort+0x142>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fde:	2200      	movs	r2, #0
 8002fe0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe faed 	bl	80015c6 <HAL_DMA_Abort>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2240      	movs	r2, #64	@ 0x40
 8002ff6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0202 	bic.w	r2, r2, #2
 8003006:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003008:	f7fd ffb4 	bl	8000f74 <HAL_GetTick>
 800300c:	4603      	mov	r3, r0
 800300e:	461a      	mov	r2, r3
 8003010:	2164      	movs	r1, #100	@ 0x64
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fc6e 	bl	80038f4 <SPI_EndRxTxTransaction>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_SPI_Abort+0x110>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2240      	movs	r2, #64	@ 0x40
 8003022:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003032:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003034:	f7fd ff9e 	bl	8000f74 <HAL_GetTick>
 8003038:	4603      	mov	r3, r0
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	2364      	movs	r3, #100	@ 0x64
 800303e:	2200      	movs	r2, #0
 8003040:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 fb67 	bl	8003718 <SPI_WaitFifoStateUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_SPI_Abort+0x142>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2240      	movs	r2, #64	@ 0x40
 8003054:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d143      	bne.n	80030ec <HAL_SPI_Abort+0x1d8>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	2b00      	cmp	r3, #0
 800306a:	d03f      	beq.n	80030ec <HAL_SPI_Abort+0x1d8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	2200      	movs	r2, #0
 8003072:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe faa4 	bl	80015c6 <HAL_DMA_Abort>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_SPI_Abort+0x176>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2240      	movs	r2, #64	@ 0x40
 8003088:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003098:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800309a:	f7fd ff6b 	bl	8000f74 <HAL_GetTick>
 800309e:	4603      	mov	r3, r0
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	2364      	movs	r3, #100	@ 0x64
 80030a4:	2200      	movs	r2, #0
 80030a6:	2180      	movs	r1, #128	@ 0x80
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 faad 	bl	8003608 <SPI_WaitFlagStateUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_SPI_Abort+0x1a6>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2240      	movs	r2, #64	@ 0x40
 80030b8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 80030ba:	f7fd ff5b 	bl	8000f74 <HAL_GetTick>
 80030be:	4603      	mov	r3, r0
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	2364      	movs	r3, #100	@ 0x64
 80030c4:	2200      	movs	r2, #0
 80030c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fb24 	bl	8003718 <SPI_WaitFifoStateUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_SPI_Abort+0x1c8>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2240      	movs	r2, #64	@ 0x40
 80030da:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fe:	2b40      	cmp	r3, #64	@ 0x40
 8003100:	d102      	bne.n	8003108 <HAL_SPI_Abort+0x1f4>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e002      	b.n	800310e <HAL_SPI_Abort+0x1fa>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return errorcode;
 800313a:	7ffb      	ldrb	r3, [r7, #31]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3720      	adds	r7, #32
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20000208 	.word	0x20000208
 8003148:	057619f1 	.word	0x057619f1
 800314c:	08003a41 	.word	0x08003a41
 8003150:	08003981 	.word	0x08003981

08003154 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00f      	beq.n	8003188 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316c:	4618      	mov	r0, r3
 800316e:	f7fe fa2a 	bl	80015c6 <HAL_DMA_Abort>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317c:	f043 0210 	orr.w	r2, r3, #16
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00f      	beq.n	80031b0 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003194:	4618      	mov	r0, r3
 8003196:	f7fe fa16 	bl	80015c6 <HAL_DMA_Abort>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a4:	f043 0210 	orr.w	r2, r3, #16
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0203 	bic.w	r2, r2, #3
 80031be:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	099b      	lsrs	r3, r3, #6
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10f      	bne.n	8003218 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d004      	beq.n	8003218 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
    return;
 8003216:	e0d7      	b.n	80033c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_SPI_IRQHandler+0x66>
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	09db      	lsrs	r3, r3, #7
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d004      	beq.n	800323a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
    return;
 8003238:	e0c6      	b.n	80033c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10c      	bne.n	8003260 <HAL_SPI_IRQHandler+0x8c>
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	099b      	lsrs	r3, r3, #6
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80b4 	beq.w	80033c8 <HAL_SPI_IRQHandler+0x1f4>
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80ad 	beq.w	80033c8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d023      	beq.n	80032c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b03      	cmp	r3, #3
 8003284:	d011      	beq.n	80032aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328a:	f043 0204 	orr.w	r2, r3, #4
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	e00b      	b.n	80032c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	693b      	ldr	r3, [r7, #16]
        return;
 80032c0:	e082      	b.n	80033c8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d014      	beq.n	80032f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	0a1b      	lsrs	r3, r3, #8
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003308:	f043 0208 	orr.w	r2, r3, #8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003322:	2b00      	cmp	r3, #0
 8003324:	d04f      	beq.n	80033c6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003334:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d104      	bne.n	8003352 <HAL_SPI_IRQHandler+0x17e>
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d034      	beq.n	80033bc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0203 	bic.w	r2, r2, #3
 8003360:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003366:	2b00      	cmp	r3, #0
 8003368:	d011      	beq.n	800338e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336e:	4a18      	ldr	r2, [pc, #96]	@ (80033d0 <HAL_SPI_IRQHandler+0x1fc>)
 8003370:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe f97e 	bl	8001678 <HAL_DMA_Abort_IT>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003386:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339a:	4a0d      	ldr	r2, [pc, #52]	@ (80033d0 <HAL_SPI_IRQHandler+0x1fc>)
 800339c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe f968 	bl	8001678 <HAL_DMA_Abort_IT>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80033ba:	e003      	b.n	80033c4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7fd faab 	bl	8000918 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80033c2:	e000      	b.n	80033c6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80033c4:	bf00      	nop
    return;
 80033c6:	bf00      	nop
  }
}
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	080035dd 	.word	0x080035dd

080033d4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800341e:	b2db      	uxtb	r3, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003438:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800343a:	f7fd fd9b 	bl	8000f74 <HAL_GetTick>
 800343e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b20      	cmp	r3, #32
 800344c:	d03c      	beq.n	80034c8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0220 	bic.w	r2, r2, #32
 800345c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10d      	bne.n	8003482 <SPI_DMAReceiveCplt+0x56>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800346e:	d108      	bne.n	8003482 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0203 	bic.w	r2, r2, #3
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	e007      	b.n	8003492 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	2164      	movs	r1, #100	@ 0x64
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f9d4 	bl	8003844 <SPI_EndRxTransaction>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7fd fa29 	bl	8000918 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80034c6:	e002      	b.n	80034ce <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f7ff ff83 	bl	80033d4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034e2:	f7fd fd47 	bl	8000f74 <HAL_GetTick>
 80034e6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d030      	beq.n	8003558 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0220 	bic.w	r2, r2, #32
 8003504:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	2164      	movs	r1, #100	@ 0x64
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f9f2 	bl	80038f4 <SPI_EndRxTxTransaction>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0203 	bic.w	r2, r2, #3
 8003530:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f7fd f9e1 	bl	8000918 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003556:	e002      	b.n	800355e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7fd f9cb 	bl	80008f4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003570:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7ff ff38 	bl	80033e8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f7ff ff34 	bl	80033fc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0203 	bic.w	r2, r2, #3
 80035b8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035be:	f043 0210 	orr.w	r2, r3, #16
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7fd f9a2 	bl	8000918 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f7fd f98d 	bl	8000918 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003618:	f7fd fcac 	bl	8000f74 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	4413      	add	r3, r2
 8003626:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003628:	f7fd fca4 	bl	8000f74 <HAL_GetTick>
 800362c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800362e:	4b39      	ldr	r3, [pc, #228]	@ (8003714 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	015b      	lsls	r3, r3, #5
 8003634:	0d1b      	lsrs	r3, r3, #20
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	fb02 f303 	mul.w	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800363e:	e054      	b.n	80036ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d050      	beq.n	80036ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003648:	f7fd fc94 	bl	8000f74 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	429a      	cmp	r2, r3
 8003656:	d902      	bls.n	800365e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d13d      	bne.n	80036da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800366c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003676:	d111      	bne.n	800369c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003680:	d004      	beq.n	800368c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368a:	d107      	bne.n	800369c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800369a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036a4:	d10f      	bne.n	80036c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e017      	b.n	800370a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	bf0c      	ite	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	2300      	movne	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	429a      	cmp	r2, r3
 8003706:	d19b      	bne.n	8003640 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000208 	.word	0x20000208

08003718 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	@ 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800372a:	f7fd fc23 	bl	8000f74 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	4413      	add	r3, r2
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800373a:	f7fd fc1b 	bl	8000f74 <HAL_GetTick>
 800373e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003748:	4b3d      	ldr	r3, [pc, #244]	@ (8003840 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	00da      	lsls	r2, r3, #3
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	0d1b      	lsrs	r3, r3, #20
 8003758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003760:	e060      	b.n	8003824 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003768:	d107      	bne.n	800377a <SPI_WaitFifoStateUntilTimeout+0x62>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003778:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d050      	beq.n	8003824 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003782:	f7fd fbf7 	bl	8000f74 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378e:	429a      	cmp	r2, r3
 8003790:	d902      	bls.n	8003798 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d13d      	bne.n	8003814 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037b0:	d111      	bne.n	80037d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ba:	d004      	beq.n	80037c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c4:	d107      	bne.n	80037d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037de:	d10f      	bne.n	8003800 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e010      	b.n	8003836 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	3b01      	subs	r3, #1
 8003822:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d196      	bne.n	8003762 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3728      	adds	r7, #40	@ 0x28
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000208 	.word	0x20000208

08003844 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003858:	d111      	bne.n	800387e <SPI_EndRxTransaction+0x3a>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003862:	d004      	beq.n	800386e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800386c:	d107      	bne.n	800387e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800387c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2200      	movs	r2, #0
 8003886:	2180      	movs	r1, #128	@ 0x80
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff febd 	bl	8003608 <SPI_WaitFlagStateUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e023      	b.n	80038ec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038ac:	d11d      	bne.n	80038ea <SPI_EndRxTransaction+0xa6>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038b6:	d004      	beq.n	80038c2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c0:	d113      	bne.n	80038ea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff ff22 	bl	8003718 <SPI_WaitFifoStateUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038de:	f043 0220 	orr.w	r2, r3, #32
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e000      	b.n	80038ec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2200      	movs	r2, #0
 8003908:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f7ff ff03 	bl	8003718 <SPI_WaitFifoStateUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391c:	f043 0220 	orr.w	r2, r3, #32
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e027      	b.n	8003978 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2200      	movs	r2, #0
 8003930:	2180      	movs	r1, #128	@ 0x80
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7ff fe68 	bl	8003608 <SPI_WaitFlagStateUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003942:	f043 0220 	orr.w	r2, r3, #32
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e014      	b.n	8003978 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2200      	movs	r2, #0
 8003956:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7ff fedc 	bl	8003718 <SPI_WaitFifoStateUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e000      	b.n	8003978 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af02      	add	r7, sp, #8
 8003986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003996:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003998:	4b27      	ldr	r3, [pc, #156]	@ (8003a38 <SPI_AbortRx_ISR+0xb8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a27      	ldr	r2, [pc, #156]	@ (8003a3c <SPI_AbortRx_ISR+0xbc>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0a5b      	lsrs	r3, r3, #9
 80039a4:	2264      	movs	r2, #100	@ 0x64
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039ba:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 80039ce:	e009      	b.n	80039e4 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e0:	2b40      	cmp	r3, #64	@ 0x40
 80039e2:	d0eb      	beq.n	80039bc <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80039e4:	f7fd fac6 	bl	8000f74 <HAL_GetTick>
 80039e8:	4603      	mov	r3, r0
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	2364      	movs	r3, #100	@ 0x64
 80039ee:	2200      	movs	r2, #0
 80039f0:	2180      	movs	r1, #128	@ 0x80
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fe08 	bl	8003608 <SPI_WaitFlagStateUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2240      	movs	r2, #64	@ 0x40
 8003a02:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003a04:	f7fd fab6 	bl	8000f74 <HAL_GetTick>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2364      	movs	r3, #100	@ 0x64
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fe7f 	bl	8003718 <SPI_WaitFifoStateUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2240      	movs	r2, #64	@ 0x40
 8003a24:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2207      	movs	r2, #7
 8003a2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000208 	.word	0x20000208
 8003a3c:	057619f1 	.word	0x057619f1

08003a40 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003a48:	4b4c      	ldr	r3, [pc, #304]	@ (8003b7c <SPI_AbortTx_ISR+0x13c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a4c      	ldr	r2, [pc, #304]	@ (8003b80 <SPI_AbortTx_ISR+0x140>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	0a5b      	lsrs	r3, r3, #9
 8003a54:	2264      	movs	r2, #100	@ 0x64
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a6a:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8003a7e:	e009      	b.n	8003a94 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a90:	2b80      	cmp	r3, #128	@ 0x80
 8003a92:	d0eb      	beq.n	8003a6c <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003a94:	f7fd fa6e 	bl	8000f74 <HAL_GetTick>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2164      	movs	r1, #100	@ 0x64
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ff28 	bl	80038f4 <SPI_EndRxTxTransaction>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2240      	movs	r2, #64	@ 0x40
 8003aae:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003abe:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003ac0:	f7fd fa58 	bl	8000f74 <HAL_GetTick>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	2364      	movs	r3, #100	@ 0x64
 8003aca:	2200      	movs	r2, #0
 8003acc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff fe21 	bl	8003718 <SPI_WaitFifoStateUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2240      	movs	r2, #64	@ 0x40
 8003ae0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aec:	2b40      	cmp	r3, #64	@ 0x40
 8003aee:	d13c      	bne.n	8003b6a <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003afe:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003b12:	e009      	b.n	8003b28 <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b24:	2b40      	cmp	r3, #64	@ 0x40
 8003b26:	d0eb      	beq.n	8003b00 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003b28:	f7fd fa24 	bl	8000f74 <HAL_GetTick>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	2364      	movs	r3, #100	@ 0x64
 8003b32:	2200      	movs	r2, #0
 8003b34:	2180      	movs	r1, #128	@ 0x80
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fd66 	bl	8003608 <SPI_WaitFlagStateUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2240      	movs	r2, #64	@ 0x40
 8003b46:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003b48:	f7fd fa14 	bl	8000f74 <HAL_GetTick>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2364      	movs	r3, #100	@ 0x64
 8003b52:	2200      	movs	r2, #0
 8003b54:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fddd 	bl	8003718 <SPI_WaitFifoStateUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2240      	movs	r2, #64	@ 0x40
 8003b68:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2207      	movs	r2, #7
 8003b6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000208 	.word	0x20000208
 8003b80:	057619f1 	.word	0x057619f1

08003b84 <rand>:
 8003b84:	4b16      	ldr	r3, [pc, #88]	@ (8003be0 <rand+0x5c>)
 8003b86:	b510      	push	{r4, lr}
 8003b88:	681c      	ldr	r4, [r3, #0]
 8003b8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003b8c:	b9b3      	cbnz	r3, 8003bbc <rand+0x38>
 8003b8e:	2018      	movs	r0, #24
 8003b90:	f000 fa42 	bl	8004018 <malloc>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6320      	str	r0, [r4, #48]	@ 0x30
 8003b98:	b920      	cbnz	r0, 8003ba4 <rand+0x20>
 8003b9a:	4b12      	ldr	r3, [pc, #72]	@ (8003be4 <rand+0x60>)
 8003b9c:	4812      	ldr	r0, [pc, #72]	@ (8003be8 <rand+0x64>)
 8003b9e:	2152      	movs	r1, #82	@ 0x52
 8003ba0:	f000 f9d2 	bl	8003f48 <__assert_func>
 8003ba4:	4911      	ldr	r1, [pc, #68]	@ (8003bec <rand+0x68>)
 8003ba6:	4b12      	ldr	r3, [pc, #72]	@ (8003bf0 <rand+0x6c>)
 8003ba8:	e9c0 1300 	strd	r1, r3, [r0]
 8003bac:	4b11      	ldr	r3, [pc, #68]	@ (8003bf4 <rand+0x70>)
 8003bae:	6083      	str	r3, [r0, #8]
 8003bb0:	230b      	movs	r3, #11
 8003bb2:	8183      	strh	r3, [r0, #12]
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003bbc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003bbe:	480e      	ldr	r0, [pc, #56]	@ (8003bf8 <rand+0x74>)
 8003bc0:	690b      	ldr	r3, [r1, #16]
 8003bc2:	694c      	ldr	r4, [r1, #20]
 8003bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003bfc <rand+0x78>)
 8003bc6:	4358      	muls	r0, r3
 8003bc8:	fb02 0004 	mla	r0, r2, r4, r0
 8003bcc:	fba3 3202 	umull	r3, r2, r3, r2
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	eb40 0002 	adc.w	r0, r0, r2
 8003bd6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003bda:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003bde:	bd10      	pop	{r4, pc}
 8003be0:	20000220 	.word	0x20000220
 8003be4:	08004f38 	.word	0x08004f38
 8003be8:	08004f4f 	.word	0x08004f4f
 8003bec:	abcd330e 	.word	0xabcd330e
 8003bf0:	e66d1234 	.word	0xe66d1234
 8003bf4:	0005deec 	.word	0x0005deec
 8003bf8:	5851f42d 	.word	0x5851f42d
 8003bfc:	4c957f2d 	.word	0x4c957f2d

08003c00 <std>:
 8003c00:	2300      	movs	r3, #0
 8003c02:	b510      	push	{r4, lr}
 8003c04:	4604      	mov	r4, r0
 8003c06:	e9c0 3300 	strd	r3, r3, [r0]
 8003c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c0e:	6083      	str	r3, [r0, #8]
 8003c10:	8181      	strh	r1, [r0, #12]
 8003c12:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c14:	81c2      	strh	r2, [r0, #14]
 8003c16:	6183      	str	r3, [r0, #24]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	2208      	movs	r2, #8
 8003c1c:	305c      	adds	r0, #92	@ 0x5c
 8003c1e:	f000 f916 	bl	8003e4e <memset>
 8003c22:	4b0d      	ldr	r3, [pc, #52]	@ (8003c58 <std+0x58>)
 8003c24:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <std+0x5c>)
 8003c28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c60 <std+0x60>)
 8003c2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c64 <std+0x64>)
 8003c30:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c32:	4b0d      	ldr	r3, [pc, #52]	@ (8003c68 <std+0x68>)
 8003c34:	6224      	str	r4, [r4, #32]
 8003c36:	429c      	cmp	r4, r3
 8003c38:	d006      	beq.n	8003c48 <std+0x48>
 8003c3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c3e:	4294      	cmp	r4, r2
 8003c40:	d002      	beq.n	8003c48 <std+0x48>
 8003c42:	33d0      	adds	r3, #208	@ 0xd0
 8003c44:	429c      	cmp	r4, r3
 8003c46:	d105      	bne.n	8003c54 <std+0x54>
 8003c48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c50:	f000 b976 	b.w	8003f40 <__retarget_lock_init_recursive>
 8003c54:	bd10      	pop	{r4, pc}
 8003c56:	bf00      	nop
 8003c58:	08003dc9 	.word	0x08003dc9
 8003c5c:	08003deb 	.word	0x08003deb
 8003c60:	08003e23 	.word	0x08003e23
 8003c64:	08003e47 	.word	0x08003e47
 8003c68:	20000604 	.word	0x20000604

08003c6c <stdio_exit_handler>:
 8003c6c:	4a02      	ldr	r2, [pc, #8]	@ (8003c78 <stdio_exit_handler+0xc>)
 8003c6e:	4903      	ldr	r1, [pc, #12]	@ (8003c7c <stdio_exit_handler+0x10>)
 8003c70:	4803      	ldr	r0, [pc, #12]	@ (8003c80 <stdio_exit_handler+0x14>)
 8003c72:	f000 b869 	b.w	8003d48 <_fwalk_sglue>
 8003c76:	bf00      	nop
 8003c78:	20000214 	.word	0x20000214
 8003c7c:	08004855 	.word	0x08004855
 8003c80:	20000224 	.word	0x20000224

08003c84 <cleanup_stdio>:
 8003c84:	6841      	ldr	r1, [r0, #4]
 8003c86:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb8 <cleanup_stdio+0x34>)
 8003c88:	4299      	cmp	r1, r3
 8003c8a:	b510      	push	{r4, lr}
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	d001      	beq.n	8003c94 <cleanup_stdio+0x10>
 8003c90:	f000 fde0 	bl	8004854 <_fflush_r>
 8003c94:	68a1      	ldr	r1, [r4, #8]
 8003c96:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <cleanup_stdio+0x38>)
 8003c98:	4299      	cmp	r1, r3
 8003c9a:	d002      	beq.n	8003ca2 <cleanup_stdio+0x1e>
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f000 fdd9 	bl	8004854 <_fflush_r>
 8003ca2:	68e1      	ldr	r1, [r4, #12]
 8003ca4:	4b06      	ldr	r3, [pc, #24]	@ (8003cc0 <cleanup_stdio+0x3c>)
 8003ca6:	4299      	cmp	r1, r3
 8003ca8:	d004      	beq.n	8003cb4 <cleanup_stdio+0x30>
 8003caa:	4620      	mov	r0, r4
 8003cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cb0:	f000 bdd0 	b.w	8004854 <_fflush_r>
 8003cb4:	bd10      	pop	{r4, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000604 	.word	0x20000604
 8003cbc:	2000066c 	.word	0x2000066c
 8003cc0:	200006d4 	.word	0x200006d4

08003cc4 <global_stdio_init.part.0>:
 8003cc4:	b510      	push	{r4, lr}
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <global_stdio_init.part.0+0x30>)
 8003cc8:	4c0b      	ldr	r4, [pc, #44]	@ (8003cf8 <global_stdio_init.part.0+0x34>)
 8003cca:	4a0c      	ldr	r2, [pc, #48]	@ (8003cfc <global_stdio_init.part.0+0x38>)
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	4620      	mov	r0, r4
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2104      	movs	r1, #4
 8003cd4:	f7ff ff94 	bl	8003c00 <std>
 8003cd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003cdc:	2201      	movs	r2, #1
 8003cde:	2109      	movs	r1, #9
 8003ce0:	f7ff ff8e 	bl	8003c00 <std>
 8003ce4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ce8:	2202      	movs	r2, #2
 8003cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cee:	2112      	movs	r1, #18
 8003cf0:	f7ff bf86 	b.w	8003c00 <std>
 8003cf4:	2000073c 	.word	0x2000073c
 8003cf8:	20000604 	.word	0x20000604
 8003cfc:	08003c6d 	.word	0x08003c6d

08003d00 <__sfp_lock_acquire>:
 8003d00:	4801      	ldr	r0, [pc, #4]	@ (8003d08 <__sfp_lock_acquire+0x8>)
 8003d02:	f000 b91e 	b.w	8003f42 <__retarget_lock_acquire_recursive>
 8003d06:	bf00      	nop
 8003d08:	20000745 	.word	0x20000745

08003d0c <__sfp_lock_release>:
 8003d0c:	4801      	ldr	r0, [pc, #4]	@ (8003d14 <__sfp_lock_release+0x8>)
 8003d0e:	f000 b919 	b.w	8003f44 <__retarget_lock_release_recursive>
 8003d12:	bf00      	nop
 8003d14:	20000745 	.word	0x20000745

08003d18 <__sinit>:
 8003d18:	b510      	push	{r4, lr}
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	f7ff fff0 	bl	8003d00 <__sfp_lock_acquire>
 8003d20:	6a23      	ldr	r3, [r4, #32]
 8003d22:	b11b      	cbz	r3, 8003d2c <__sinit+0x14>
 8003d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d28:	f7ff bff0 	b.w	8003d0c <__sfp_lock_release>
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <__sinit+0x28>)
 8003d2e:	6223      	str	r3, [r4, #32]
 8003d30:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <__sinit+0x2c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f5      	bne.n	8003d24 <__sinit+0xc>
 8003d38:	f7ff ffc4 	bl	8003cc4 <global_stdio_init.part.0>
 8003d3c:	e7f2      	b.n	8003d24 <__sinit+0xc>
 8003d3e:	bf00      	nop
 8003d40:	08003c85 	.word	0x08003c85
 8003d44:	2000073c 	.word	0x2000073c

08003d48 <_fwalk_sglue>:
 8003d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d4c:	4607      	mov	r7, r0
 8003d4e:	4688      	mov	r8, r1
 8003d50:	4614      	mov	r4, r2
 8003d52:	2600      	movs	r6, #0
 8003d54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d58:	f1b9 0901 	subs.w	r9, r9, #1
 8003d5c:	d505      	bpl.n	8003d6a <_fwalk_sglue+0x22>
 8003d5e:	6824      	ldr	r4, [r4, #0]
 8003d60:	2c00      	cmp	r4, #0
 8003d62:	d1f7      	bne.n	8003d54 <_fwalk_sglue+0xc>
 8003d64:	4630      	mov	r0, r6
 8003d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d6a:	89ab      	ldrh	r3, [r5, #12]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d907      	bls.n	8003d80 <_fwalk_sglue+0x38>
 8003d70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d74:	3301      	adds	r3, #1
 8003d76:	d003      	beq.n	8003d80 <_fwalk_sglue+0x38>
 8003d78:	4629      	mov	r1, r5
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	47c0      	blx	r8
 8003d7e:	4306      	orrs	r6, r0
 8003d80:	3568      	adds	r5, #104	@ 0x68
 8003d82:	e7e9      	b.n	8003d58 <_fwalk_sglue+0x10>

08003d84 <siprintf>:
 8003d84:	b40e      	push	{r1, r2, r3}
 8003d86:	b510      	push	{r4, lr}
 8003d88:	b09d      	sub	sp, #116	@ 0x74
 8003d8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003d8c:	9002      	str	r0, [sp, #8]
 8003d8e:	9006      	str	r0, [sp, #24]
 8003d90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003d94:	480a      	ldr	r0, [pc, #40]	@ (8003dc0 <siprintf+0x3c>)
 8003d96:	9107      	str	r1, [sp, #28]
 8003d98:	9104      	str	r1, [sp, #16]
 8003d9a:	490a      	ldr	r1, [pc, #40]	@ (8003dc4 <siprintf+0x40>)
 8003d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003da0:	9105      	str	r1, [sp, #20]
 8003da2:	2400      	movs	r4, #0
 8003da4:	a902      	add	r1, sp, #8
 8003da6:	6800      	ldr	r0, [r0, #0]
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003dac:	f000 fa46 	bl	800423c <_svfiprintf_r>
 8003db0:	9b02      	ldr	r3, [sp, #8]
 8003db2:	701c      	strb	r4, [r3, #0]
 8003db4:	b01d      	add	sp, #116	@ 0x74
 8003db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dba:	b003      	add	sp, #12
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000220 	.word	0x20000220
 8003dc4:	ffff0208 	.word	0xffff0208

08003dc8 <__sread>:
 8003dc8:	b510      	push	{r4, lr}
 8003dca:	460c      	mov	r4, r1
 8003dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd0:	f000 f868 	bl	8003ea4 <_read_r>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	bfab      	itete	ge
 8003dd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003dda:	89a3      	ldrhlt	r3, [r4, #12]
 8003ddc:	181b      	addge	r3, r3, r0
 8003dde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003de2:	bfac      	ite	ge
 8003de4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003de6:	81a3      	strhlt	r3, [r4, #12]
 8003de8:	bd10      	pop	{r4, pc}

08003dea <__swrite>:
 8003dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dee:	461f      	mov	r7, r3
 8003df0:	898b      	ldrh	r3, [r1, #12]
 8003df2:	05db      	lsls	r3, r3, #23
 8003df4:	4605      	mov	r5, r0
 8003df6:	460c      	mov	r4, r1
 8003df8:	4616      	mov	r6, r2
 8003dfa:	d505      	bpl.n	8003e08 <__swrite+0x1e>
 8003dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e00:	2302      	movs	r3, #2
 8003e02:	2200      	movs	r2, #0
 8003e04:	f000 f83c 	bl	8003e80 <_lseek_r>
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e12:	81a3      	strh	r3, [r4, #12]
 8003e14:	4632      	mov	r2, r6
 8003e16:	463b      	mov	r3, r7
 8003e18:	4628      	mov	r0, r5
 8003e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e1e:	f000 b853 	b.w	8003ec8 <_write_r>

08003e22 <__sseek>:
 8003e22:	b510      	push	{r4, lr}
 8003e24:	460c      	mov	r4, r1
 8003e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2a:	f000 f829 	bl	8003e80 <_lseek_r>
 8003e2e:	1c43      	adds	r3, r0, #1
 8003e30:	89a3      	ldrh	r3, [r4, #12]
 8003e32:	bf15      	itete	ne
 8003e34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e3e:	81a3      	strheq	r3, [r4, #12]
 8003e40:	bf18      	it	ne
 8003e42:	81a3      	strhne	r3, [r4, #12]
 8003e44:	bd10      	pop	{r4, pc}

08003e46 <__sclose>:
 8003e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4a:	f000 b809 	b.w	8003e60 <_close_r>

08003e4e <memset>:
 8003e4e:	4402      	add	r2, r0
 8003e50:	4603      	mov	r3, r0
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d100      	bne.n	8003e58 <memset+0xa>
 8003e56:	4770      	bx	lr
 8003e58:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5c:	e7f9      	b.n	8003e52 <memset+0x4>
	...

08003e60 <_close_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	4d06      	ldr	r5, [pc, #24]	@ (8003e7c <_close_r+0x1c>)
 8003e64:	2300      	movs	r3, #0
 8003e66:	4604      	mov	r4, r0
 8003e68:	4608      	mov	r0, r1
 8003e6a:	602b      	str	r3, [r5, #0]
 8003e6c:	f7fc ff3b 	bl	8000ce6 <_close>
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	d102      	bne.n	8003e7a <_close_r+0x1a>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	b103      	cbz	r3, 8003e7a <_close_r+0x1a>
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	20000740 	.word	0x20000740

08003e80 <_lseek_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4d07      	ldr	r5, [pc, #28]	@ (8003ea0 <_lseek_r+0x20>)
 8003e84:	4604      	mov	r4, r0
 8003e86:	4608      	mov	r0, r1
 8003e88:	4611      	mov	r1, r2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	602a      	str	r2, [r5, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f7fc ff50 	bl	8000d34 <_lseek>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_lseek_r+0x1e>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_lseek_r+0x1e>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	20000740 	.word	0x20000740

08003ea4 <_read_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	4d07      	ldr	r5, [pc, #28]	@ (8003ec4 <_read_r+0x20>)
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	4608      	mov	r0, r1
 8003eac:	4611      	mov	r1, r2
 8003eae:	2200      	movs	r2, #0
 8003eb0:	602a      	str	r2, [r5, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f7fc fede 	bl	8000c74 <_read>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_read_r+0x1e>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_read_r+0x1e>
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	20000740 	.word	0x20000740

08003ec8 <_write_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4d07      	ldr	r5, [pc, #28]	@ (8003ee8 <_write_r+0x20>)
 8003ecc:	4604      	mov	r4, r0
 8003ece:	4608      	mov	r0, r1
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	602a      	str	r2, [r5, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f7fc fee9 	bl	8000cae <_write>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_write_r+0x1e>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_write_r+0x1e>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	20000740 	.word	0x20000740

08003eec <__errno>:
 8003eec:	4b01      	ldr	r3, [pc, #4]	@ (8003ef4 <__errno+0x8>)
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000220 	.word	0x20000220

08003ef8 <__libc_init_array>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4d0d      	ldr	r5, [pc, #52]	@ (8003f30 <__libc_init_array+0x38>)
 8003efc:	4c0d      	ldr	r4, [pc, #52]	@ (8003f34 <__libc_init_array+0x3c>)
 8003efe:	1b64      	subs	r4, r4, r5
 8003f00:	10a4      	asrs	r4, r4, #2
 8003f02:	2600      	movs	r6, #0
 8003f04:	42a6      	cmp	r6, r4
 8003f06:	d109      	bne.n	8003f1c <__libc_init_array+0x24>
 8003f08:	4d0b      	ldr	r5, [pc, #44]	@ (8003f38 <__libc_init_array+0x40>)
 8003f0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003f3c <__libc_init_array+0x44>)
 8003f0c:	f000 ffee 	bl	8004eec <_init>
 8003f10:	1b64      	subs	r4, r4, r5
 8003f12:	10a4      	asrs	r4, r4, #2
 8003f14:	2600      	movs	r6, #0
 8003f16:	42a6      	cmp	r6, r4
 8003f18:	d105      	bne.n	8003f26 <__libc_init_array+0x2e>
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f20:	4798      	blx	r3
 8003f22:	3601      	adds	r6, #1
 8003f24:	e7ee      	b.n	8003f04 <__libc_init_array+0xc>
 8003f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f2a:	4798      	blx	r3
 8003f2c:	3601      	adds	r6, #1
 8003f2e:	e7f2      	b.n	8003f16 <__libc_init_array+0x1e>
 8003f30:	08005020 	.word	0x08005020
 8003f34:	08005020 	.word	0x08005020
 8003f38:	08005020 	.word	0x08005020
 8003f3c:	08005024 	.word	0x08005024

08003f40 <__retarget_lock_init_recursive>:
 8003f40:	4770      	bx	lr

08003f42 <__retarget_lock_acquire_recursive>:
 8003f42:	4770      	bx	lr

08003f44 <__retarget_lock_release_recursive>:
 8003f44:	4770      	bx	lr
	...

08003f48 <__assert_func>:
 8003f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f4a:	4614      	mov	r4, r2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b09      	ldr	r3, [pc, #36]	@ (8003f74 <__assert_func+0x2c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4605      	mov	r5, r0
 8003f54:	68d8      	ldr	r0, [r3, #12]
 8003f56:	b14c      	cbz	r4, 8003f6c <__assert_func+0x24>
 8003f58:	4b07      	ldr	r3, [pc, #28]	@ (8003f78 <__assert_func+0x30>)
 8003f5a:	9100      	str	r1, [sp, #0]
 8003f5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f60:	4906      	ldr	r1, [pc, #24]	@ (8003f7c <__assert_func+0x34>)
 8003f62:	462b      	mov	r3, r5
 8003f64:	f000 fc9e 	bl	80048a4 <fiprintf>
 8003f68:	f000 fce6 	bl	8004938 <abort>
 8003f6c:	4b04      	ldr	r3, [pc, #16]	@ (8003f80 <__assert_func+0x38>)
 8003f6e:	461c      	mov	r4, r3
 8003f70:	e7f3      	b.n	8003f5a <__assert_func+0x12>
 8003f72:	bf00      	nop
 8003f74:	20000220 	.word	0x20000220
 8003f78:	08004fa7 	.word	0x08004fa7
 8003f7c:	08004fb4 	.word	0x08004fb4
 8003f80:	08004fe2 	.word	0x08004fe2

08003f84 <_free_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4605      	mov	r5, r0
 8003f88:	2900      	cmp	r1, #0
 8003f8a:	d041      	beq.n	8004010 <_free_r+0x8c>
 8003f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f90:	1f0c      	subs	r4, r1, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	bfb8      	it	lt
 8003f96:	18e4      	addlt	r4, r4, r3
 8003f98:	f000 f8e8 	bl	800416c <__malloc_lock>
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004014 <_free_r+0x90>)
 8003f9e:	6813      	ldr	r3, [r2, #0]
 8003fa0:	b933      	cbnz	r3, 8003fb0 <_free_r+0x2c>
 8003fa2:	6063      	str	r3, [r4, #4]
 8003fa4:	6014      	str	r4, [r2, #0]
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fac:	f000 b8e4 	b.w	8004178 <__malloc_unlock>
 8003fb0:	42a3      	cmp	r3, r4
 8003fb2:	d908      	bls.n	8003fc6 <_free_r+0x42>
 8003fb4:	6820      	ldr	r0, [r4, #0]
 8003fb6:	1821      	adds	r1, r4, r0
 8003fb8:	428b      	cmp	r3, r1
 8003fba:	bf01      	itttt	eq
 8003fbc:	6819      	ldreq	r1, [r3, #0]
 8003fbe:	685b      	ldreq	r3, [r3, #4]
 8003fc0:	1809      	addeq	r1, r1, r0
 8003fc2:	6021      	streq	r1, [r4, #0]
 8003fc4:	e7ed      	b.n	8003fa2 <_free_r+0x1e>
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	b10b      	cbz	r3, 8003fd0 <_free_r+0x4c>
 8003fcc:	42a3      	cmp	r3, r4
 8003fce:	d9fa      	bls.n	8003fc6 <_free_r+0x42>
 8003fd0:	6811      	ldr	r1, [r2, #0]
 8003fd2:	1850      	adds	r0, r2, r1
 8003fd4:	42a0      	cmp	r0, r4
 8003fd6:	d10b      	bne.n	8003ff0 <_free_r+0x6c>
 8003fd8:	6820      	ldr	r0, [r4, #0]
 8003fda:	4401      	add	r1, r0
 8003fdc:	1850      	adds	r0, r2, r1
 8003fde:	4283      	cmp	r3, r0
 8003fe0:	6011      	str	r1, [r2, #0]
 8003fe2:	d1e0      	bne.n	8003fa6 <_free_r+0x22>
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	6053      	str	r3, [r2, #4]
 8003fea:	4408      	add	r0, r1
 8003fec:	6010      	str	r0, [r2, #0]
 8003fee:	e7da      	b.n	8003fa6 <_free_r+0x22>
 8003ff0:	d902      	bls.n	8003ff8 <_free_r+0x74>
 8003ff2:	230c      	movs	r3, #12
 8003ff4:	602b      	str	r3, [r5, #0]
 8003ff6:	e7d6      	b.n	8003fa6 <_free_r+0x22>
 8003ff8:	6820      	ldr	r0, [r4, #0]
 8003ffa:	1821      	adds	r1, r4, r0
 8003ffc:	428b      	cmp	r3, r1
 8003ffe:	bf04      	itt	eq
 8004000:	6819      	ldreq	r1, [r3, #0]
 8004002:	685b      	ldreq	r3, [r3, #4]
 8004004:	6063      	str	r3, [r4, #4]
 8004006:	bf04      	itt	eq
 8004008:	1809      	addeq	r1, r1, r0
 800400a:	6021      	streq	r1, [r4, #0]
 800400c:	6054      	str	r4, [r2, #4]
 800400e:	e7ca      	b.n	8003fa6 <_free_r+0x22>
 8004010:	bd38      	pop	{r3, r4, r5, pc}
 8004012:	bf00      	nop
 8004014:	2000074c 	.word	0x2000074c

08004018 <malloc>:
 8004018:	4b02      	ldr	r3, [pc, #8]	@ (8004024 <malloc+0xc>)
 800401a:	4601      	mov	r1, r0
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	f000 b825 	b.w	800406c <_malloc_r>
 8004022:	bf00      	nop
 8004024:	20000220 	.word	0x20000220

08004028 <sbrk_aligned>:
 8004028:	b570      	push	{r4, r5, r6, lr}
 800402a:	4e0f      	ldr	r6, [pc, #60]	@ (8004068 <sbrk_aligned+0x40>)
 800402c:	460c      	mov	r4, r1
 800402e:	6831      	ldr	r1, [r6, #0]
 8004030:	4605      	mov	r5, r0
 8004032:	b911      	cbnz	r1, 800403a <sbrk_aligned+0x12>
 8004034:	f000 fc62 	bl	80048fc <_sbrk_r>
 8004038:	6030      	str	r0, [r6, #0]
 800403a:	4621      	mov	r1, r4
 800403c:	4628      	mov	r0, r5
 800403e:	f000 fc5d 	bl	80048fc <_sbrk_r>
 8004042:	1c43      	adds	r3, r0, #1
 8004044:	d103      	bne.n	800404e <sbrk_aligned+0x26>
 8004046:	f04f 34ff 	mov.w	r4, #4294967295
 800404a:	4620      	mov	r0, r4
 800404c:	bd70      	pop	{r4, r5, r6, pc}
 800404e:	1cc4      	adds	r4, r0, #3
 8004050:	f024 0403 	bic.w	r4, r4, #3
 8004054:	42a0      	cmp	r0, r4
 8004056:	d0f8      	beq.n	800404a <sbrk_aligned+0x22>
 8004058:	1a21      	subs	r1, r4, r0
 800405a:	4628      	mov	r0, r5
 800405c:	f000 fc4e 	bl	80048fc <_sbrk_r>
 8004060:	3001      	adds	r0, #1
 8004062:	d1f2      	bne.n	800404a <sbrk_aligned+0x22>
 8004064:	e7ef      	b.n	8004046 <sbrk_aligned+0x1e>
 8004066:	bf00      	nop
 8004068:	20000748 	.word	0x20000748

0800406c <_malloc_r>:
 800406c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004070:	1ccd      	adds	r5, r1, #3
 8004072:	f025 0503 	bic.w	r5, r5, #3
 8004076:	3508      	adds	r5, #8
 8004078:	2d0c      	cmp	r5, #12
 800407a:	bf38      	it	cc
 800407c:	250c      	movcc	r5, #12
 800407e:	2d00      	cmp	r5, #0
 8004080:	4606      	mov	r6, r0
 8004082:	db01      	blt.n	8004088 <_malloc_r+0x1c>
 8004084:	42a9      	cmp	r1, r5
 8004086:	d904      	bls.n	8004092 <_malloc_r+0x26>
 8004088:	230c      	movs	r3, #12
 800408a:	6033      	str	r3, [r6, #0]
 800408c:	2000      	movs	r0, #0
 800408e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004092:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004168 <_malloc_r+0xfc>
 8004096:	f000 f869 	bl	800416c <__malloc_lock>
 800409a:	f8d8 3000 	ldr.w	r3, [r8]
 800409e:	461c      	mov	r4, r3
 80040a0:	bb44      	cbnz	r4, 80040f4 <_malloc_r+0x88>
 80040a2:	4629      	mov	r1, r5
 80040a4:	4630      	mov	r0, r6
 80040a6:	f7ff ffbf 	bl	8004028 <sbrk_aligned>
 80040aa:	1c43      	adds	r3, r0, #1
 80040ac:	4604      	mov	r4, r0
 80040ae:	d158      	bne.n	8004162 <_malloc_r+0xf6>
 80040b0:	f8d8 4000 	ldr.w	r4, [r8]
 80040b4:	4627      	mov	r7, r4
 80040b6:	2f00      	cmp	r7, #0
 80040b8:	d143      	bne.n	8004142 <_malloc_r+0xd6>
 80040ba:	2c00      	cmp	r4, #0
 80040bc:	d04b      	beq.n	8004156 <_malloc_r+0xea>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	4639      	mov	r1, r7
 80040c2:	4630      	mov	r0, r6
 80040c4:	eb04 0903 	add.w	r9, r4, r3
 80040c8:	f000 fc18 	bl	80048fc <_sbrk_r>
 80040cc:	4581      	cmp	r9, r0
 80040ce:	d142      	bne.n	8004156 <_malloc_r+0xea>
 80040d0:	6821      	ldr	r1, [r4, #0]
 80040d2:	1a6d      	subs	r5, r5, r1
 80040d4:	4629      	mov	r1, r5
 80040d6:	4630      	mov	r0, r6
 80040d8:	f7ff ffa6 	bl	8004028 <sbrk_aligned>
 80040dc:	3001      	adds	r0, #1
 80040de:	d03a      	beq.n	8004156 <_malloc_r+0xea>
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	442b      	add	r3, r5
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	f8d8 3000 	ldr.w	r3, [r8]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	bb62      	cbnz	r2, 8004148 <_malloc_r+0xdc>
 80040ee:	f8c8 7000 	str.w	r7, [r8]
 80040f2:	e00f      	b.n	8004114 <_malloc_r+0xa8>
 80040f4:	6822      	ldr	r2, [r4, #0]
 80040f6:	1b52      	subs	r2, r2, r5
 80040f8:	d420      	bmi.n	800413c <_malloc_r+0xd0>
 80040fa:	2a0b      	cmp	r2, #11
 80040fc:	d917      	bls.n	800412e <_malloc_r+0xc2>
 80040fe:	1961      	adds	r1, r4, r5
 8004100:	42a3      	cmp	r3, r4
 8004102:	6025      	str	r5, [r4, #0]
 8004104:	bf18      	it	ne
 8004106:	6059      	strne	r1, [r3, #4]
 8004108:	6863      	ldr	r3, [r4, #4]
 800410a:	bf08      	it	eq
 800410c:	f8c8 1000 	streq.w	r1, [r8]
 8004110:	5162      	str	r2, [r4, r5]
 8004112:	604b      	str	r3, [r1, #4]
 8004114:	4630      	mov	r0, r6
 8004116:	f000 f82f 	bl	8004178 <__malloc_unlock>
 800411a:	f104 000b 	add.w	r0, r4, #11
 800411e:	1d23      	adds	r3, r4, #4
 8004120:	f020 0007 	bic.w	r0, r0, #7
 8004124:	1ac2      	subs	r2, r0, r3
 8004126:	bf1c      	itt	ne
 8004128:	1a1b      	subne	r3, r3, r0
 800412a:	50a3      	strne	r3, [r4, r2]
 800412c:	e7af      	b.n	800408e <_malloc_r+0x22>
 800412e:	6862      	ldr	r2, [r4, #4]
 8004130:	42a3      	cmp	r3, r4
 8004132:	bf0c      	ite	eq
 8004134:	f8c8 2000 	streq.w	r2, [r8]
 8004138:	605a      	strne	r2, [r3, #4]
 800413a:	e7eb      	b.n	8004114 <_malloc_r+0xa8>
 800413c:	4623      	mov	r3, r4
 800413e:	6864      	ldr	r4, [r4, #4]
 8004140:	e7ae      	b.n	80040a0 <_malloc_r+0x34>
 8004142:	463c      	mov	r4, r7
 8004144:	687f      	ldr	r7, [r7, #4]
 8004146:	e7b6      	b.n	80040b6 <_malloc_r+0x4a>
 8004148:	461a      	mov	r2, r3
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	42a3      	cmp	r3, r4
 800414e:	d1fb      	bne.n	8004148 <_malloc_r+0xdc>
 8004150:	2300      	movs	r3, #0
 8004152:	6053      	str	r3, [r2, #4]
 8004154:	e7de      	b.n	8004114 <_malloc_r+0xa8>
 8004156:	230c      	movs	r3, #12
 8004158:	6033      	str	r3, [r6, #0]
 800415a:	4630      	mov	r0, r6
 800415c:	f000 f80c 	bl	8004178 <__malloc_unlock>
 8004160:	e794      	b.n	800408c <_malloc_r+0x20>
 8004162:	6005      	str	r5, [r0, #0]
 8004164:	e7d6      	b.n	8004114 <_malloc_r+0xa8>
 8004166:	bf00      	nop
 8004168:	2000074c 	.word	0x2000074c

0800416c <__malloc_lock>:
 800416c:	4801      	ldr	r0, [pc, #4]	@ (8004174 <__malloc_lock+0x8>)
 800416e:	f7ff bee8 	b.w	8003f42 <__retarget_lock_acquire_recursive>
 8004172:	bf00      	nop
 8004174:	20000744 	.word	0x20000744

08004178 <__malloc_unlock>:
 8004178:	4801      	ldr	r0, [pc, #4]	@ (8004180 <__malloc_unlock+0x8>)
 800417a:	f7ff bee3 	b.w	8003f44 <__retarget_lock_release_recursive>
 800417e:	bf00      	nop
 8004180:	20000744 	.word	0x20000744

08004184 <__ssputs_r>:
 8004184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004188:	688e      	ldr	r6, [r1, #8]
 800418a:	461f      	mov	r7, r3
 800418c:	42be      	cmp	r6, r7
 800418e:	680b      	ldr	r3, [r1, #0]
 8004190:	4682      	mov	sl, r0
 8004192:	460c      	mov	r4, r1
 8004194:	4690      	mov	r8, r2
 8004196:	d82d      	bhi.n	80041f4 <__ssputs_r+0x70>
 8004198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800419c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80041a0:	d026      	beq.n	80041f0 <__ssputs_r+0x6c>
 80041a2:	6965      	ldr	r5, [r4, #20]
 80041a4:	6909      	ldr	r1, [r1, #16]
 80041a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041aa:	eba3 0901 	sub.w	r9, r3, r1
 80041ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041b2:	1c7b      	adds	r3, r7, #1
 80041b4:	444b      	add	r3, r9
 80041b6:	106d      	asrs	r5, r5, #1
 80041b8:	429d      	cmp	r5, r3
 80041ba:	bf38      	it	cc
 80041bc:	461d      	movcc	r5, r3
 80041be:	0553      	lsls	r3, r2, #21
 80041c0:	d527      	bpl.n	8004212 <__ssputs_r+0x8e>
 80041c2:	4629      	mov	r1, r5
 80041c4:	f7ff ff52 	bl	800406c <_malloc_r>
 80041c8:	4606      	mov	r6, r0
 80041ca:	b360      	cbz	r0, 8004226 <__ssputs_r+0xa2>
 80041cc:	6921      	ldr	r1, [r4, #16]
 80041ce:	464a      	mov	r2, r9
 80041d0:	f000 fba4 	bl	800491c <memcpy>
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80041da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041de:	81a3      	strh	r3, [r4, #12]
 80041e0:	6126      	str	r6, [r4, #16]
 80041e2:	6165      	str	r5, [r4, #20]
 80041e4:	444e      	add	r6, r9
 80041e6:	eba5 0509 	sub.w	r5, r5, r9
 80041ea:	6026      	str	r6, [r4, #0]
 80041ec:	60a5      	str	r5, [r4, #8]
 80041ee:	463e      	mov	r6, r7
 80041f0:	42be      	cmp	r6, r7
 80041f2:	d900      	bls.n	80041f6 <__ssputs_r+0x72>
 80041f4:	463e      	mov	r6, r7
 80041f6:	6820      	ldr	r0, [r4, #0]
 80041f8:	4632      	mov	r2, r6
 80041fa:	4641      	mov	r1, r8
 80041fc:	f000 fb64 	bl	80048c8 <memmove>
 8004200:	68a3      	ldr	r3, [r4, #8]
 8004202:	1b9b      	subs	r3, r3, r6
 8004204:	60a3      	str	r3, [r4, #8]
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	4433      	add	r3, r6
 800420a:	6023      	str	r3, [r4, #0]
 800420c:	2000      	movs	r0, #0
 800420e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004212:	462a      	mov	r2, r5
 8004214:	f000 fb97 	bl	8004946 <_realloc_r>
 8004218:	4606      	mov	r6, r0
 800421a:	2800      	cmp	r0, #0
 800421c:	d1e0      	bne.n	80041e0 <__ssputs_r+0x5c>
 800421e:	6921      	ldr	r1, [r4, #16]
 8004220:	4650      	mov	r0, sl
 8004222:	f7ff feaf 	bl	8003f84 <_free_r>
 8004226:	230c      	movs	r3, #12
 8004228:	f8ca 3000 	str.w	r3, [sl]
 800422c:	89a3      	ldrh	r3, [r4, #12]
 800422e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004232:	81a3      	strh	r3, [r4, #12]
 8004234:	f04f 30ff 	mov.w	r0, #4294967295
 8004238:	e7e9      	b.n	800420e <__ssputs_r+0x8a>
	...

0800423c <_svfiprintf_r>:
 800423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004240:	4698      	mov	r8, r3
 8004242:	898b      	ldrh	r3, [r1, #12]
 8004244:	061b      	lsls	r3, r3, #24
 8004246:	b09d      	sub	sp, #116	@ 0x74
 8004248:	4607      	mov	r7, r0
 800424a:	460d      	mov	r5, r1
 800424c:	4614      	mov	r4, r2
 800424e:	d510      	bpl.n	8004272 <_svfiprintf_r+0x36>
 8004250:	690b      	ldr	r3, [r1, #16]
 8004252:	b973      	cbnz	r3, 8004272 <_svfiprintf_r+0x36>
 8004254:	2140      	movs	r1, #64	@ 0x40
 8004256:	f7ff ff09 	bl	800406c <_malloc_r>
 800425a:	6028      	str	r0, [r5, #0]
 800425c:	6128      	str	r0, [r5, #16]
 800425e:	b930      	cbnz	r0, 800426e <_svfiprintf_r+0x32>
 8004260:	230c      	movs	r3, #12
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	b01d      	add	sp, #116	@ 0x74
 800426a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800426e:	2340      	movs	r3, #64	@ 0x40
 8004270:	616b      	str	r3, [r5, #20]
 8004272:	2300      	movs	r3, #0
 8004274:	9309      	str	r3, [sp, #36]	@ 0x24
 8004276:	2320      	movs	r3, #32
 8004278:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800427c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004280:	2330      	movs	r3, #48	@ 0x30
 8004282:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004420 <_svfiprintf_r+0x1e4>
 8004286:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800428a:	f04f 0901 	mov.w	r9, #1
 800428e:	4623      	mov	r3, r4
 8004290:	469a      	mov	sl, r3
 8004292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004296:	b10a      	cbz	r2, 800429c <_svfiprintf_r+0x60>
 8004298:	2a25      	cmp	r2, #37	@ 0x25
 800429a:	d1f9      	bne.n	8004290 <_svfiprintf_r+0x54>
 800429c:	ebba 0b04 	subs.w	fp, sl, r4
 80042a0:	d00b      	beq.n	80042ba <_svfiprintf_r+0x7e>
 80042a2:	465b      	mov	r3, fp
 80042a4:	4622      	mov	r2, r4
 80042a6:	4629      	mov	r1, r5
 80042a8:	4638      	mov	r0, r7
 80042aa:	f7ff ff6b 	bl	8004184 <__ssputs_r>
 80042ae:	3001      	adds	r0, #1
 80042b0:	f000 80a7 	beq.w	8004402 <_svfiprintf_r+0x1c6>
 80042b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042b6:	445a      	add	r2, fp
 80042b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80042ba:	f89a 3000 	ldrb.w	r3, [sl]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 809f 	beq.w	8004402 <_svfiprintf_r+0x1c6>
 80042c4:	2300      	movs	r3, #0
 80042c6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ce:	f10a 0a01 	add.w	sl, sl, #1
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	9307      	str	r3, [sp, #28]
 80042d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042da:	931a      	str	r3, [sp, #104]	@ 0x68
 80042dc:	4654      	mov	r4, sl
 80042de:	2205      	movs	r2, #5
 80042e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e4:	484e      	ldr	r0, [pc, #312]	@ (8004420 <_svfiprintf_r+0x1e4>)
 80042e6:	f7fb ff9b 	bl	8000220 <memchr>
 80042ea:	9a04      	ldr	r2, [sp, #16]
 80042ec:	b9d8      	cbnz	r0, 8004326 <_svfiprintf_r+0xea>
 80042ee:	06d0      	lsls	r0, r2, #27
 80042f0:	bf44      	itt	mi
 80042f2:	2320      	movmi	r3, #32
 80042f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042f8:	0711      	lsls	r1, r2, #28
 80042fa:	bf44      	itt	mi
 80042fc:	232b      	movmi	r3, #43	@ 0x2b
 80042fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004302:	f89a 3000 	ldrb.w	r3, [sl]
 8004306:	2b2a      	cmp	r3, #42	@ 0x2a
 8004308:	d015      	beq.n	8004336 <_svfiprintf_r+0xfa>
 800430a:	9a07      	ldr	r2, [sp, #28]
 800430c:	4654      	mov	r4, sl
 800430e:	2000      	movs	r0, #0
 8004310:	f04f 0c0a 	mov.w	ip, #10
 8004314:	4621      	mov	r1, r4
 8004316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800431a:	3b30      	subs	r3, #48	@ 0x30
 800431c:	2b09      	cmp	r3, #9
 800431e:	d94b      	bls.n	80043b8 <_svfiprintf_r+0x17c>
 8004320:	b1b0      	cbz	r0, 8004350 <_svfiprintf_r+0x114>
 8004322:	9207      	str	r2, [sp, #28]
 8004324:	e014      	b.n	8004350 <_svfiprintf_r+0x114>
 8004326:	eba0 0308 	sub.w	r3, r0, r8
 800432a:	fa09 f303 	lsl.w	r3, r9, r3
 800432e:	4313      	orrs	r3, r2
 8004330:	9304      	str	r3, [sp, #16]
 8004332:	46a2      	mov	sl, r4
 8004334:	e7d2      	b.n	80042dc <_svfiprintf_r+0xa0>
 8004336:	9b03      	ldr	r3, [sp, #12]
 8004338:	1d19      	adds	r1, r3, #4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	9103      	str	r1, [sp, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	bfbb      	ittet	lt
 8004342:	425b      	neglt	r3, r3
 8004344:	f042 0202 	orrlt.w	r2, r2, #2
 8004348:	9307      	strge	r3, [sp, #28]
 800434a:	9307      	strlt	r3, [sp, #28]
 800434c:	bfb8      	it	lt
 800434e:	9204      	strlt	r2, [sp, #16]
 8004350:	7823      	ldrb	r3, [r4, #0]
 8004352:	2b2e      	cmp	r3, #46	@ 0x2e
 8004354:	d10a      	bne.n	800436c <_svfiprintf_r+0x130>
 8004356:	7863      	ldrb	r3, [r4, #1]
 8004358:	2b2a      	cmp	r3, #42	@ 0x2a
 800435a:	d132      	bne.n	80043c2 <_svfiprintf_r+0x186>
 800435c:	9b03      	ldr	r3, [sp, #12]
 800435e:	1d1a      	adds	r2, r3, #4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	9203      	str	r2, [sp, #12]
 8004364:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004368:	3402      	adds	r4, #2
 800436a:	9305      	str	r3, [sp, #20]
 800436c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004430 <_svfiprintf_r+0x1f4>
 8004370:	7821      	ldrb	r1, [r4, #0]
 8004372:	2203      	movs	r2, #3
 8004374:	4650      	mov	r0, sl
 8004376:	f7fb ff53 	bl	8000220 <memchr>
 800437a:	b138      	cbz	r0, 800438c <_svfiprintf_r+0x150>
 800437c:	9b04      	ldr	r3, [sp, #16]
 800437e:	eba0 000a 	sub.w	r0, r0, sl
 8004382:	2240      	movs	r2, #64	@ 0x40
 8004384:	4082      	lsls	r2, r0
 8004386:	4313      	orrs	r3, r2
 8004388:	3401      	adds	r4, #1
 800438a:	9304      	str	r3, [sp, #16]
 800438c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004390:	4824      	ldr	r0, [pc, #144]	@ (8004424 <_svfiprintf_r+0x1e8>)
 8004392:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004396:	2206      	movs	r2, #6
 8004398:	f7fb ff42 	bl	8000220 <memchr>
 800439c:	2800      	cmp	r0, #0
 800439e:	d036      	beq.n	800440e <_svfiprintf_r+0x1d2>
 80043a0:	4b21      	ldr	r3, [pc, #132]	@ (8004428 <_svfiprintf_r+0x1ec>)
 80043a2:	bb1b      	cbnz	r3, 80043ec <_svfiprintf_r+0x1b0>
 80043a4:	9b03      	ldr	r3, [sp, #12]
 80043a6:	3307      	adds	r3, #7
 80043a8:	f023 0307 	bic.w	r3, r3, #7
 80043ac:	3308      	adds	r3, #8
 80043ae:	9303      	str	r3, [sp, #12]
 80043b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043b2:	4433      	add	r3, r6
 80043b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80043b6:	e76a      	b.n	800428e <_svfiprintf_r+0x52>
 80043b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80043bc:	460c      	mov	r4, r1
 80043be:	2001      	movs	r0, #1
 80043c0:	e7a8      	b.n	8004314 <_svfiprintf_r+0xd8>
 80043c2:	2300      	movs	r3, #0
 80043c4:	3401      	adds	r4, #1
 80043c6:	9305      	str	r3, [sp, #20]
 80043c8:	4619      	mov	r1, r3
 80043ca:	f04f 0c0a 	mov.w	ip, #10
 80043ce:	4620      	mov	r0, r4
 80043d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043d4:	3a30      	subs	r2, #48	@ 0x30
 80043d6:	2a09      	cmp	r2, #9
 80043d8:	d903      	bls.n	80043e2 <_svfiprintf_r+0x1a6>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0c6      	beq.n	800436c <_svfiprintf_r+0x130>
 80043de:	9105      	str	r1, [sp, #20]
 80043e0:	e7c4      	b.n	800436c <_svfiprintf_r+0x130>
 80043e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80043e6:	4604      	mov	r4, r0
 80043e8:	2301      	movs	r3, #1
 80043ea:	e7f0      	b.n	80043ce <_svfiprintf_r+0x192>
 80043ec:	ab03      	add	r3, sp, #12
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	462a      	mov	r2, r5
 80043f2:	4b0e      	ldr	r3, [pc, #56]	@ (800442c <_svfiprintf_r+0x1f0>)
 80043f4:	a904      	add	r1, sp, #16
 80043f6:	4638      	mov	r0, r7
 80043f8:	f3af 8000 	nop.w
 80043fc:	1c42      	adds	r2, r0, #1
 80043fe:	4606      	mov	r6, r0
 8004400:	d1d6      	bne.n	80043b0 <_svfiprintf_r+0x174>
 8004402:	89ab      	ldrh	r3, [r5, #12]
 8004404:	065b      	lsls	r3, r3, #25
 8004406:	f53f af2d 	bmi.w	8004264 <_svfiprintf_r+0x28>
 800440a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800440c:	e72c      	b.n	8004268 <_svfiprintf_r+0x2c>
 800440e:	ab03      	add	r3, sp, #12
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	462a      	mov	r2, r5
 8004414:	4b05      	ldr	r3, [pc, #20]	@ (800442c <_svfiprintf_r+0x1f0>)
 8004416:	a904      	add	r1, sp, #16
 8004418:	4638      	mov	r0, r7
 800441a:	f000 f879 	bl	8004510 <_printf_i>
 800441e:	e7ed      	b.n	80043fc <_svfiprintf_r+0x1c0>
 8004420:	08004fe3 	.word	0x08004fe3
 8004424:	08004fed 	.word	0x08004fed
 8004428:	00000000 	.word	0x00000000
 800442c:	08004185 	.word	0x08004185
 8004430:	08004fe9 	.word	0x08004fe9

08004434 <_printf_common>:
 8004434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004438:	4616      	mov	r6, r2
 800443a:	4698      	mov	r8, r3
 800443c:	688a      	ldr	r2, [r1, #8]
 800443e:	690b      	ldr	r3, [r1, #16]
 8004440:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004444:	4293      	cmp	r3, r2
 8004446:	bfb8      	it	lt
 8004448:	4613      	movlt	r3, r2
 800444a:	6033      	str	r3, [r6, #0]
 800444c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004450:	4607      	mov	r7, r0
 8004452:	460c      	mov	r4, r1
 8004454:	b10a      	cbz	r2, 800445a <_printf_common+0x26>
 8004456:	3301      	adds	r3, #1
 8004458:	6033      	str	r3, [r6, #0]
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	0699      	lsls	r1, r3, #26
 800445e:	bf42      	ittt	mi
 8004460:	6833      	ldrmi	r3, [r6, #0]
 8004462:	3302      	addmi	r3, #2
 8004464:	6033      	strmi	r3, [r6, #0]
 8004466:	6825      	ldr	r5, [r4, #0]
 8004468:	f015 0506 	ands.w	r5, r5, #6
 800446c:	d106      	bne.n	800447c <_printf_common+0x48>
 800446e:	f104 0a19 	add.w	sl, r4, #25
 8004472:	68e3      	ldr	r3, [r4, #12]
 8004474:	6832      	ldr	r2, [r6, #0]
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	42ab      	cmp	r3, r5
 800447a:	dc26      	bgt.n	80044ca <_printf_common+0x96>
 800447c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004480:	6822      	ldr	r2, [r4, #0]
 8004482:	3b00      	subs	r3, #0
 8004484:	bf18      	it	ne
 8004486:	2301      	movne	r3, #1
 8004488:	0692      	lsls	r2, r2, #26
 800448a:	d42b      	bmi.n	80044e4 <_printf_common+0xb0>
 800448c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004490:	4641      	mov	r1, r8
 8004492:	4638      	mov	r0, r7
 8004494:	47c8      	blx	r9
 8004496:	3001      	adds	r0, #1
 8004498:	d01e      	beq.n	80044d8 <_printf_common+0xa4>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	6922      	ldr	r2, [r4, #16]
 800449e:	f003 0306 	and.w	r3, r3, #6
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	bf02      	ittt	eq
 80044a6:	68e5      	ldreq	r5, [r4, #12]
 80044a8:	6833      	ldreq	r3, [r6, #0]
 80044aa:	1aed      	subeq	r5, r5, r3
 80044ac:	68a3      	ldr	r3, [r4, #8]
 80044ae:	bf0c      	ite	eq
 80044b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044b4:	2500      	movne	r5, #0
 80044b6:	4293      	cmp	r3, r2
 80044b8:	bfc4      	itt	gt
 80044ba:	1a9b      	subgt	r3, r3, r2
 80044bc:	18ed      	addgt	r5, r5, r3
 80044be:	2600      	movs	r6, #0
 80044c0:	341a      	adds	r4, #26
 80044c2:	42b5      	cmp	r5, r6
 80044c4:	d11a      	bne.n	80044fc <_printf_common+0xc8>
 80044c6:	2000      	movs	r0, #0
 80044c8:	e008      	b.n	80044dc <_printf_common+0xa8>
 80044ca:	2301      	movs	r3, #1
 80044cc:	4652      	mov	r2, sl
 80044ce:	4641      	mov	r1, r8
 80044d0:	4638      	mov	r0, r7
 80044d2:	47c8      	blx	r9
 80044d4:	3001      	adds	r0, #1
 80044d6:	d103      	bne.n	80044e0 <_printf_common+0xac>
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e0:	3501      	adds	r5, #1
 80044e2:	e7c6      	b.n	8004472 <_printf_common+0x3e>
 80044e4:	18e1      	adds	r1, r4, r3
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	2030      	movs	r0, #48	@ 0x30
 80044ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044ee:	4422      	add	r2, r4
 80044f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044f8:	3302      	adds	r3, #2
 80044fa:	e7c7      	b.n	800448c <_printf_common+0x58>
 80044fc:	2301      	movs	r3, #1
 80044fe:	4622      	mov	r2, r4
 8004500:	4641      	mov	r1, r8
 8004502:	4638      	mov	r0, r7
 8004504:	47c8      	blx	r9
 8004506:	3001      	adds	r0, #1
 8004508:	d0e6      	beq.n	80044d8 <_printf_common+0xa4>
 800450a:	3601      	adds	r6, #1
 800450c:	e7d9      	b.n	80044c2 <_printf_common+0x8e>
	...

08004510 <_printf_i>:
 8004510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004514:	7e0f      	ldrb	r7, [r1, #24]
 8004516:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004518:	2f78      	cmp	r7, #120	@ 0x78
 800451a:	4691      	mov	r9, r2
 800451c:	4680      	mov	r8, r0
 800451e:	460c      	mov	r4, r1
 8004520:	469a      	mov	sl, r3
 8004522:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004526:	d807      	bhi.n	8004538 <_printf_i+0x28>
 8004528:	2f62      	cmp	r7, #98	@ 0x62
 800452a:	d80a      	bhi.n	8004542 <_printf_i+0x32>
 800452c:	2f00      	cmp	r7, #0
 800452e:	f000 80d1 	beq.w	80046d4 <_printf_i+0x1c4>
 8004532:	2f58      	cmp	r7, #88	@ 0x58
 8004534:	f000 80b8 	beq.w	80046a8 <_printf_i+0x198>
 8004538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800453c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004540:	e03a      	b.n	80045b8 <_printf_i+0xa8>
 8004542:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004546:	2b15      	cmp	r3, #21
 8004548:	d8f6      	bhi.n	8004538 <_printf_i+0x28>
 800454a:	a101      	add	r1, pc, #4	@ (adr r1, 8004550 <_printf_i+0x40>)
 800454c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004550:	080045a9 	.word	0x080045a9
 8004554:	080045bd 	.word	0x080045bd
 8004558:	08004539 	.word	0x08004539
 800455c:	08004539 	.word	0x08004539
 8004560:	08004539 	.word	0x08004539
 8004564:	08004539 	.word	0x08004539
 8004568:	080045bd 	.word	0x080045bd
 800456c:	08004539 	.word	0x08004539
 8004570:	08004539 	.word	0x08004539
 8004574:	08004539 	.word	0x08004539
 8004578:	08004539 	.word	0x08004539
 800457c:	080046bb 	.word	0x080046bb
 8004580:	080045e7 	.word	0x080045e7
 8004584:	08004675 	.word	0x08004675
 8004588:	08004539 	.word	0x08004539
 800458c:	08004539 	.word	0x08004539
 8004590:	080046dd 	.word	0x080046dd
 8004594:	08004539 	.word	0x08004539
 8004598:	080045e7 	.word	0x080045e7
 800459c:	08004539 	.word	0x08004539
 80045a0:	08004539 	.word	0x08004539
 80045a4:	0800467d 	.word	0x0800467d
 80045a8:	6833      	ldr	r3, [r6, #0]
 80045aa:	1d1a      	adds	r2, r3, #4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6032      	str	r2, [r6, #0]
 80045b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045b8:	2301      	movs	r3, #1
 80045ba:	e09c      	b.n	80046f6 <_printf_i+0x1e6>
 80045bc:	6833      	ldr	r3, [r6, #0]
 80045be:	6820      	ldr	r0, [r4, #0]
 80045c0:	1d19      	adds	r1, r3, #4
 80045c2:	6031      	str	r1, [r6, #0]
 80045c4:	0606      	lsls	r6, r0, #24
 80045c6:	d501      	bpl.n	80045cc <_printf_i+0xbc>
 80045c8:	681d      	ldr	r5, [r3, #0]
 80045ca:	e003      	b.n	80045d4 <_printf_i+0xc4>
 80045cc:	0645      	lsls	r5, r0, #25
 80045ce:	d5fb      	bpl.n	80045c8 <_printf_i+0xb8>
 80045d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045d4:	2d00      	cmp	r5, #0
 80045d6:	da03      	bge.n	80045e0 <_printf_i+0xd0>
 80045d8:	232d      	movs	r3, #45	@ 0x2d
 80045da:	426d      	negs	r5, r5
 80045dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045e0:	4858      	ldr	r0, [pc, #352]	@ (8004744 <_printf_i+0x234>)
 80045e2:	230a      	movs	r3, #10
 80045e4:	e011      	b.n	800460a <_printf_i+0xfa>
 80045e6:	6821      	ldr	r1, [r4, #0]
 80045e8:	6833      	ldr	r3, [r6, #0]
 80045ea:	0608      	lsls	r0, r1, #24
 80045ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80045f0:	d402      	bmi.n	80045f8 <_printf_i+0xe8>
 80045f2:	0649      	lsls	r1, r1, #25
 80045f4:	bf48      	it	mi
 80045f6:	b2ad      	uxthmi	r5, r5
 80045f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80045fa:	4852      	ldr	r0, [pc, #328]	@ (8004744 <_printf_i+0x234>)
 80045fc:	6033      	str	r3, [r6, #0]
 80045fe:	bf14      	ite	ne
 8004600:	230a      	movne	r3, #10
 8004602:	2308      	moveq	r3, #8
 8004604:	2100      	movs	r1, #0
 8004606:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800460a:	6866      	ldr	r6, [r4, #4]
 800460c:	60a6      	str	r6, [r4, #8]
 800460e:	2e00      	cmp	r6, #0
 8004610:	db05      	blt.n	800461e <_printf_i+0x10e>
 8004612:	6821      	ldr	r1, [r4, #0]
 8004614:	432e      	orrs	r6, r5
 8004616:	f021 0104 	bic.w	r1, r1, #4
 800461a:	6021      	str	r1, [r4, #0]
 800461c:	d04b      	beq.n	80046b6 <_printf_i+0x1a6>
 800461e:	4616      	mov	r6, r2
 8004620:	fbb5 f1f3 	udiv	r1, r5, r3
 8004624:	fb03 5711 	mls	r7, r3, r1, r5
 8004628:	5dc7      	ldrb	r7, [r0, r7]
 800462a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800462e:	462f      	mov	r7, r5
 8004630:	42bb      	cmp	r3, r7
 8004632:	460d      	mov	r5, r1
 8004634:	d9f4      	bls.n	8004620 <_printf_i+0x110>
 8004636:	2b08      	cmp	r3, #8
 8004638:	d10b      	bne.n	8004652 <_printf_i+0x142>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	07df      	lsls	r7, r3, #31
 800463e:	d508      	bpl.n	8004652 <_printf_i+0x142>
 8004640:	6923      	ldr	r3, [r4, #16]
 8004642:	6861      	ldr	r1, [r4, #4]
 8004644:	4299      	cmp	r1, r3
 8004646:	bfde      	ittt	le
 8004648:	2330      	movle	r3, #48	@ 0x30
 800464a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800464e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004652:	1b92      	subs	r2, r2, r6
 8004654:	6122      	str	r2, [r4, #16]
 8004656:	f8cd a000 	str.w	sl, [sp]
 800465a:	464b      	mov	r3, r9
 800465c:	aa03      	add	r2, sp, #12
 800465e:	4621      	mov	r1, r4
 8004660:	4640      	mov	r0, r8
 8004662:	f7ff fee7 	bl	8004434 <_printf_common>
 8004666:	3001      	adds	r0, #1
 8004668:	d14a      	bne.n	8004700 <_printf_i+0x1f0>
 800466a:	f04f 30ff 	mov.w	r0, #4294967295
 800466e:	b004      	add	sp, #16
 8004670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	f043 0320 	orr.w	r3, r3, #32
 800467a:	6023      	str	r3, [r4, #0]
 800467c:	4832      	ldr	r0, [pc, #200]	@ (8004748 <_printf_i+0x238>)
 800467e:	2778      	movs	r7, #120	@ 0x78
 8004680:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	6831      	ldr	r1, [r6, #0]
 8004688:	061f      	lsls	r7, r3, #24
 800468a:	f851 5b04 	ldr.w	r5, [r1], #4
 800468e:	d402      	bmi.n	8004696 <_printf_i+0x186>
 8004690:	065f      	lsls	r7, r3, #25
 8004692:	bf48      	it	mi
 8004694:	b2ad      	uxthmi	r5, r5
 8004696:	6031      	str	r1, [r6, #0]
 8004698:	07d9      	lsls	r1, r3, #31
 800469a:	bf44      	itt	mi
 800469c:	f043 0320 	orrmi.w	r3, r3, #32
 80046a0:	6023      	strmi	r3, [r4, #0]
 80046a2:	b11d      	cbz	r5, 80046ac <_printf_i+0x19c>
 80046a4:	2310      	movs	r3, #16
 80046a6:	e7ad      	b.n	8004604 <_printf_i+0xf4>
 80046a8:	4826      	ldr	r0, [pc, #152]	@ (8004744 <_printf_i+0x234>)
 80046aa:	e7e9      	b.n	8004680 <_printf_i+0x170>
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	f023 0320 	bic.w	r3, r3, #32
 80046b2:	6023      	str	r3, [r4, #0]
 80046b4:	e7f6      	b.n	80046a4 <_printf_i+0x194>
 80046b6:	4616      	mov	r6, r2
 80046b8:	e7bd      	b.n	8004636 <_printf_i+0x126>
 80046ba:	6833      	ldr	r3, [r6, #0]
 80046bc:	6825      	ldr	r5, [r4, #0]
 80046be:	6961      	ldr	r1, [r4, #20]
 80046c0:	1d18      	adds	r0, r3, #4
 80046c2:	6030      	str	r0, [r6, #0]
 80046c4:	062e      	lsls	r6, r5, #24
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	d501      	bpl.n	80046ce <_printf_i+0x1be>
 80046ca:	6019      	str	r1, [r3, #0]
 80046cc:	e002      	b.n	80046d4 <_printf_i+0x1c4>
 80046ce:	0668      	lsls	r0, r5, #25
 80046d0:	d5fb      	bpl.n	80046ca <_printf_i+0x1ba>
 80046d2:	8019      	strh	r1, [r3, #0]
 80046d4:	2300      	movs	r3, #0
 80046d6:	6123      	str	r3, [r4, #16]
 80046d8:	4616      	mov	r6, r2
 80046da:	e7bc      	b.n	8004656 <_printf_i+0x146>
 80046dc:	6833      	ldr	r3, [r6, #0]
 80046de:	1d1a      	adds	r2, r3, #4
 80046e0:	6032      	str	r2, [r6, #0]
 80046e2:	681e      	ldr	r6, [r3, #0]
 80046e4:	6862      	ldr	r2, [r4, #4]
 80046e6:	2100      	movs	r1, #0
 80046e8:	4630      	mov	r0, r6
 80046ea:	f7fb fd99 	bl	8000220 <memchr>
 80046ee:	b108      	cbz	r0, 80046f4 <_printf_i+0x1e4>
 80046f0:	1b80      	subs	r0, r0, r6
 80046f2:	6060      	str	r0, [r4, #4]
 80046f4:	6863      	ldr	r3, [r4, #4]
 80046f6:	6123      	str	r3, [r4, #16]
 80046f8:	2300      	movs	r3, #0
 80046fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046fe:	e7aa      	b.n	8004656 <_printf_i+0x146>
 8004700:	6923      	ldr	r3, [r4, #16]
 8004702:	4632      	mov	r2, r6
 8004704:	4649      	mov	r1, r9
 8004706:	4640      	mov	r0, r8
 8004708:	47d0      	blx	sl
 800470a:	3001      	adds	r0, #1
 800470c:	d0ad      	beq.n	800466a <_printf_i+0x15a>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	079b      	lsls	r3, r3, #30
 8004712:	d413      	bmi.n	800473c <_printf_i+0x22c>
 8004714:	68e0      	ldr	r0, [r4, #12]
 8004716:	9b03      	ldr	r3, [sp, #12]
 8004718:	4298      	cmp	r0, r3
 800471a:	bfb8      	it	lt
 800471c:	4618      	movlt	r0, r3
 800471e:	e7a6      	b.n	800466e <_printf_i+0x15e>
 8004720:	2301      	movs	r3, #1
 8004722:	4632      	mov	r2, r6
 8004724:	4649      	mov	r1, r9
 8004726:	4640      	mov	r0, r8
 8004728:	47d0      	blx	sl
 800472a:	3001      	adds	r0, #1
 800472c:	d09d      	beq.n	800466a <_printf_i+0x15a>
 800472e:	3501      	adds	r5, #1
 8004730:	68e3      	ldr	r3, [r4, #12]
 8004732:	9903      	ldr	r1, [sp, #12]
 8004734:	1a5b      	subs	r3, r3, r1
 8004736:	42ab      	cmp	r3, r5
 8004738:	dcf2      	bgt.n	8004720 <_printf_i+0x210>
 800473a:	e7eb      	b.n	8004714 <_printf_i+0x204>
 800473c:	2500      	movs	r5, #0
 800473e:	f104 0619 	add.w	r6, r4, #25
 8004742:	e7f5      	b.n	8004730 <_printf_i+0x220>
 8004744:	08004ff4 	.word	0x08004ff4
 8004748:	08005005 	.word	0x08005005

0800474c <__sflush_r>:
 800474c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004754:	0716      	lsls	r6, r2, #28
 8004756:	4605      	mov	r5, r0
 8004758:	460c      	mov	r4, r1
 800475a:	d454      	bmi.n	8004806 <__sflush_r+0xba>
 800475c:	684b      	ldr	r3, [r1, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	dc02      	bgt.n	8004768 <__sflush_r+0x1c>
 8004762:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	dd48      	ble.n	80047fa <__sflush_r+0xae>
 8004768:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800476a:	2e00      	cmp	r6, #0
 800476c:	d045      	beq.n	80047fa <__sflush_r+0xae>
 800476e:	2300      	movs	r3, #0
 8004770:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004774:	682f      	ldr	r7, [r5, #0]
 8004776:	6a21      	ldr	r1, [r4, #32]
 8004778:	602b      	str	r3, [r5, #0]
 800477a:	d030      	beq.n	80047de <__sflush_r+0x92>
 800477c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	0759      	lsls	r1, r3, #29
 8004782:	d505      	bpl.n	8004790 <__sflush_r+0x44>
 8004784:	6863      	ldr	r3, [r4, #4]
 8004786:	1ad2      	subs	r2, r2, r3
 8004788:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800478a:	b10b      	cbz	r3, 8004790 <__sflush_r+0x44>
 800478c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800478e:	1ad2      	subs	r2, r2, r3
 8004790:	2300      	movs	r3, #0
 8004792:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004794:	6a21      	ldr	r1, [r4, #32]
 8004796:	4628      	mov	r0, r5
 8004798:	47b0      	blx	r6
 800479a:	1c43      	adds	r3, r0, #1
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	d106      	bne.n	80047ae <__sflush_r+0x62>
 80047a0:	6829      	ldr	r1, [r5, #0]
 80047a2:	291d      	cmp	r1, #29
 80047a4:	d82b      	bhi.n	80047fe <__sflush_r+0xb2>
 80047a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004850 <__sflush_r+0x104>)
 80047a8:	40ca      	lsrs	r2, r1
 80047aa:	07d6      	lsls	r6, r2, #31
 80047ac:	d527      	bpl.n	80047fe <__sflush_r+0xb2>
 80047ae:	2200      	movs	r2, #0
 80047b0:	6062      	str	r2, [r4, #4]
 80047b2:	04d9      	lsls	r1, r3, #19
 80047b4:	6922      	ldr	r2, [r4, #16]
 80047b6:	6022      	str	r2, [r4, #0]
 80047b8:	d504      	bpl.n	80047c4 <__sflush_r+0x78>
 80047ba:	1c42      	adds	r2, r0, #1
 80047bc:	d101      	bne.n	80047c2 <__sflush_r+0x76>
 80047be:	682b      	ldr	r3, [r5, #0]
 80047c0:	b903      	cbnz	r3, 80047c4 <__sflush_r+0x78>
 80047c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80047c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047c6:	602f      	str	r7, [r5, #0]
 80047c8:	b1b9      	cbz	r1, 80047fa <__sflush_r+0xae>
 80047ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047ce:	4299      	cmp	r1, r3
 80047d0:	d002      	beq.n	80047d8 <__sflush_r+0x8c>
 80047d2:	4628      	mov	r0, r5
 80047d4:	f7ff fbd6 	bl	8003f84 <_free_r>
 80047d8:	2300      	movs	r3, #0
 80047da:	6363      	str	r3, [r4, #52]	@ 0x34
 80047dc:	e00d      	b.n	80047fa <__sflush_r+0xae>
 80047de:	2301      	movs	r3, #1
 80047e0:	4628      	mov	r0, r5
 80047e2:	47b0      	blx	r6
 80047e4:	4602      	mov	r2, r0
 80047e6:	1c50      	adds	r0, r2, #1
 80047e8:	d1c9      	bne.n	800477e <__sflush_r+0x32>
 80047ea:	682b      	ldr	r3, [r5, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0c6      	beq.n	800477e <__sflush_r+0x32>
 80047f0:	2b1d      	cmp	r3, #29
 80047f2:	d001      	beq.n	80047f8 <__sflush_r+0xac>
 80047f4:	2b16      	cmp	r3, #22
 80047f6:	d11e      	bne.n	8004836 <__sflush_r+0xea>
 80047f8:	602f      	str	r7, [r5, #0]
 80047fa:	2000      	movs	r0, #0
 80047fc:	e022      	b.n	8004844 <__sflush_r+0xf8>
 80047fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004802:	b21b      	sxth	r3, r3
 8004804:	e01b      	b.n	800483e <__sflush_r+0xf2>
 8004806:	690f      	ldr	r7, [r1, #16]
 8004808:	2f00      	cmp	r7, #0
 800480a:	d0f6      	beq.n	80047fa <__sflush_r+0xae>
 800480c:	0793      	lsls	r3, r2, #30
 800480e:	680e      	ldr	r6, [r1, #0]
 8004810:	bf08      	it	eq
 8004812:	694b      	ldreq	r3, [r1, #20]
 8004814:	600f      	str	r7, [r1, #0]
 8004816:	bf18      	it	ne
 8004818:	2300      	movne	r3, #0
 800481a:	eba6 0807 	sub.w	r8, r6, r7
 800481e:	608b      	str	r3, [r1, #8]
 8004820:	f1b8 0f00 	cmp.w	r8, #0
 8004824:	dde9      	ble.n	80047fa <__sflush_r+0xae>
 8004826:	6a21      	ldr	r1, [r4, #32]
 8004828:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800482a:	4643      	mov	r3, r8
 800482c:	463a      	mov	r2, r7
 800482e:	4628      	mov	r0, r5
 8004830:	47b0      	blx	r6
 8004832:	2800      	cmp	r0, #0
 8004834:	dc08      	bgt.n	8004848 <__sflush_r+0xfc>
 8004836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800483a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800483e:	81a3      	strh	r3, [r4, #12]
 8004840:	f04f 30ff 	mov.w	r0, #4294967295
 8004844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004848:	4407      	add	r7, r0
 800484a:	eba8 0800 	sub.w	r8, r8, r0
 800484e:	e7e7      	b.n	8004820 <__sflush_r+0xd4>
 8004850:	20400001 	.word	0x20400001

08004854 <_fflush_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	690b      	ldr	r3, [r1, #16]
 8004858:	4605      	mov	r5, r0
 800485a:	460c      	mov	r4, r1
 800485c:	b913      	cbnz	r3, 8004864 <_fflush_r+0x10>
 800485e:	2500      	movs	r5, #0
 8004860:	4628      	mov	r0, r5
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	b118      	cbz	r0, 800486e <_fflush_r+0x1a>
 8004866:	6a03      	ldr	r3, [r0, #32]
 8004868:	b90b      	cbnz	r3, 800486e <_fflush_r+0x1a>
 800486a:	f7ff fa55 	bl	8003d18 <__sinit>
 800486e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f3      	beq.n	800485e <_fflush_r+0xa>
 8004876:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004878:	07d0      	lsls	r0, r2, #31
 800487a:	d404      	bmi.n	8004886 <_fflush_r+0x32>
 800487c:	0599      	lsls	r1, r3, #22
 800487e:	d402      	bmi.n	8004886 <_fflush_r+0x32>
 8004880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004882:	f7ff fb5e 	bl	8003f42 <__retarget_lock_acquire_recursive>
 8004886:	4628      	mov	r0, r5
 8004888:	4621      	mov	r1, r4
 800488a:	f7ff ff5f 	bl	800474c <__sflush_r>
 800488e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004890:	07da      	lsls	r2, r3, #31
 8004892:	4605      	mov	r5, r0
 8004894:	d4e4      	bmi.n	8004860 <_fflush_r+0xc>
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	059b      	lsls	r3, r3, #22
 800489a:	d4e1      	bmi.n	8004860 <_fflush_r+0xc>
 800489c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800489e:	f7ff fb51 	bl	8003f44 <__retarget_lock_release_recursive>
 80048a2:	e7dd      	b.n	8004860 <_fflush_r+0xc>

080048a4 <fiprintf>:
 80048a4:	b40e      	push	{r1, r2, r3}
 80048a6:	b503      	push	{r0, r1, lr}
 80048a8:	4601      	mov	r1, r0
 80048aa:	ab03      	add	r3, sp, #12
 80048ac:	4805      	ldr	r0, [pc, #20]	@ (80048c4 <fiprintf+0x20>)
 80048ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80048b2:	6800      	ldr	r0, [r0, #0]
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	f000 f89d 	bl	80049f4 <_vfiprintf_r>
 80048ba:	b002      	add	sp, #8
 80048bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048c0:	b003      	add	sp, #12
 80048c2:	4770      	bx	lr
 80048c4:	20000220 	.word	0x20000220

080048c8 <memmove>:
 80048c8:	4288      	cmp	r0, r1
 80048ca:	b510      	push	{r4, lr}
 80048cc:	eb01 0402 	add.w	r4, r1, r2
 80048d0:	d902      	bls.n	80048d8 <memmove+0x10>
 80048d2:	4284      	cmp	r4, r0
 80048d4:	4623      	mov	r3, r4
 80048d6:	d807      	bhi.n	80048e8 <memmove+0x20>
 80048d8:	1e43      	subs	r3, r0, #1
 80048da:	42a1      	cmp	r1, r4
 80048dc:	d008      	beq.n	80048f0 <memmove+0x28>
 80048de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048e6:	e7f8      	b.n	80048da <memmove+0x12>
 80048e8:	4402      	add	r2, r0
 80048ea:	4601      	mov	r1, r0
 80048ec:	428a      	cmp	r2, r1
 80048ee:	d100      	bne.n	80048f2 <memmove+0x2a>
 80048f0:	bd10      	pop	{r4, pc}
 80048f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048fa:	e7f7      	b.n	80048ec <memmove+0x24>

080048fc <_sbrk_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4d06      	ldr	r5, [pc, #24]	@ (8004918 <_sbrk_r+0x1c>)
 8004900:	2300      	movs	r3, #0
 8004902:	4604      	mov	r4, r0
 8004904:	4608      	mov	r0, r1
 8004906:	602b      	str	r3, [r5, #0]
 8004908:	f7fc fa22 	bl	8000d50 <_sbrk>
 800490c:	1c43      	adds	r3, r0, #1
 800490e:	d102      	bne.n	8004916 <_sbrk_r+0x1a>
 8004910:	682b      	ldr	r3, [r5, #0]
 8004912:	b103      	cbz	r3, 8004916 <_sbrk_r+0x1a>
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	bd38      	pop	{r3, r4, r5, pc}
 8004918:	20000740 	.word	0x20000740

0800491c <memcpy>:
 800491c:	440a      	add	r2, r1
 800491e:	4291      	cmp	r1, r2
 8004920:	f100 33ff 	add.w	r3, r0, #4294967295
 8004924:	d100      	bne.n	8004928 <memcpy+0xc>
 8004926:	4770      	bx	lr
 8004928:	b510      	push	{r4, lr}
 800492a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800492e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004932:	4291      	cmp	r1, r2
 8004934:	d1f9      	bne.n	800492a <memcpy+0xe>
 8004936:	bd10      	pop	{r4, pc}

08004938 <abort>:
 8004938:	b508      	push	{r3, lr}
 800493a:	2006      	movs	r0, #6
 800493c:	f000 fa2e 	bl	8004d9c <raise>
 8004940:	2001      	movs	r0, #1
 8004942:	f7fc f98c 	bl	8000c5e <_exit>

08004946 <_realloc_r>:
 8004946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800494a:	4607      	mov	r7, r0
 800494c:	4614      	mov	r4, r2
 800494e:	460d      	mov	r5, r1
 8004950:	b921      	cbnz	r1, 800495c <_realloc_r+0x16>
 8004952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004956:	4611      	mov	r1, r2
 8004958:	f7ff bb88 	b.w	800406c <_malloc_r>
 800495c:	b92a      	cbnz	r2, 800496a <_realloc_r+0x24>
 800495e:	f7ff fb11 	bl	8003f84 <_free_r>
 8004962:	4625      	mov	r5, r4
 8004964:	4628      	mov	r0, r5
 8004966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800496a:	f000 fa33 	bl	8004dd4 <_malloc_usable_size_r>
 800496e:	4284      	cmp	r4, r0
 8004970:	4606      	mov	r6, r0
 8004972:	d802      	bhi.n	800497a <_realloc_r+0x34>
 8004974:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004978:	d8f4      	bhi.n	8004964 <_realloc_r+0x1e>
 800497a:	4621      	mov	r1, r4
 800497c:	4638      	mov	r0, r7
 800497e:	f7ff fb75 	bl	800406c <_malloc_r>
 8004982:	4680      	mov	r8, r0
 8004984:	b908      	cbnz	r0, 800498a <_realloc_r+0x44>
 8004986:	4645      	mov	r5, r8
 8004988:	e7ec      	b.n	8004964 <_realloc_r+0x1e>
 800498a:	42b4      	cmp	r4, r6
 800498c:	4622      	mov	r2, r4
 800498e:	4629      	mov	r1, r5
 8004990:	bf28      	it	cs
 8004992:	4632      	movcs	r2, r6
 8004994:	f7ff ffc2 	bl	800491c <memcpy>
 8004998:	4629      	mov	r1, r5
 800499a:	4638      	mov	r0, r7
 800499c:	f7ff faf2 	bl	8003f84 <_free_r>
 80049a0:	e7f1      	b.n	8004986 <_realloc_r+0x40>

080049a2 <__sfputc_r>:
 80049a2:	6893      	ldr	r3, [r2, #8]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	b410      	push	{r4}
 80049aa:	6093      	str	r3, [r2, #8]
 80049ac:	da08      	bge.n	80049c0 <__sfputc_r+0x1e>
 80049ae:	6994      	ldr	r4, [r2, #24]
 80049b0:	42a3      	cmp	r3, r4
 80049b2:	db01      	blt.n	80049b8 <__sfputc_r+0x16>
 80049b4:	290a      	cmp	r1, #10
 80049b6:	d103      	bne.n	80049c0 <__sfputc_r+0x1e>
 80049b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049bc:	f000 b932 	b.w	8004c24 <__swbuf_r>
 80049c0:	6813      	ldr	r3, [r2, #0]
 80049c2:	1c58      	adds	r0, r3, #1
 80049c4:	6010      	str	r0, [r2, #0]
 80049c6:	7019      	strb	r1, [r3, #0]
 80049c8:	4608      	mov	r0, r1
 80049ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <__sfputs_r>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	4606      	mov	r6, r0
 80049d4:	460f      	mov	r7, r1
 80049d6:	4614      	mov	r4, r2
 80049d8:	18d5      	adds	r5, r2, r3
 80049da:	42ac      	cmp	r4, r5
 80049dc:	d101      	bne.n	80049e2 <__sfputs_r+0x12>
 80049de:	2000      	movs	r0, #0
 80049e0:	e007      	b.n	80049f2 <__sfputs_r+0x22>
 80049e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e6:	463a      	mov	r2, r7
 80049e8:	4630      	mov	r0, r6
 80049ea:	f7ff ffda 	bl	80049a2 <__sfputc_r>
 80049ee:	1c43      	adds	r3, r0, #1
 80049f0:	d1f3      	bne.n	80049da <__sfputs_r+0xa>
 80049f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049f4 <_vfiprintf_r>:
 80049f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f8:	460d      	mov	r5, r1
 80049fa:	b09d      	sub	sp, #116	@ 0x74
 80049fc:	4614      	mov	r4, r2
 80049fe:	4698      	mov	r8, r3
 8004a00:	4606      	mov	r6, r0
 8004a02:	b118      	cbz	r0, 8004a0c <_vfiprintf_r+0x18>
 8004a04:	6a03      	ldr	r3, [r0, #32]
 8004a06:	b90b      	cbnz	r3, 8004a0c <_vfiprintf_r+0x18>
 8004a08:	f7ff f986 	bl	8003d18 <__sinit>
 8004a0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a0e:	07d9      	lsls	r1, r3, #31
 8004a10:	d405      	bmi.n	8004a1e <_vfiprintf_r+0x2a>
 8004a12:	89ab      	ldrh	r3, [r5, #12]
 8004a14:	059a      	lsls	r2, r3, #22
 8004a16:	d402      	bmi.n	8004a1e <_vfiprintf_r+0x2a>
 8004a18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a1a:	f7ff fa92 	bl	8003f42 <__retarget_lock_acquire_recursive>
 8004a1e:	89ab      	ldrh	r3, [r5, #12]
 8004a20:	071b      	lsls	r3, r3, #28
 8004a22:	d501      	bpl.n	8004a28 <_vfiprintf_r+0x34>
 8004a24:	692b      	ldr	r3, [r5, #16]
 8004a26:	b99b      	cbnz	r3, 8004a50 <_vfiprintf_r+0x5c>
 8004a28:	4629      	mov	r1, r5
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	f000 f938 	bl	8004ca0 <__swsetup_r>
 8004a30:	b170      	cbz	r0, 8004a50 <_vfiprintf_r+0x5c>
 8004a32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a34:	07dc      	lsls	r4, r3, #31
 8004a36:	d504      	bpl.n	8004a42 <_vfiprintf_r+0x4e>
 8004a38:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3c:	b01d      	add	sp, #116	@ 0x74
 8004a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a42:	89ab      	ldrh	r3, [r5, #12]
 8004a44:	0598      	lsls	r0, r3, #22
 8004a46:	d4f7      	bmi.n	8004a38 <_vfiprintf_r+0x44>
 8004a48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a4a:	f7ff fa7b 	bl	8003f44 <__retarget_lock_release_recursive>
 8004a4e:	e7f3      	b.n	8004a38 <_vfiprintf_r+0x44>
 8004a50:	2300      	movs	r3, #0
 8004a52:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a54:	2320      	movs	r3, #32
 8004a56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a5e:	2330      	movs	r3, #48	@ 0x30
 8004a60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004c10 <_vfiprintf_r+0x21c>
 8004a64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a68:	f04f 0901 	mov.w	r9, #1
 8004a6c:	4623      	mov	r3, r4
 8004a6e:	469a      	mov	sl, r3
 8004a70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a74:	b10a      	cbz	r2, 8004a7a <_vfiprintf_r+0x86>
 8004a76:	2a25      	cmp	r2, #37	@ 0x25
 8004a78:	d1f9      	bne.n	8004a6e <_vfiprintf_r+0x7a>
 8004a7a:	ebba 0b04 	subs.w	fp, sl, r4
 8004a7e:	d00b      	beq.n	8004a98 <_vfiprintf_r+0xa4>
 8004a80:	465b      	mov	r3, fp
 8004a82:	4622      	mov	r2, r4
 8004a84:	4629      	mov	r1, r5
 8004a86:	4630      	mov	r0, r6
 8004a88:	f7ff ffa2 	bl	80049d0 <__sfputs_r>
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	f000 80a7 	beq.w	8004be0 <_vfiprintf_r+0x1ec>
 8004a92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a94:	445a      	add	r2, fp
 8004a96:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a98:	f89a 3000 	ldrb.w	r3, [sl]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 809f 	beq.w	8004be0 <_vfiprintf_r+0x1ec>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aac:	f10a 0a01 	add.w	sl, sl, #1
 8004ab0:	9304      	str	r3, [sp, #16]
 8004ab2:	9307      	str	r3, [sp, #28]
 8004ab4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ab8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004aba:	4654      	mov	r4, sl
 8004abc:	2205      	movs	r2, #5
 8004abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ac2:	4853      	ldr	r0, [pc, #332]	@ (8004c10 <_vfiprintf_r+0x21c>)
 8004ac4:	f7fb fbac 	bl	8000220 <memchr>
 8004ac8:	9a04      	ldr	r2, [sp, #16]
 8004aca:	b9d8      	cbnz	r0, 8004b04 <_vfiprintf_r+0x110>
 8004acc:	06d1      	lsls	r1, r2, #27
 8004ace:	bf44      	itt	mi
 8004ad0:	2320      	movmi	r3, #32
 8004ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ad6:	0713      	lsls	r3, r2, #28
 8004ad8:	bf44      	itt	mi
 8004ada:	232b      	movmi	r3, #43	@ 0x2b
 8004adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ae4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ae6:	d015      	beq.n	8004b14 <_vfiprintf_r+0x120>
 8004ae8:	9a07      	ldr	r2, [sp, #28]
 8004aea:	4654      	mov	r4, sl
 8004aec:	2000      	movs	r0, #0
 8004aee:	f04f 0c0a 	mov.w	ip, #10
 8004af2:	4621      	mov	r1, r4
 8004af4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004af8:	3b30      	subs	r3, #48	@ 0x30
 8004afa:	2b09      	cmp	r3, #9
 8004afc:	d94b      	bls.n	8004b96 <_vfiprintf_r+0x1a2>
 8004afe:	b1b0      	cbz	r0, 8004b2e <_vfiprintf_r+0x13a>
 8004b00:	9207      	str	r2, [sp, #28]
 8004b02:	e014      	b.n	8004b2e <_vfiprintf_r+0x13a>
 8004b04:	eba0 0308 	sub.w	r3, r0, r8
 8004b08:	fa09 f303 	lsl.w	r3, r9, r3
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	9304      	str	r3, [sp, #16]
 8004b10:	46a2      	mov	sl, r4
 8004b12:	e7d2      	b.n	8004aba <_vfiprintf_r+0xc6>
 8004b14:	9b03      	ldr	r3, [sp, #12]
 8004b16:	1d19      	adds	r1, r3, #4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	9103      	str	r1, [sp, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bfbb      	ittet	lt
 8004b20:	425b      	neglt	r3, r3
 8004b22:	f042 0202 	orrlt.w	r2, r2, #2
 8004b26:	9307      	strge	r3, [sp, #28]
 8004b28:	9307      	strlt	r3, [sp, #28]
 8004b2a:	bfb8      	it	lt
 8004b2c:	9204      	strlt	r2, [sp, #16]
 8004b2e:	7823      	ldrb	r3, [r4, #0]
 8004b30:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b32:	d10a      	bne.n	8004b4a <_vfiprintf_r+0x156>
 8004b34:	7863      	ldrb	r3, [r4, #1]
 8004b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b38:	d132      	bne.n	8004ba0 <_vfiprintf_r+0x1ac>
 8004b3a:	9b03      	ldr	r3, [sp, #12]
 8004b3c:	1d1a      	adds	r2, r3, #4
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	9203      	str	r2, [sp, #12]
 8004b42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b46:	3402      	adds	r4, #2
 8004b48:	9305      	str	r3, [sp, #20]
 8004b4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004c20 <_vfiprintf_r+0x22c>
 8004b4e:	7821      	ldrb	r1, [r4, #0]
 8004b50:	2203      	movs	r2, #3
 8004b52:	4650      	mov	r0, sl
 8004b54:	f7fb fb64 	bl	8000220 <memchr>
 8004b58:	b138      	cbz	r0, 8004b6a <_vfiprintf_r+0x176>
 8004b5a:	9b04      	ldr	r3, [sp, #16]
 8004b5c:	eba0 000a 	sub.w	r0, r0, sl
 8004b60:	2240      	movs	r2, #64	@ 0x40
 8004b62:	4082      	lsls	r2, r0
 8004b64:	4313      	orrs	r3, r2
 8004b66:	3401      	adds	r4, #1
 8004b68:	9304      	str	r3, [sp, #16]
 8004b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b6e:	4829      	ldr	r0, [pc, #164]	@ (8004c14 <_vfiprintf_r+0x220>)
 8004b70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b74:	2206      	movs	r2, #6
 8004b76:	f7fb fb53 	bl	8000220 <memchr>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d03f      	beq.n	8004bfe <_vfiprintf_r+0x20a>
 8004b7e:	4b26      	ldr	r3, [pc, #152]	@ (8004c18 <_vfiprintf_r+0x224>)
 8004b80:	bb1b      	cbnz	r3, 8004bca <_vfiprintf_r+0x1d6>
 8004b82:	9b03      	ldr	r3, [sp, #12]
 8004b84:	3307      	adds	r3, #7
 8004b86:	f023 0307 	bic.w	r3, r3, #7
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	9303      	str	r3, [sp, #12]
 8004b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b90:	443b      	add	r3, r7
 8004b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b94:	e76a      	b.n	8004a6c <_vfiprintf_r+0x78>
 8004b96:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	e7a8      	b.n	8004af2 <_vfiprintf_r+0xfe>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	3401      	adds	r4, #1
 8004ba4:	9305      	str	r3, [sp, #20]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	f04f 0c0a 	mov.w	ip, #10
 8004bac:	4620      	mov	r0, r4
 8004bae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bb2:	3a30      	subs	r2, #48	@ 0x30
 8004bb4:	2a09      	cmp	r2, #9
 8004bb6:	d903      	bls.n	8004bc0 <_vfiprintf_r+0x1cc>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0c6      	beq.n	8004b4a <_vfiprintf_r+0x156>
 8004bbc:	9105      	str	r1, [sp, #20]
 8004bbe:	e7c4      	b.n	8004b4a <_vfiprintf_r+0x156>
 8004bc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e7f0      	b.n	8004bac <_vfiprintf_r+0x1b8>
 8004bca:	ab03      	add	r3, sp, #12
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	462a      	mov	r2, r5
 8004bd0:	4b12      	ldr	r3, [pc, #72]	@ (8004c1c <_vfiprintf_r+0x228>)
 8004bd2:	a904      	add	r1, sp, #16
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f3af 8000 	nop.w
 8004bda:	4607      	mov	r7, r0
 8004bdc:	1c78      	adds	r0, r7, #1
 8004bde:	d1d6      	bne.n	8004b8e <_vfiprintf_r+0x19a>
 8004be0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004be2:	07d9      	lsls	r1, r3, #31
 8004be4:	d405      	bmi.n	8004bf2 <_vfiprintf_r+0x1fe>
 8004be6:	89ab      	ldrh	r3, [r5, #12]
 8004be8:	059a      	lsls	r2, r3, #22
 8004bea:	d402      	bmi.n	8004bf2 <_vfiprintf_r+0x1fe>
 8004bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bee:	f7ff f9a9 	bl	8003f44 <__retarget_lock_release_recursive>
 8004bf2:	89ab      	ldrh	r3, [r5, #12]
 8004bf4:	065b      	lsls	r3, r3, #25
 8004bf6:	f53f af1f 	bmi.w	8004a38 <_vfiprintf_r+0x44>
 8004bfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bfc:	e71e      	b.n	8004a3c <_vfiprintf_r+0x48>
 8004bfe:	ab03      	add	r3, sp, #12
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	462a      	mov	r2, r5
 8004c04:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <_vfiprintf_r+0x228>)
 8004c06:	a904      	add	r1, sp, #16
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f7ff fc81 	bl	8004510 <_printf_i>
 8004c0e:	e7e4      	b.n	8004bda <_vfiprintf_r+0x1e6>
 8004c10:	08004fe3 	.word	0x08004fe3
 8004c14:	08004fed 	.word	0x08004fed
 8004c18:	00000000 	.word	0x00000000
 8004c1c:	080049d1 	.word	0x080049d1
 8004c20:	08004fe9 	.word	0x08004fe9

08004c24 <__swbuf_r>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	460e      	mov	r6, r1
 8004c28:	4614      	mov	r4, r2
 8004c2a:	4605      	mov	r5, r0
 8004c2c:	b118      	cbz	r0, 8004c36 <__swbuf_r+0x12>
 8004c2e:	6a03      	ldr	r3, [r0, #32]
 8004c30:	b90b      	cbnz	r3, 8004c36 <__swbuf_r+0x12>
 8004c32:	f7ff f871 	bl	8003d18 <__sinit>
 8004c36:	69a3      	ldr	r3, [r4, #24]
 8004c38:	60a3      	str	r3, [r4, #8]
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	071a      	lsls	r2, r3, #28
 8004c3e:	d501      	bpl.n	8004c44 <__swbuf_r+0x20>
 8004c40:	6923      	ldr	r3, [r4, #16]
 8004c42:	b943      	cbnz	r3, 8004c56 <__swbuf_r+0x32>
 8004c44:	4621      	mov	r1, r4
 8004c46:	4628      	mov	r0, r5
 8004c48:	f000 f82a 	bl	8004ca0 <__swsetup_r>
 8004c4c:	b118      	cbz	r0, 8004c56 <__swbuf_r+0x32>
 8004c4e:	f04f 37ff 	mov.w	r7, #4294967295
 8004c52:	4638      	mov	r0, r7
 8004c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	6922      	ldr	r2, [r4, #16]
 8004c5a:	1a98      	subs	r0, r3, r2
 8004c5c:	6963      	ldr	r3, [r4, #20]
 8004c5e:	b2f6      	uxtb	r6, r6
 8004c60:	4283      	cmp	r3, r0
 8004c62:	4637      	mov	r7, r6
 8004c64:	dc05      	bgt.n	8004c72 <__swbuf_r+0x4e>
 8004c66:	4621      	mov	r1, r4
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f7ff fdf3 	bl	8004854 <_fflush_r>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d1ed      	bne.n	8004c4e <__swbuf_r+0x2a>
 8004c72:	68a3      	ldr	r3, [r4, #8]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	60a3      	str	r3, [r4, #8]
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	6022      	str	r2, [r4, #0]
 8004c7e:	701e      	strb	r6, [r3, #0]
 8004c80:	6962      	ldr	r2, [r4, #20]
 8004c82:	1c43      	adds	r3, r0, #1
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d004      	beq.n	8004c92 <__swbuf_r+0x6e>
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	07db      	lsls	r3, r3, #31
 8004c8c:	d5e1      	bpl.n	8004c52 <__swbuf_r+0x2e>
 8004c8e:	2e0a      	cmp	r6, #10
 8004c90:	d1df      	bne.n	8004c52 <__swbuf_r+0x2e>
 8004c92:	4621      	mov	r1, r4
 8004c94:	4628      	mov	r0, r5
 8004c96:	f7ff fddd 	bl	8004854 <_fflush_r>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d0d9      	beq.n	8004c52 <__swbuf_r+0x2e>
 8004c9e:	e7d6      	b.n	8004c4e <__swbuf_r+0x2a>

08004ca0 <__swsetup_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4b29      	ldr	r3, [pc, #164]	@ (8004d48 <__swsetup_r+0xa8>)
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	460c      	mov	r4, r1
 8004caa:	b118      	cbz	r0, 8004cb4 <__swsetup_r+0x14>
 8004cac:	6a03      	ldr	r3, [r0, #32]
 8004cae:	b90b      	cbnz	r3, 8004cb4 <__swsetup_r+0x14>
 8004cb0:	f7ff f832 	bl	8003d18 <__sinit>
 8004cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cb8:	0719      	lsls	r1, r3, #28
 8004cba:	d422      	bmi.n	8004d02 <__swsetup_r+0x62>
 8004cbc:	06da      	lsls	r2, r3, #27
 8004cbe:	d407      	bmi.n	8004cd0 <__swsetup_r+0x30>
 8004cc0:	2209      	movs	r2, #9
 8004cc2:	602a      	str	r2, [r5, #0]
 8004cc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cc8:	81a3      	strh	r3, [r4, #12]
 8004cca:	f04f 30ff 	mov.w	r0, #4294967295
 8004cce:	e033      	b.n	8004d38 <__swsetup_r+0x98>
 8004cd0:	0758      	lsls	r0, r3, #29
 8004cd2:	d512      	bpl.n	8004cfa <__swsetup_r+0x5a>
 8004cd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cd6:	b141      	cbz	r1, 8004cea <__swsetup_r+0x4a>
 8004cd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cdc:	4299      	cmp	r1, r3
 8004cde:	d002      	beq.n	8004ce6 <__swsetup_r+0x46>
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f7ff f94f 	bl	8003f84 <_free_r>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	6063      	str	r3, [r4, #4]
 8004cf6:	6923      	ldr	r3, [r4, #16]
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	89a3      	ldrh	r3, [r4, #12]
 8004cfc:	f043 0308 	orr.w	r3, r3, #8
 8004d00:	81a3      	strh	r3, [r4, #12]
 8004d02:	6923      	ldr	r3, [r4, #16]
 8004d04:	b94b      	cbnz	r3, 8004d1a <__swsetup_r+0x7a>
 8004d06:	89a3      	ldrh	r3, [r4, #12]
 8004d08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d10:	d003      	beq.n	8004d1a <__swsetup_r+0x7a>
 8004d12:	4621      	mov	r1, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 f88b 	bl	8004e30 <__smakebuf_r>
 8004d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d1e:	f013 0201 	ands.w	r2, r3, #1
 8004d22:	d00a      	beq.n	8004d3a <__swsetup_r+0x9a>
 8004d24:	2200      	movs	r2, #0
 8004d26:	60a2      	str	r2, [r4, #8]
 8004d28:	6962      	ldr	r2, [r4, #20]
 8004d2a:	4252      	negs	r2, r2
 8004d2c:	61a2      	str	r2, [r4, #24]
 8004d2e:	6922      	ldr	r2, [r4, #16]
 8004d30:	b942      	cbnz	r2, 8004d44 <__swsetup_r+0xa4>
 8004d32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d36:	d1c5      	bne.n	8004cc4 <__swsetup_r+0x24>
 8004d38:	bd38      	pop	{r3, r4, r5, pc}
 8004d3a:	0799      	lsls	r1, r3, #30
 8004d3c:	bf58      	it	pl
 8004d3e:	6962      	ldrpl	r2, [r4, #20]
 8004d40:	60a2      	str	r2, [r4, #8]
 8004d42:	e7f4      	b.n	8004d2e <__swsetup_r+0x8e>
 8004d44:	2000      	movs	r0, #0
 8004d46:	e7f7      	b.n	8004d38 <__swsetup_r+0x98>
 8004d48:	20000220 	.word	0x20000220

08004d4c <_raise_r>:
 8004d4c:	291f      	cmp	r1, #31
 8004d4e:	b538      	push	{r3, r4, r5, lr}
 8004d50:	4605      	mov	r5, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	d904      	bls.n	8004d60 <_raise_r+0x14>
 8004d56:	2316      	movs	r3, #22
 8004d58:	6003      	str	r3, [r0, #0]
 8004d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004d62:	b112      	cbz	r2, 8004d6a <_raise_r+0x1e>
 8004d64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d68:	b94b      	cbnz	r3, 8004d7e <_raise_r+0x32>
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f000 f830 	bl	8004dd0 <_getpid_r>
 8004d70:	4622      	mov	r2, r4
 8004d72:	4601      	mov	r1, r0
 8004d74:	4628      	mov	r0, r5
 8004d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d7a:	f000 b817 	b.w	8004dac <_kill_r>
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d00a      	beq.n	8004d98 <_raise_r+0x4c>
 8004d82:	1c59      	adds	r1, r3, #1
 8004d84:	d103      	bne.n	8004d8e <_raise_r+0x42>
 8004d86:	2316      	movs	r3, #22
 8004d88:	6003      	str	r3, [r0, #0]
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	e7e7      	b.n	8004d5e <_raise_r+0x12>
 8004d8e:	2100      	movs	r1, #0
 8004d90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004d94:	4620      	mov	r0, r4
 8004d96:	4798      	blx	r3
 8004d98:	2000      	movs	r0, #0
 8004d9a:	e7e0      	b.n	8004d5e <_raise_r+0x12>

08004d9c <raise>:
 8004d9c:	4b02      	ldr	r3, [pc, #8]	@ (8004da8 <raise+0xc>)
 8004d9e:	4601      	mov	r1, r0
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	f7ff bfd3 	b.w	8004d4c <_raise_r>
 8004da6:	bf00      	nop
 8004da8:	20000220 	.word	0x20000220

08004dac <_kill_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4d07      	ldr	r5, [pc, #28]	@ (8004dcc <_kill_r+0x20>)
 8004db0:	2300      	movs	r3, #0
 8004db2:	4604      	mov	r4, r0
 8004db4:	4608      	mov	r0, r1
 8004db6:	4611      	mov	r1, r2
 8004db8:	602b      	str	r3, [r5, #0]
 8004dba:	f7fb ff40 	bl	8000c3e <_kill>
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	d102      	bne.n	8004dc8 <_kill_r+0x1c>
 8004dc2:	682b      	ldr	r3, [r5, #0]
 8004dc4:	b103      	cbz	r3, 8004dc8 <_kill_r+0x1c>
 8004dc6:	6023      	str	r3, [r4, #0]
 8004dc8:	bd38      	pop	{r3, r4, r5, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000740 	.word	0x20000740

08004dd0 <_getpid_r>:
 8004dd0:	f7fb bf2d 	b.w	8000c2e <_getpid>

08004dd4 <_malloc_usable_size_r>:
 8004dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dd8:	1f18      	subs	r0, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bfbc      	itt	lt
 8004dde:	580b      	ldrlt	r3, [r1, r0]
 8004de0:	18c0      	addlt	r0, r0, r3
 8004de2:	4770      	bx	lr

08004de4 <__swhatbuf_r>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	460c      	mov	r4, r1
 8004de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dec:	2900      	cmp	r1, #0
 8004dee:	b096      	sub	sp, #88	@ 0x58
 8004df0:	4615      	mov	r5, r2
 8004df2:	461e      	mov	r6, r3
 8004df4:	da0d      	bge.n	8004e12 <__swhatbuf_r+0x2e>
 8004df6:	89a3      	ldrh	r3, [r4, #12]
 8004df8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004dfc:	f04f 0100 	mov.w	r1, #0
 8004e00:	bf14      	ite	ne
 8004e02:	2340      	movne	r3, #64	@ 0x40
 8004e04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004e08:	2000      	movs	r0, #0
 8004e0a:	6031      	str	r1, [r6, #0]
 8004e0c:	602b      	str	r3, [r5, #0]
 8004e0e:	b016      	add	sp, #88	@ 0x58
 8004e10:	bd70      	pop	{r4, r5, r6, pc}
 8004e12:	466a      	mov	r2, sp
 8004e14:	f000 f848 	bl	8004ea8 <_fstat_r>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	dbec      	blt.n	8004df6 <__swhatbuf_r+0x12>
 8004e1c:	9901      	ldr	r1, [sp, #4]
 8004e1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004e22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004e26:	4259      	negs	r1, r3
 8004e28:	4159      	adcs	r1, r3
 8004e2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e2e:	e7eb      	b.n	8004e08 <__swhatbuf_r+0x24>

08004e30 <__smakebuf_r>:
 8004e30:	898b      	ldrh	r3, [r1, #12]
 8004e32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e34:	079d      	lsls	r5, r3, #30
 8004e36:	4606      	mov	r6, r0
 8004e38:	460c      	mov	r4, r1
 8004e3a:	d507      	bpl.n	8004e4c <__smakebuf_r+0x1c>
 8004e3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	6123      	str	r3, [r4, #16]
 8004e44:	2301      	movs	r3, #1
 8004e46:	6163      	str	r3, [r4, #20]
 8004e48:	b003      	add	sp, #12
 8004e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e4c:	ab01      	add	r3, sp, #4
 8004e4e:	466a      	mov	r2, sp
 8004e50:	f7ff ffc8 	bl	8004de4 <__swhatbuf_r>
 8004e54:	9f00      	ldr	r7, [sp, #0]
 8004e56:	4605      	mov	r5, r0
 8004e58:	4639      	mov	r1, r7
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f7ff f906 	bl	800406c <_malloc_r>
 8004e60:	b948      	cbnz	r0, 8004e76 <__smakebuf_r+0x46>
 8004e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e66:	059a      	lsls	r2, r3, #22
 8004e68:	d4ee      	bmi.n	8004e48 <__smakebuf_r+0x18>
 8004e6a:	f023 0303 	bic.w	r3, r3, #3
 8004e6e:	f043 0302 	orr.w	r3, r3, #2
 8004e72:	81a3      	strh	r3, [r4, #12]
 8004e74:	e7e2      	b.n	8004e3c <__smakebuf_r+0xc>
 8004e76:	89a3      	ldrh	r3, [r4, #12]
 8004e78:	6020      	str	r0, [r4, #0]
 8004e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e7e:	81a3      	strh	r3, [r4, #12]
 8004e80:	9b01      	ldr	r3, [sp, #4]
 8004e82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004e86:	b15b      	cbz	r3, 8004ea0 <__smakebuf_r+0x70>
 8004e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	f000 f81d 	bl	8004ecc <_isatty_r>
 8004e92:	b128      	cbz	r0, 8004ea0 <__smakebuf_r+0x70>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	f043 0301 	orr.w	r3, r3, #1
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	431d      	orrs	r5, r3
 8004ea4:	81a5      	strh	r5, [r4, #12]
 8004ea6:	e7cf      	b.n	8004e48 <__smakebuf_r+0x18>

08004ea8 <_fstat_r>:
 8004ea8:	b538      	push	{r3, r4, r5, lr}
 8004eaa:	4d07      	ldr	r5, [pc, #28]	@ (8004ec8 <_fstat_r+0x20>)
 8004eac:	2300      	movs	r3, #0
 8004eae:	4604      	mov	r4, r0
 8004eb0:	4608      	mov	r0, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	602b      	str	r3, [r5, #0]
 8004eb6:	f7fb ff22 	bl	8000cfe <_fstat>
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	d102      	bne.n	8004ec4 <_fstat_r+0x1c>
 8004ebe:	682b      	ldr	r3, [r5, #0]
 8004ec0:	b103      	cbz	r3, 8004ec4 <_fstat_r+0x1c>
 8004ec2:	6023      	str	r3, [r4, #0]
 8004ec4:	bd38      	pop	{r3, r4, r5, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000740 	.word	0x20000740

08004ecc <_isatty_r>:
 8004ecc:	b538      	push	{r3, r4, r5, lr}
 8004ece:	4d06      	ldr	r5, [pc, #24]	@ (8004ee8 <_isatty_r+0x1c>)
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	4608      	mov	r0, r1
 8004ed6:	602b      	str	r3, [r5, #0]
 8004ed8:	f7fb ff21 	bl	8000d1e <_isatty>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	d102      	bne.n	8004ee6 <_isatty_r+0x1a>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	b103      	cbz	r3, 8004ee6 <_isatty_r+0x1a>
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	20000740 	.word	0x20000740

08004eec <_init>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	bf00      	nop
 8004ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef2:	bc08      	pop	{r3}
 8004ef4:	469e      	mov	lr, r3
 8004ef6:	4770      	bx	lr

08004ef8 <_fini>:
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	bf00      	nop
 8004efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efe:	bc08      	pop	{r3}
 8004f00:	469e      	mov	lr, r3
 8004f02:	4770      	bx	lr
