
SPI_FullDuplex_ComDMA_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002870  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002a48  08002a48  00003a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a58  08002a58  00004094  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002a58  08002a58  00004094  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002a58  08002a58  00004094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a58  08002a58  00003a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a5c  08002a5c  00003a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08002a60  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000094  08002af4  00004094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08002af4  00004268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000a00a  00000000  00000000  000040c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000008b  00000000  00000000  0000e0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000880d  00000000  00000000  0000e159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a6e  00000000  00000000  00016966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008c8  00000000  00000000  000183d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e776c  00000000  00000000  00018ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000068f  00000000  00000000  0010040c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002446f  00000000  00000000  00100a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124f0a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000227c  00000000  00000000  00124f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000094 	.word	0x20000094
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002a30 	.word	0x08002a30

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000098 	.word	0x20000098
 8000214:	08002a30 	.word	0x08002a30

08000218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000218:	480d      	ldr	r0, [pc, #52]	@ (8000250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480d      	ldr	r0, [pc, #52]	@ (8000254 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490e      	ldr	r1, [pc, #56]	@ (8000258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0e      	ldr	r2, [pc, #56]	@ (800025c <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0b      	ldr	r2, [pc, #44]	@ (8000260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0b      	ldr	r4, [pc, #44]	@ (8000264 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000242:	f000 fb4f 	bl	80008e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000246:	f002 fbcf 	bl	80029e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800024a:	f000 f80f 	bl	800026c <main>

0800024e <LoopForever>:

LoopForever:
    b LoopForever
 800024e:	e7fe      	b.n	800024e <LoopForever>
  ldr   r0, =_estack
 8000250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000258:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800025c:	08002a60 	.word	0x08002a60
  ldr r2, =_sbss
 8000260:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000264:	20000268 	.word	0x20000268

08000268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000268:	e7fe      	b.n	8000268 <ADC1_2_IRQHandler>
	...

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000272:	f000 fb4d 	bl	8000910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000276:	f000 f859 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027a:	f000 f90d 	bl	8000498 <MX_GPIO_Init>
  MX_DMA_Init();
 800027e:	f000 f8d9 	bl	8000434 <MX_DMA_Init>
  MX_SPI1_Init();
 8000282:	f000 f89f 	bl	80003c4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED2);
 8000286:	2000      	movs	r0, #0
 8000288:	f000 fab4 	bl	80007f4 <BSP_LED_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_StatusTypeDef state_res = HAL_SPI_GetState(&hspi1);
 800028c:	4820      	ldr	r0, [pc, #128]	@ (8000310 <main+0xa4>)
 800028e:	f002 f901 	bl	8002494 <HAL_SPI_GetState>
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]

	  if(Transfer_Init)
 8000296:	4b1f      	ldr	r3, [pc, #124]	@ (8000314 <main+0xa8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00f      	beq.n	80002be <main+0x52>
	  {
		  HAL_StatusTypeDef res = HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE);
 800029e:	237f      	movs	r3, #127	@ 0x7f
 80002a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000318 <main+0xac>)
 80002a2:	491e      	ldr	r1, [pc, #120]	@ (800031c <main+0xb0>)
 80002a4:	481a      	ldr	r0, [pc, #104]	@ (8000310 <main+0xa4>)
 80002a6:	f001 ff51 	bl	800214c <HAL_SPI_TransmitReceive_DMA>
 80002aa:	4603      	mov	r3, r0
 80002ac:	71bb      	strb	r3, [r7, #6]
		  if ( res != HAL_OK)
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <main+0x4c>
		  {
		    /* Transfer error in transmission process */
		    Error_Handler();
 80002b4:	f000 f968 	bl	8000588 <Error_Handler>
		  }
		  Transfer_Init=0;
 80002b8:	4b16      	ldr	r3, [pc, #88]	@ (8000314 <main+0xa8>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
	      to get the transfer complete confirmation or an error detection.
	      For simplicity reasons, this example is just waiting till the end of the
	      transfer, but application may perform other tasks while transfer operation
	      is ongoing. */

	  while (wTransferState == TRANSFER_WAIT)
 80002be:	bf00      	nop
 80002c0:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <main+0xb4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0fb      	beq.n	80002c0 <main+0x54>
	  {
	  }

	  switch (wTransferState)
 80002c8:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <main+0xb4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d002      	beq.n	80002d6 <main+0x6a>
 80002d0:	2b02      	cmp	r3, #2
 80002d2:	d014      	beq.n	80002fe <main+0x92>
 80002d4:	e01a      	b.n	800030c <main+0xa0>
	  {
	    case TRANSFER_COMPLETE :
	      /*##-3- Compare the sent and received buffers ##############################*/
	      if (Buffercmp((uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE)==0)
 80002d6:	227f      	movs	r2, #127	@ 0x7f
 80002d8:	490f      	ldr	r1, [pc, #60]	@ (8000318 <main+0xac>)
 80002da:	4810      	ldr	r0, [pc, #64]	@ (800031c <main+0xb0>)
 80002dc:	f000 f932 	bl	8000544 <Buffercmp>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d111      	bne.n	800030a <main+0x9e>
	      {
	        // all good!
	    	BSP_LED_Toggle(LED2);
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 fae6 	bl	80008b8 <BSP_LED_Toggle>
	    	wTransferState = TRANSFER_PROCESSED;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <main+0xb4>)
 80002ee:	2203      	movs	r2, #3
 80002f0:	601a      	str	r2, [r3, #0]
	    	Transfer_Process_Counter++;
 80002f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <main+0xb8>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	3301      	adds	r3, #1
 80002f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <main+0xb8>)
 80002fa:	6013      	str	r3, [r2, #0]
//	    	HAL_SPI_DMAStop(&hspi1);
//	    	HAL_SPI_DMAResume(&hspi1);
//	    	HAL_DMA_STATE_READY()
	      }
	      break;
 80002fc:	e005      	b.n	800030a <main+0x9e>

	    case TRANSFER_ERROR:
			Transfer_Error_Counter++;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000328 <main+0xbc>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	3301      	adds	r3, #1
 8000304:	4a08      	ldr	r2, [pc, #32]	@ (8000328 <main+0xbc>)
 8000306:	6013      	str	r3, [r2, #0]
	      break;
 8000308:	e000      	b.n	800030c <main+0xa0>
	      break;
 800030a:	bf00      	nop
  {
 800030c:	e7be      	b.n	800028c <main+0x20>
 800030e:	bf00      	nop
 8000310:	200000b0 	.word	0x200000b0
 8000314:	20000080 	.word	0x20000080
 8000318:	200001d4 	.word	0x200001d4
 800031c:	20000000 	.word	0x20000000
 8000320:	20000254 	.word	0x20000254
 8000324:	2000025c 	.word	0x2000025c
 8000328:	20000258 	.word	0x20000258

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b094      	sub	sp, #80	@ 0x50
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2238      	movs	r2, #56	@ 0x38
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f002 fb4c 	bl	80029d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800034e:	2000      	movs	r0, #0
 8000350:	f001 f8a6 	bl	80014a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000354:	2302      	movs	r3, #2
 8000356:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800035c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035e:	2340      	movs	r3, #64	@ 0x40
 8000360:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	2302      	movs	r3, #2
 8000364:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000366:	2302      	movs	r3, #2
 8000368:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800036a:	2304      	movs	r3, #4
 800036c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800036e:	2355      	movs	r3, #85	@ 0x55
 8000370:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000372:	2302      	movs	r3, #2
 8000374:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000376:	2302      	movs	r3, #2
 8000378:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800037a:	2302      	movs	r3, #2
 800037c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	4618      	mov	r0, r3
 8000384:	f001 f940 	bl	8001608 <HAL_RCC_OscConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800038e:	f000 f8fb 	bl	8000588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000392:	230f      	movs	r3, #15
 8000394:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000396:	2303      	movs	r3, #3
 8000398:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2104      	movs	r1, #4
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 fc3e 	bl	8001c2c <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80003b6:	f000 f8e7 	bl	8000588 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3750      	adds	r7, #80	@ 0x50
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c8:	4b18      	ldr	r3, [pc, #96]	@ (800042c <MX_SPI1_Init+0x68>)
 80003ca:	4a19      	ldr	r2, [pc, #100]	@ (8000430 <MX_SPI1_Init+0x6c>)
 80003cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80003ce:	4b17      	ldr	r3, [pc, #92]	@ (800042c <MX_SPI1_Init+0x68>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d4:	4b15      	ldr	r3, [pc, #84]	@ (800042c <MX_SPI1_Init+0x68>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003da:	4b14      	ldr	r3, [pc, #80]	@ (800042c <MX_SPI1_Init+0x68>)
 80003dc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80003e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e2:	4b12      	ldr	r3, [pc, #72]	@ (800042c <MX_SPI1_Init+0x68>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e8:	4b10      	ldr	r3, [pc, #64]	@ (800042c <MX_SPI1_Init+0x68>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80003ee:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_SPI1_Init+0x68>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f4:	4b0d      	ldr	r3, [pc, #52]	@ (800042c <MX_SPI1_Init+0x68>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003fa:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <MX_SPI1_Init+0x68>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000400:	4b0a      	ldr	r3, [pc, #40]	@ (800042c <MX_SPI1_Init+0x68>)
 8000402:	2200      	movs	r2, #0
 8000404:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000406:	4b09      	ldr	r3, [pc, #36]	@ (800042c <MX_SPI1_Init+0x68>)
 8000408:	2207      	movs	r2, #7
 800040a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800040c:	4b07      	ldr	r3, [pc, #28]	@ (800042c <MX_SPI1_Init+0x68>)
 800040e:	2200      	movs	r2, #0
 8000410:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <MX_SPI1_Init+0x68>)
 8000414:	2200      	movs	r2, #0
 8000416:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000418:	4804      	ldr	r0, [pc, #16]	@ (800042c <MX_SPI1_Init+0x68>)
 800041a:	f001 fdeb 	bl	8001ff4 <HAL_SPI_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000424:	f000 f8b0 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	200000b0 	.word	0x200000b0
 8000430:	40013000 	.word	0x40013000

08000434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800043a:	4b16      	ldr	r3, [pc, #88]	@ (8000494 <MX_DMA_Init+0x60>)
 800043c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800043e:	4a15      	ldr	r2, [pc, #84]	@ (8000494 <MX_DMA_Init+0x60>)
 8000440:	f043 0304 	orr.w	r3, r3, #4
 8000444:	6493      	str	r3, [r2, #72]	@ 0x48
 8000446:	4b13      	ldr	r3, [pc, #76]	@ (8000494 <MX_DMA_Init+0x60>)
 8000448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800044a:	f003 0304 	and.w	r3, r3, #4
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000452:	4b10      	ldr	r3, [pc, #64]	@ (8000494 <MX_DMA_Init+0x60>)
 8000454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000456:	4a0f      	ldr	r2, [pc, #60]	@ (8000494 <MX_DMA_Init+0x60>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6493      	str	r3, [r2, #72]	@ 0x48
 800045e:	4b0d      	ldr	r3, [pc, #52]	@ (8000494 <MX_DMA_Init+0x60>)
 8000460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	200c      	movs	r0, #12
 8000470:	f000 fbbb 	bl	8000bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000474:	200c      	movs	r0, #12
 8000476:	f000 fbd2 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200d      	movs	r0, #13
 8000480:	f000 fbb3 	bl	8000bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000484:	200d      	movs	r0, #13
 8000486:	f000 fbca 	bl	8000c1e <HAL_NVIC_EnableIRQ>

}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000

08000498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <MX_GPIO_Init+0x44>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a2:	4a0e      	ldr	r2, [pc, #56]	@ (80004dc <MX_GPIO_Init+0x44>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004aa:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <MX_GPIO_Init+0x44>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b6:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <MX_GPIO_Init+0x44>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ba:	4a08      	ldr	r2, [pc, #32]	@ (80004dc <MX_GPIO_Init+0x44>)
 80004bc:	f043 0302 	orr.w	r3, r3, #2
 80004c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004c2:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <MX_GPIO_Init+0x44>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c6:	f003 0302 	and.w	r3, r3, #2
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  static int callbacks;
  /* Turn LED2 on: Transfer in transmission/reception process is complete */
  wTransferState = TRANSFER_COMPLETE;
 80004e8:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <HAL_SPI_TxRxCpltCallback+0x30>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	601a      	str	r2, [r3, #0]

  volatile HAL_StatusTypeDef res = HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE);
 80004ee:	237f      	movs	r3, #127	@ 0x7f
 80004f0:	4a08      	ldr	r2, [pc, #32]	@ (8000514 <HAL_SPI_TxRxCpltCallback+0x34>)
 80004f2:	4909      	ldr	r1, [pc, #36]	@ (8000518 <HAL_SPI_TxRxCpltCallback+0x38>)
 80004f4:	4809      	ldr	r0, [pc, #36]	@ (800051c <HAL_SPI_TxRxCpltCallback+0x3c>)
 80004f6:	f001 fe29 	bl	800214c <HAL_SPI_TransmitReceive_DMA>
 80004fa:	4603      	mov	r3, r0
 80004fc:	73fb      	strb	r3, [r7, #15]

  callbacks++;
 80004fe:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <HAL_SPI_TxRxCpltCallback+0x40>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	3301      	adds	r3, #1
 8000504:	4a06      	ldr	r2, [pc, #24]	@ (8000520 <HAL_SPI_TxRxCpltCallback+0x40>)
 8000506:	6013      	str	r3, [r2, #0]
}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000254 	.word	0x20000254
 8000514:	200001d4 	.word	0x200001d4
 8000518:	20000000 	.word	0x20000000
 800051c:	200000b0 	.word	0x200000b0
 8000520:	20000260 	.word	0x20000260

08000524 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 800052c:	4b04      	ldr	r3, [pc, #16]	@ (8000540 <HAL_SPI_ErrorCallback+0x1c>)
 800052e:	2202      	movs	r2, #2
 8000530:	601a      	str	r2, [r3, #0]
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000254 	.word	0x20000254

08000544 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint8_t *pBuffer1, uint8_t *pBuffer2, uint16_t BufferLength)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	4613      	mov	r3, r2
 8000550:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 8000552:	e00d      	b.n	8000570 <Buffercmp+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	429a      	cmp	r2, r3
 800055e:	d001      	beq.n	8000564 <Buffercmp+0x20>
    {
      return BufferLength;
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	e00b      	b.n	800057c <Buffercmp+0x38>
    }
    pBuffer1++;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	3301      	adds	r3, #1
 8000568:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	3301      	adds	r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	1e5a      	subs	r2, r3, #1
 8000574:	80fa      	strh	r2, [r7, #6]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1ec      	bne.n	8000554 <Buffercmp+0x10>
  }

  return 0;
 800057a:	2300      	movs	r3, #0
}
 800057c:	4618      	mov	r0, r3
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_Off(LED2);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f97d 	bl	800088c <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8000592:	2000      	movs	r0, #0
 8000594:	f000 f97a 	bl	800088c <BSP_LED_Off>
  while (1)
  {
    /* Toggle LED2 for error */
	BSP_LED_On(LED2);
 8000598:	2000      	movs	r0, #0
 800059a:	f000 f961 	bl	8000860 <BSP_LED_On>
    HAL_Delay(1000);
 800059e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a2:	f000 fa25 	bl	80009f0 <HAL_Delay>
	BSP_LED_On(LED2);
 80005a6:	bf00      	nop
 80005a8:	e7f6      	b.n	8000598 <Error_Handler+0x10>
	...

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b2:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <HAL_MspInit+0x44>)
 80005b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005b6:	4a0e      	ldr	r2, [pc, #56]	@ (80005f0 <HAL_MspInit+0x44>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80005be:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <HAL_MspInit+0x44>)
 80005c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <HAL_MspInit+0x44>)
 80005cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ce:	4a08      	ldr	r2, [pc, #32]	@ (80005f0 <HAL_MspInit+0x44>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_MspInit+0x44>)
 80005d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005e2:	f001 f801 	bl	80015e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000

080005f4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a57      	ldr	r2, [pc, #348]	@ (8000770 <HAL_SPI_MspInit+0x17c>)
 8000612:	4293      	cmp	r3, r2
 8000614:	f040 80a8 	bne.w	8000768 <HAL_SPI_MspInit+0x174>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000618:	4b56      	ldr	r3, [pc, #344]	@ (8000774 <HAL_SPI_MspInit+0x180>)
 800061a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800061c:	4a55      	ldr	r2, [pc, #340]	@ (8000774 <HAL_SPI_MspInit+0x180>)
 800061e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000622:	6613      	str	r3, [r2, #96]	@ 0x60
 8000624:	4b53      	ldr	r3, [pc, #332]	@ (8000774 <HAL_SPI_MspInit+0x180>)
 8000626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000628:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b50      	ldr	r3, [pc, #320]	@ (8000774 <HAL_SPI_MspInit+0x180>)
 8000632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000634:	4a4f      	ldr	r2, [pc, #316]	@ (8000774 <HAL_SPI_MspInit+0x180>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063c:	4b4d      	ldr	r3, [pc, #308]	@ (8000774 <HAL_SPI_MspInit+0x180>)
 800063e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b4a      	ldr	r3, [pc, #296]	@ (8000774 <HAL_SPI_MspInit+0x180>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a49      	ldr	r2, [pc, #292]	@ (8000774 <HAL_SPI_MspInit+0x180>)
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b47      	ldr	r3, [pc, #284]	@ (8000774 <HAL_SPI_MspInit+0x180>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f003 0302 	and.w	r3, r3, #2
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000660:	2310      	movs	r3, #16
 8000662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	2302      	movs	r3, #2
 8000666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000670:	2305      	movs	r3, #5
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067e:	f000 fd5b 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000682:	2318      	movs	r3, #24
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000692:	2305      	movs	r3, #5
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4836      	ldr	r0, [pc, #216]	@ (8000778 <HAL_SPI_MspInit+0x184>)
 800069e:	f000 fd4b 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006a2:	2320      	movs	r3, #32
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006b2:	2305      	movs	r3, #5
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	482e      	ldr	r0, [pc, #184]	@ (8000778 <HAL_SPI_MspInit+0x184>)
 80006be:	f000 fd3b 	bl	8001138 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80006c2:	4b2e      	ldr	r3, [pc, #184]	@ (800077c <HAL_SPI_MspInit+0x188>)
 80006c4:	4a2e      	ldr	r2, [pc, #184]	@ (8000780 <HAL_SPI_MspInit+0x18c>)
 80006c6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80006c8:	4b2c      	ldr	r3, [pc, #176]	@ (800077c <HAL_SPI_MspInit+0x188>)
 80006ca:	220b      	movs	r2, #11
 80006cc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006ce:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <HAL_SPI_MspInit+0x188>)
 80006d0:	2210      	movs	r2, #16
 80006d2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006d4:	4b29      	ldr	r3, [pc, #164]	@ (800077c <HAL_SPI_MspInit+0x188>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006da:	4b28      	ldr	r3, [pc, #160]	@ (800077c <HAL_SPI_MspInit+0x188>)
 80006dc:	2280      	movs	r2, #128	@ 0x80
 80006de:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006e0:	4b26      	ldr	r3, [pc, #152]	@ (800077c <HAL_SPI_MspInit+0x188>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006e6:	4b25      	ldr	r3, [pc, #148]	@ (800077c <HAL_SPI_MspInit+0x188>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80006ec:	4b23      	ldr	r3, [pc, #140]	@ (800077c <HAL_SPI_MspInit+0x188>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006f2:	4b22      	ldr	r3, [pc, #136]	@ (800077c <HAL_SPI_MspInit+0x188>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80006f8:	4820      	ldr	r0, [pc, #128]	@ (800077c <HAL_SPI_MspInit+0x188>)
 80006fa:	f000 faab 	bl	8000c54 <HAL_DMA_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8000704:	f7ff ff40 	bl	8000588 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <HAL_SPI_MspInit+0x188>)
 800070c:	655a      	str	r2, [r3, #84]	@ 0x54
 800070e:	4a1b      	ldr	r2, [pc, #108]	@ (800077c <HAL_SPI_MspInit+0x188>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <HAL_SPI_MspInit+0x190>)
 8000716:	4a1c      	ldr	r2, [pc, #112]	@ (8000788 <HAL_SPI_MspInit+0x194>)
 8000718:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <HAL_SPI_MspInit+0x190>)
 800071c:	220a      	movs	r2, #10
 800071e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <HAL_SPI_MspInit+0x190>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <HAL_SPI_MspInit+0x190>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <HAL_SPI_MspInit+0x190>)
 800072e:	2280      	movs	r2, #128	@ 0x80
 8000730:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <HAL_SPI_MspInit+0x190>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <HAL_SPI_MspInit+0x190>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <HAL_SPI_MspInit+0x190>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <HAL_SPI_MspInit+0x190>)
 8000746:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800074a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <HAL_SPI_MspInit+0x190>)
 800074e:	f000 fa81 	bl	8000c54 <HAL_DMA_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 8000758:	f7ff ff16 	bl	8000588 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a09      	ldr	r2, [pc, #36]	@ (8000784 <HAL_SPI_MspInit+0x190>)
 8000760:	659a      	str	r2, [r3, #88]	@ 0x58
 8000762:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <HAL_SPI_MspInit+0x190>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	@ 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40013000 	.word	0x40013000
 8000774:	40021000 	.word	0x40021000
 8000778:	48000400 	.word	0x48000400
 800077c:	20000114 	.word	0x20000114
 8000780:	40020030 	.word	0x40020030
 8000784:	20000174 	.word	0x20000174
 8000788:	4002001c 	.word	0x4002001c

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	bf00      	nop
 80007a0:	e7fd      	b.n	800079e <HardFault_Handler+0x4>

080007a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c2:	f000 f8f7 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80007d0:	4802      	ldr	r0, [pc, #8]	@ (80007dc <DMA1_Channel2_IRQHandler+0x10>)
 80007d2:	f000 fb62 	bl	8000e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000174 	.word	0x20000174

080007e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80007e4:	4802      	ldr	r0, [pc, #8]	@ (80007f0 <DMA1_Channel3_IRQHandler+0x10>)
 80007e6:	f000 fb58 	bl	8000e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000114 	.word	0x20000114

080007f4 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80007fe:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <BSP_LED_Init+0x64>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a15      	ldr	r2, [pc, #84]	@ (8000858 <BSP_LED_Init+0x64>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <BSP_LED_Init+0x64>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000816:	2320      	movs	r3, #32
 8000818:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4a0c      	ldr	r2, [pc, #48]	@ (800085c <BSP_LED_Init+0x68>)
 800082a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082e:	f107 020c 	add.w	r2, r7, #12
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fc7f 	bl	8001138 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4a07      	ldr	r2, [pc, #28]	@ (800085c <BSP_LED_Init+0x68>)
 800083e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000842:	2120      	movs	r1, #32
 8000844:	2200      	movs	r2, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fdf8 	bl	800143c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000
 800085c:	20000084 	.word	0x20000084

08000860 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4a06      	ldr	r2, [pc, #24]	@ (8000888 <BSP_LED_On+0x28>)
 800086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000872:	2120      	movs	r1, #32
 8000874:	2201      	movs	r2, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f000 fde0 	bl	800143c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000084 	.word	0x20000084

0800088c <BSP_LED_Off>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	4a06      	ldr	r2, [pc, #24]	@ (80008b4 <BSP_LED_Off+0x28>)
 800089a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089e:	2120      	movs	r1, #32
 80008a0:	2200      	movs	r2, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fdca 	bl	800143c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000084 	.word	0x20000084

080008b8 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	4a06      	ldr	r2, [pc, #24]	@ (80008e0 <BSP_LED_Toggle+0x28>)
 80008c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ca:	2220      	movs	r2, #32
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fdcc 	bl	800146c <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000084 	.word	0x20000084

080008e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008e8:	4b08      	ldr	r3, [pc, #32]	@ (800090c <SystemInit+0x28>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ee:	4a07      	ldr	r2, [pc, #28]	@ (800090c <SystemInit+0x28>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f8:	4b04      	ldr	r3, [pc, #16]	@ (800090c <SystemInit+0x28>)
 80008fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80008fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091a:	2003      	movs	r0, #3
 800091c:	f000 f95a 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000920:	2000      	movs	r0, #0
 8000922:	f000 f80d 	bl	8000940 <HAL_InitTick>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	e001      	b.n	8000936 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000932:	f7ff fe3b 	bl	80005ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000936:	79fb      	ldrb	r3, [r7, #7]

}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000948:	2300      	movs	r3, #0
 800094a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <HAL_InitTick+0x68>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d022      	beq.n	800099a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000954:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <HAL_InitTick+0x6c>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <HAL_InitTick+0x68>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000960:	fbb1 f3f3 	udiv	r3, r1, r3
 8000964:	fbb2 f3f3 	udiv	r3, r2, r3
 8000968:	4618      	mov	r0, r3
 800096a:	f000 f966 	bl	8000c3a <HAL_SYSTICK_Config>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d10f      	bne.n	8000994 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b0f      	cmp	r3, #15
 8000978:	d809      	bhi.n	800098e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097a:	2200      	movs	r2, #0
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	f04f 30ff 	mov.w	r0, #4294967295
 8000982:	f000 f932 	bl	8000bea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <HAL_InitTick+0x70>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	e007      	b.n	800099e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	73fb      	strb	r3, [r7, #15]
 8000992:	e004      	b.n	800099e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	e001      	b.n	800099e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800099e:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000090 	.word	0x20000090
 80009ac:	20000088 	.word	0x20000088
 80009b0:	2000008c 	.word	0x2000008c

080009b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <HAL_IncTick+0x1c>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_IncTick+0x20>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a03      	ldr	r2, [pc, #12]	@ (80009d0 <HAL_IncTick+0x1c>)
 80009c4:	6013      	str	r3, [r2, #0]
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	20000264 	.word	0x20000264
 80009d4:	20000090 	.word	0x20000090

080009d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000264 	.word	0x20000264

080009f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f8:	f7ff ffee 	bl	80009d8 <HAL_GetTick>
 80009fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a08:	d004      	beq.n	8000a14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <HAL_Delay+0x40>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	4413      	add	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a14:	bf00      	nop
 8000a16:	f7ff ffdf 	bl	80009d8 <HAL_GetTick>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d8f7      	bhi.n	8000a16 <HAL_Delay+0x26>
  {
  }
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000090 	.word	0x20000090

08000a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a66:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	60d3      	str	r3, [r2, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a80:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <__NVIC_GetPriorityGrouping+0x18>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	f003 0307 	and.w	r3, r3, #7
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db0b      	blt.n	8000ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 021f 	and.w	r2, r3, #31
 8000ab0:	4907      	ldr	r1, [pc, #28]	@ (8000ad0 <__NVIC_EnableIRQ+0x38>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	2001      	movs	r0, #1
 8000aba:	fa00 f202 	lsl.w	r2, r0, r2
 8000abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	@ (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	@ (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	@ 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f1c3 0307 	rsb	r3, r3, #7
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf28      	it	cs
 8000b46:	2304      	movcs	r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d902      	bls.n	8000b58 <NVIC_EncodePriority+0x30>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3b03      	subs	r3, #3
 8000b56:	e000      	b.n	8000b5a <NVIC_EncodePriority+0x32>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43da      	mvns	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43d9      	mvns	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	4313      	orrs	r3, r2
         );
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3724      	adds	r7, #36	@ 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ba0:	d301      	bcc.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00f      	b.n	8000bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <SysTick_Config+0x40>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f7ff ff8e 	bl	8000ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <SysTick_Config+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <SysTick_Config+0x40>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff29 	bl	8000a34 <__NVIC_SetPriorityGrouping>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf8:	f7ff ff40 	bl	8000a7c <__NVIC_GetPriorityGrouping>
 8000bfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	f7ff ff90 	bl	8000b28 <NVIC_EncodePriority>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff5f 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff33 	bl	8000a98 <__NVIC_EnableIRQ>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffa4 	bl	8000b90 <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e08d      	b.n	8000d82 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b47      	ldr	r3, [pc, #284]	@ (8000d8c <HAL_DMA_Init+0x138>)
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d80f      	bhi.n	8000c92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b45      	ldr	r3, [pc, #276]	@ (8000d90 <HAL_DMA_Init+0x13c>)
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a45      	ldr	r2, [pc, #276]	@ (8000d94 <HAL_DMA_Init+0x140>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	009a      	lsls	r2, r3, #2
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a42      	ldr	r2, [pc, #264]	@ (8000d98 <HAL_DMA_Init+0x144>)
 8000c8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c90:	e00e      	b.n	8000cb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b40      	ldr	r3, [pc, #256]	@ (8000d9c <HAL_DMA_Init+0x148>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a3d      	ldr	r2, [pc, #244]	@ (8000d94 <HAL_DMA_Init+0x140>)
 8000c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca2:	091b      	lsrs	r3, r3, #4
 8000ca4:	009a      	lsls	r2, r3, #2
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a3c      	ldr	r2, [pc, #240]	@ (8000da0 <HAL_DMA_Init+0x14c>)
 8000cae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000cca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 f9b6 	bl	8001074 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000d10:	d102      	bne.n	8000d18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000d2c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d010      	beq.n	8000d58 <HAL_DMA_Init+0x104>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d80c      	bhi.n	8000d58 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f000 f9d6 	bl	80010f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	e008      	b.n	8000d6a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40020407 	.word	0x40020407
 8000d90:	bffdfff8 	.word	0xbffdfff8
 8000d94:	cccccccd 	.word	0xcccccccd
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	bffdfbf8 	.word	0xbffdfbf8
 8000da0:	40020400 	.word	0x40020400

08000da4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d101      	bne.n	8000dc4 <HAL_DMA_Start_IT+0x20>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e066      	b.n	8000e92 <HAL_DMA_Start_IT+0xee>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d155      	bne.n	8000e84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2202      	movs	r2, #2
 8000ddc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2200      	movs	r2, #0
 8000de4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0201 	bic.w	r2, r2, #1
 8000df4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f000 f8fb 	bl	8000ff8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d008      	beq.n	8000e1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f042 020e 	orr.w	r2, r2, #14
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e00f      	b.n	8000e3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0204 	bic.w	r2, r2, #4
 8000e2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 020a 	orr.w	r2, r2, #10
 8000e3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d007      	beq.n	8000e5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d007      	beq.n	8000e72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f042 0201 	orr.w	r2, r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	e005      	b.n	8000e90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	2204      	movs	r2, #4
 8000ebc:	409a      	lsls	r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d026      	beq.n	8000f14 <HAL_DMA_IRQHandler+0x7a>
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d021      	beq.n	8000f14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0320 	and.w	r3, r3, #32
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d107      	bne.n	8000eee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0204 	bic.w	r2, r2, #4
 8000eec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f003 021f 	and.w	r2, r3, #31
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	2104      	movs	r1, #4
 8000efc:	fa01 f202 	lsl.w	r2, r1, r2
 8000f00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d071      	beq.n	8000fee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000f12:	e06c      	b.n	8000fee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f18:	f003 031f 	and.w	r3, r3, #31
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d02e      	beq.n	8000f86 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d029      	beq.n	8000f86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0320 	and.w	r3, r3, #32
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10b      	bne.n	8000f58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 020a 	bic.w	r2, r2, #10
 8000f4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f64:	2102      	movs	r1, #2
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d038      	beq.n	8000fee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000f84:	e033      	b.n	8000fee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	f003 031f 	and.w	r3, r3, #31
 8000f8e:	2208      	movs	r2, #8
 8000f90:	409a      	lsls	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d02a      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d025      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 020e 	bic.w	r2, r2, #14
 8000fb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb8:	f003 021f 	and.w	r2, r3, #31
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d004      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
}
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800100e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001014:	2b00      	cmp	r3, #0
 8001016:	d004      	beq.n	8001022 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001020:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	f003 021f 	and.w	r2, r3, #31
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	2101      	movs	r1, #1
 8001030:	fa01 f202 	lsl.w	r2, r1, r2
 8001034:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2b10      	cmp	r3, #16
 8001044:	d108      	bne.n	8001058 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001056:	e007      	b.n	8001068 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	60da      	str	r2, [r3, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001084:	429a      	cmp	r2, r3
 8001086:	d802      	bhi.n	800108e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e001      	b.n	8001092 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001090:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	3b08      	subs	r3, #8
 800109e:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	009a      	lsls	r2, r3, #2
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4413      	add	r3, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a0b      	ldr	r2, [pc, #44]	@ (80010ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80010be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 031f 	and.w	r3, r3, #31
 80010c6:	2201      	movs	r2, #1
 80010c8:	409a      	lsls	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80010ce:	bf00      	nop
 80010d0:	371c      	adds	r7, #28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40020407 	.word	0x40020407
 80010e0:	40020800 	.word	0x40020800
 80010e4:	40020820 	.word	0x40020820
 80010e8:	cccccccd 	.word	0xcccccccd
 80010ec:	40020880 	.word	0x40020880

080010f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	461a      	mov	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001112:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3b01      	subs	r3, #1
 8001118:	f003 031f 	and.w	r3, r3, #31
 800111c:	2201      	movs	r2, #1
 800111e:	409a      	lsls	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	1000823f 	.word	0x1000823f
 8001134:	40020940 	.word	0x40020940

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001146:	e15a      	b.n	80013fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2101      	movs	r1, #1
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	4013      	ands	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 814c 	beq.w	80013f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b01      	cmp	r3, #1
 800116a:	d005      	beq.n	8001178 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001174:	2b02      	cmp	r3, #2
 8001176:	d130      	bne.n	80011da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ae:	2201      	movs	r2, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	f003 0201 	and.w	r2, r3, #1
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d017      	beq.n	8001216 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d123      	bne.n	800126a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	08da      	lsrs	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3208      	adds	r2, #8
 8001264:	6939      	ldr	r1, [r7, #16]
 8001266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0203 	and.w	r2, r3, #3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 80a6 	beq.w	80013f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ac:	4b5b      	ldr	r3, [pc, #364]	@ (800141c <HAL_GPIO_Init+0x2e4>)
 80012ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b0:	4a5a      	ldr	r2, [pc, #360]	@ (800141c <HAL_GPIO_Init+0x2e4>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80012b8:	4b58      	ldr	r3, [pc, #352]	@ (800141c <HAL_GPIO_Init+0x2e4>)
 80012ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c4:	4a56      	ldr	r2, [pc, #344]	@ (8001420 <HAL_GPIO_Init+0x2e8>)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012ee:	d01f      	beq.n	8001330 <HAL_GPIO_Init+0x1f8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001424 <HAL_GPIO_Init+0x2ec>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d019      	beq.n	800132c <HAL_GPIO_Init+0x1f4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4b      	ldr	r2, [pc, #300]	@ (8001428 <HAL_GPIO_Init+0x2f0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d013      	beq.n	8001328 <HAL_GPIO_Init+0x1f0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a4a      	ldr	r2, [pc, #296]	@ (800142c <HAL_GPIO_Init+0x2f4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d00d      	beq.n	8001324 <HAL_GPIO_Init+0x1ec>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a49      	ldr	r2, [pc, #292]	@ (8001430 <HAL_GPIO_Init+0x2f8>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d007      	beq.n	8001320 <HAL_GPIO_Init+0x1e8>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a48      	ldr	r2, [pc, #288]	@ (8001434 <HAL_GPIO_Init+0x2fc>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d101      	bne.n	800131c <HAL_GPIO_Init+0x1e4>
 8001318:	2305      	movs	r3, #5
 800131a:	e00a      	b.n	8001332 <HAL_GPIO_Init+0x1fa>
 800131c:	2306      	movs	r3, #6
 800131e:	e008      	b.n	8001332 <HAL_GPIO_Init+0x1fa>
 8001320:	2304      	movs	r3, #4
 8001322:	e006      	b.n	8001332 <HAL_GPIO_Init+0x1fa>
 8001324:	2303      	movs	r3, #3
 8001326:	e004      	b.n	8001332 <HAL_GPIO_Init+0x1fa>
 8001328:	2302      	movs	r3, #2
 800132a:	e002      	b.n	8001332 <HAL_GPIO_Init+0x1fa>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <HAL_GPIO_Init+0x1fa>
 8001330:	2300      	movs	r3, #0
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	f002 0203 	and.w	r2, r2, #3
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	4093      	lsls	r3, r2
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001342:	4937      	ldr	r1, [pc, #220]	@ (8001420 <HAL_GPIO_Init+0x2e8>)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001350:	4b39      	ldr	r3, [pc, #228]	@ (8001438 <HAL_GPIO_Init+0x300>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001374:	4a30      	ldr	r2, [pc, #192]	@ (8001438 <HAL_GPIO_Init+0x300>)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800137a:	4b2f      	ldr	r3, [pc, #188]	@ (8001438 <HAL_GPIO_Init+0x300>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800139e:	4a26      	ldr	r2, [pc, #152]	@ (8001438 <HAL_GPIO_Init+0x300>)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013a4:	4b24      	ldr	r3, [pc, #144]	@ (8001438 <HAL_GPIO_Init+0x300>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001438 <HAL_GPIO_Init+0x300>)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <HAL_GPIO_Init+0x300>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013f2:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <HAL_GPIO_Init+0x300>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	f47f ae9d 	bne.w	8001148 <HAL_GPIO_Init+0x10>
  }
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000
 8001424:	48000400 	.word	0x48000400
 8001428:	48000800 	.word	0x48000800
 800142c:	48000c00 	.word	0x48000c00
 8001430:	48001000 	.word	0x48001000
 8001434:	48001400 	.word	0x48001400
 8001438:	40010400 	.word	0x40010400

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001458:	e002      	b.n	8001460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4013      	ands	r3, r2
 8001484:	041a      	lsls	r2, r3, #16
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	43d9      	mvns	r1, r3
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	400b      	ands	r3, r1
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d141      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ae:	4b4b      	ldr	r3, [pc, #300]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ba:	d131      	bne.n	8001520 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014bc:	4b47      	ldr	r3, [pc, #284]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014c2:	4a46      	ldr	r2, [pc, #280]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014cc:	4b43      	ldr	r3, [pc, #268]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014d4:	4a41      	ldr	r2, [pc, #260]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014dc:	4b40      	ldr	r3, [pc, #256]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2232      	movs	r2, #50	@ 0x32
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	4a3f      	ldr	r2, [pc, #252]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	0c9b      	lsrs	r3, r3, #18
 80014ee:	3301      	adds	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f2:	e002      	b.n	80014fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014fa:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001506:	d102      	bne.n	800150e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f2      	bne.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800150e:	4b33      	ldr	r3, [pc, #204]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800151a:	d158      	bne.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e057      	b.n	80015d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001520:	4b2e      	ldr	r3, [pc, #184]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001526:	4a2d      	ldr	r2, [pc, #180]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800152c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001530:	e04d      	b.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001538:	d141      	bne.n	80015be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800153a:	4b28      	ldr	r3, [pc, #160]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001546:	d131      	bne.n	80015ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001548:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800154e:	4a23      	ldr	r2, [pc, #140]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001558:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001560:	4a1e      	ldr	r2, [pc, #120]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001562:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001566:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2232      	movs	r2, #50	@ 0x32
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4a1c      	ldr	r2, [pc, #112]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	0c9b      	lsrs	r3, r3, #18
 800157a:	3301      	adds	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800157e:	e002      	b.n	8001586 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3b01      	subs	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800158e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001592:	d102      	bne.n	800159a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f2      	bne.n	8001580 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015a6:	d112      	bne.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e011      	b.n	80015d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015b2:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015bc:	e007      	b.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015be:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40007000 	.word	0x40007000
 80015e0:	20000088 	.word	0x20000088
 80015e4:	431bde83 	.word	0x431bde83

080015e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f6:	6093      	str	r3, [r2, #8]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40007000 	.word	0x40007000

08001608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e2fe      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d075      	beq.n	8001712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001626:	4b97      	ldr	r3, [pc, #604]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001630:	4b94      	ldr	r3, [pc, #592]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2b0c      	cmp	r3, #12
 800163e:	d102      	bne.n	8001646 <HAL_RCC_OscConfig+0x3e>
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d002      	beq.n	800164c <HAL_RCC_OscConfig+0x44>
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b08      	cmp	r3, #8
 800164a:	d10b      	bne.n	8001664 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164c:	4b8d      	ldr	r3, [pc, #564]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d05b      	beq.n	8001710 <HAL_RCC_OscConfig+0x108>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d157      	bne.n	8001710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e2d9      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800166c:	d106      	bne.n	800167c <HAL_RCC_OscConfig+0x74>
 800166e:	4b85      	ldr	r3, [pc, #532]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a84      	ldr	r2, [pc, #528]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e01d      	b.n	80016b8 <HAL_RCC_OscConfig+0xb0>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x98>
 8001686:	4b7f      	ldr	r3, [pc, #508]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a7e      	ldr	r2, [pc, #504]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b7c      	ldr	r3, [pc, #496]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a7b      	ldr	r2, [pc, #492]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0xb0>
 80016a0:	4b78      	ldr	r3, [pc, #480]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a77      	ldr	r2, [pc, #476]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b75      	ldr	r3, [pc, #468]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a74      	ldr	r2, [pc, #464]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff f98a 	bl	80009d8 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff f986 	bl	80009d8 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	@ 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e29e      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	4b6a      	ldr	r3, [pc, #424]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0xc0>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff f976 	bl	80009d8 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff f972 	bl	80009d8 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	@ 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e28a      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	4b60      	ldr	r3, [pc, #384]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0xe8>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d075      	beq.n	800180a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171e:	4b59      	ldr	r3, [pc, #356]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001728:	4b56      	ldr	r3, [pc, #344]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b0c      	cmp	r3, #12
 8001736:	d102      	bne.n	800173e <HAL_RCC_OscConfig+0x136>
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d002      	beq.n	8001744 <HAL_RCC_OscConfig+0x13c>
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2b04      	cmp	r3, #4
 8001742:	d11f      	bne.n	8001784 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001744:	4b4f      	ldr	r3, [pc, #316]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x154>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e25d      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b49      	ldr	r3, [pc, #292]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	4946      	ldr	r1, [pc, #280]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001770:	4b45      	ldr	r3, [pc, #276]	@ (8001888 <HAL_RCC_OscConfig+0x280>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff f8e3 	bl	8000940 <HAL_InitTick>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d043      	beq.n	8001808 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e249      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d023      	beq.n	80017d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178c:	4b3d      	ldr	r3, [pc, #244]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a3c      	ldr	r2, [pc, #240]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff f91e 	bl	80009d8 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff f91a 	bl	80009d8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e232      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b2:	4b34      	ldr	r3, [pc, #208]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017be:	4b31      	ldr	r3, [pc, #196]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	061b      	lsls	r3, r3, #24
 80017cc:	492d      	ldr	r1, [pc, #180]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
 80017d2:	e01a      	b.n	800180a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80017da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff f8fa 	bl	80009d8 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e8:	f7ff f8f6 	bl	80009d8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e20e      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017fa:	4b22      	ldr	r3, [pc, #136]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x1e0>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001808:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d041      	beq.n	800189a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d01c      	beq.n	8001858 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001824:	4a17      	ldr	r2, [pc, #92]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182e:	f7ff f8d3 	bl	80009d8 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001836:	f7ff f8cf 	bl	80009d8 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e1e7      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001848:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800184a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0ef      	beq.n	8001836 <HAL_RCC_OscConfig+0x22e>
 8001856:	e020      	b.n	800189a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001858:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800185a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185e:	4a09      	ldr	r2, [pc, #36]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff f8b6 	bl	80009d8 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186e:	e00d      	b.n	800188c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001870:	f7ff f8b2 	bl	80009d8 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d906      	bls.n	800188c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1ca      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
 8001888:	2000008c 	.word	0x2000008c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800188c:	4b8c      	ldr	r3, [pc, #560]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 800188e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1ea      	bne.n	8001870 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80a6 	beq.w	80019f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018ac:	4b84      	ldr	r3, [pc, #528]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_OscConfig+0x2b4>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x2b6>
 80018bc:	2300      	movs	r3, #0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00d      	beq.n	80018de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ce:	4b7c      	ldr	r3, [pc, #496]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018da:	2301      	movs	r3, #1
 80018dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018de:	4b79      	ldr	r3, [pc, #484]	@ (8001ac4 <HAL_RCC_OscConfig+0x4bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d118      	bne.n	800191c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ea:	4b76      	ldr	r3, [pc, #472]	@ (8001ac4 <HAL_RCC_OscConfig+0x4bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a75      	ldr	r2, [pc, #468]	@ (8001ac4 <HAL_RCC_OscConfig+0x4bc>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f6:	f7ff f86f 	bl	80009d8 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fe:	f7ff f86b 	bl	80009d8 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e183      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001910:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac4 <HAL_RCC_OscConfig+0x4bc>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d108      	bne.n	8001936 <HAL_RCC_OscConfig+0x32e>
 8001924:	4b66      	ldr	r3, [pc, #408]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192a:	4a65      	ldr	r2, [pc, #404]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001934:	e024      	b.n	8001980 <HAL_RCC_OscConfig+0x378>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b05      	cmp	r3, #5
 800193c:	d110      	bne.n	8001960 <HAL_RCC_OscConfig+0x358>
 800193e:	4b60      	ldr	r3, [pc, #384]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001944:	4a5e      	ldr	r2, [pc, #376]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800194e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001954:	4a5a      	ldr	r2, [pc, #360]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800195e:	e00f      	b.n	8001980 <HAL_RCC_OscConfig+0x378>
 8001960:	4b57      	ldr	r3, [pc, #348]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001966:	4a56      	ldr	r2, [pc, #344]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001970:	4b53      	ldr	r3, [pc, #332]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001976:	4a52      	ldr	r2, [pc, #328]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d016      	beq.n	80019b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff f826 	bl	80009d8 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001990:	f7ff f822 	bl	80009d8 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e138      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a6:	4b46      	ldr	r3, [pc, #280]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 80019a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ed      	beq.n	8001990 <HAL_RCC_OscConfig+0x388>
 80019b4:	e015      	b.n	80019e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff f80f 	bl	80009d8 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff f80b 	bl	80009d8 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e121      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019d4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ed      	bne.n	80019be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019e2:	7ffb      	ldrb	r3, [r7, #31]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d105      	bne.n	80019f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e8:	4b35      	ldr	r3, [pc, #212]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ec:	4a34      	ldr	r2, [pc, #208]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 80019ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d03c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a08:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7fe ffde 	bl	80009d8 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a20:	f7fe ffda 	bl	80009d8 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e0f2      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a32:	4b23      	ldr	r3, [pc, #140]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ef      	beq.n	8001a20 <HAL_RCC_OscConfig+0x418>
 8001a40:	e01b      	b.n	8001a7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a42:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a48:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a52:	f7fe ffc1 	bl	80009d8 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a5a:	f7fe ffbd 	bl	80009d8 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0d5      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1ef      	bne.n	8001a5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 80c9 	beq.w	8001c16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b0c      	cmp	r3, #12
 8001a8e:	f000 8083 	beq.w	8001b98 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d15e      	bne.n	8001b58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a08      	ldr	r2, [pc, #32]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b8>)
 8001aa0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa6:	f7fe ff97 	bl	80009d8 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aac:	e00c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aae:	f7fe ff93 	bl	80009d8 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d905      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e0ab      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac8:	4b55      	ldr	r3, [pc, #340]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ec      	bne.n	8001aae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad4:	4b52      	ldr	r3, [pc, #328]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	4b52      	ldr	r3, [pc, #328]	@ (8001c24 <HAL_RCC_OscConfig+0x61c>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6a11      	ldr	r1, [r2, #32]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001aee:	0212      	lsls	r2, r2, #8
 8001af0:	4311      	orrs	r1, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001af6:	0852      	lsrs	r2, r2, #1
 8001af8:	3a01      	subs	r2, #1
 8001afa:	0552      	lsls	r2, r2, #21
 8001afc:	4311      	orrs	r1, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b02:	0852      	lsrs	r2, r2, #1
 8001b04:	3a01      	subs	r2, #1
 8001b06:	0652      	lsls	r2, r2, #25
 8001b08:	4311      	orrs	r1, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b0e:	06d2      	lsls	r2, r2, #27
 8001b10:	430a      	orrs	r2, r1
 8001b12:	4943      	ldr	r1, [pc, #268]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b18:	4b41      	ldr	r3, [pc, #260]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a40      	ldr	r2, [pc, #256]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b24:	4b3e      	ldr	r3, [pc, #248]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4a3d      	ldr	r2, [pc, #244]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7fe ff52 	bl	80009d8 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7fe ff4e 	bl	80009d8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e066      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4a:	4b35      	ldr	r3, [pc, #212]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x530>
 8001b56:	e05e      	b.n	8001c16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4b31      	ldr	r3, [pc, #196]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a30      	ldr	r2, [pc, #192]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7fe ff38 	bl	80009d8 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7fe ff34 	bl	80009d8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e04c      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7e:	4b28      	ldr	r3, [pc, #160]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b8a:	4b25      	ldr	r3, [pc, #148]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	4924      	ldr	r1, [pc, #144]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001b90:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <HAL_RCC_OscConfig+0x620>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	60cb      	str	r3, [r1, #12]
 8001b96:	e03e      	b.n	8001c16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e039      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c20 <HAL_RCC_OscConfig+0x618>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 0203 	and.w	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d12c      	bne.n	8001c12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d123      	bne.n	8001c12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d11b      	bne.n	8001c12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d113      	bne.n	8001c12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf4:	085b      	lsrs	r3, r3, #1
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d109      	bne.n	8001c12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	019f800c 	.word	0x019f800c
 8001c28:	feeefffc 	.word	0xfeeefffc

08001c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e11e      	b.n	8001e82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c44:	4b91      	ldr	r3, [pc, #580]	@ (8001e8c <HAL_RCC_ClockConfig+0x260>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d910      	bls.n	8001c74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b8e      	ldr	r3, [pc, #568]	@ (8001e8c <HAL_RCC_ClockConfig+0x260>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 020f 	bic.w	r2, r3, #15
 8001c5a:	498c      	ldr	r1, [pc, #560]	@ (8001e8c <HAL_RCC_ClockConfig+0x260>)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b8a      	ldr	r3, [pc, #552]	@ (8001e8c <HAL_RCC_ClockConfig+0x260>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e106      	b.n	8001e82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d073      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d129      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c88:	4b81      	ldr	r3, [pc, #516]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0f4      	b.n	8001e82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c98:	f000 f966 	bl	8001f68 <RCC_GetSysClockFreqFromPLLSource>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4a7c      	ldr	r2, [pc, #496]	@ (8001e94 <HAL_RCC_ClockConfig+0x268>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d93f      	bls.n	8001d26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d033      	beq.n	8001d26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d12f      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cc6:	4b72      	ldr	r3, [pc, #456]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cce:	4a70      	ldr	r2, [pc, #448]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cd6:	2380      	movs	r3, #128	@ 0x80
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e024      	b.n	8001d26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d107      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d109      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0c6      	b.n	8001e82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf4:	4b66      	ldr	r3, [pc, #408]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0be      	b.n	8001e82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d04:	f000 f8ce 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4a61      	ldr	r2, [pc, #388]	@ (8001e94 <HAL_RCC_ClockConfig+0x268>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d909      	bls.n	8001d26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d12:	4b5f      	ldr	r3, [pc, #380]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d1a:	4a5d      	ldr	r2, [pc, #372]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d22:	2380      	movs	r3, #128	@ 0x80
 8001d24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b5a      	ldr	r3, [pc, #360]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4957      	ldr	r1, [pc, #348]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d38:	f7fe fe4e 	bl	80009d8 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7fe fe4a 	bl	80009d8 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e095      	b.n	8001e82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b4e      	ldr	r3, [pc, #312]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d023      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d80:	4b43      	ldr	r3, [pc, #268]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4a42      	ldr	r2, [pc, #264]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001d86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d98:	4b3d      	ldr	r3, [pc, #244]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001da0:	4a3b      	ldr	r2, [pc, #236]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001da2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001da6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b39      	ldr	r3, [pc, #228]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4936      	ldr	r1, [pc, #216]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
 8001dba:	e008      	b.n	8001dce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b80      	cmp	r3, #128	@ 0x80
 8001dc0:	d105      	bne.n	8001dce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001dc2:	4b33      	ldr	r3, [pc, #204]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	4a32      	ldr	r2, [pc, #200]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001dc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dcc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dce:	4b2f      	ldr	r3, [pc, #188]	@ (8001e8c <HAL_RCC_ClockConfig+0x260>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d21d      	bcs.n	8001e18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e8c <HAL_RCC_ClockConfig+0x260>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 020f 	bic.w	r2, r3, #15
 8001de4:	4929      	ldr	r1, [pc, #164]	@ (8001e8c <HAL_RCC_ClockConfig+0x260>)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dec:	f7fe fdf4 	bl	80009d8 <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df4:	f7fe fdf0 	bl	80009d8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e03b      	b.n	8001e82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <HAL_RCC_ClockConfig+0x260>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1ed      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4917      	ldr	r1, [pc, #92]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	490f      	ldr	r1, [pc, #60]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e56:	f000 f825 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <HAL_RCC_ClockConfig+0x264>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	490c      	ldr	r1, [pc, #48]	@ (8001e98 <HAL_RCC_ClockConfig+0x26c>)
 8001e68:	5ccb      	ldrb	r3, [r1, r3]
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <HAL_RCC_ClockConfig+0x270>)
 8001e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_RCC_ClockConfig+0x274>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fd60 	bl	8000940 <HAL_InitTick>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40022000 	.word	0x40022000
 8001e90:	40021000 	.word	0x40021000
 8001e94:	04c4b400 	.word	0x04c4b400
 8001e98:	08002a48 	.word	0x08002a48
 8001e9c:	20000088 	.word	0x20000088
 8001ea0:	2000008c 	.word	0x2000008c

08001ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	e047      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ebc:	4b27      	ldr	r3, [pc, #156]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d102      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ec8:	4b26      	ldr	r3, [pc, #152]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e03e      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ece:	4b23      	ldr	r3, [pc, #140]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d136      	bne.n	8001f48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eda:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3301      	adds	r3, #1
 8001ef0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	4a16      	ldr	r2, [pc, #88]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f02:	68d2      	ldr	r2, [r2, #12]
 8001f04:	0a12      	lsrs	r2, r2, #8
 8001f06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
      break;
 8001f10:	e00c      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f12:	4a13      	ldr	r2, [pc, #76]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4a10      	ldr	r2, [pc, #64]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f1c:	68d2      	ldr	r2, [r2, #12]
 8001f1e:	0a12      	lsrs	r2, r2, #8
 8001f20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
      break;
 8001f2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0e5b      	lsrs	r3, r3, #25
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	3301      	adds	r3, #1
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	e001      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f4c:	693b      	ldr	r3, [r7, #16]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	00f42400 	.word	0x00f42400
 8001f64:	016e3600 	.word	0x016e3600

08001f68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f78:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3301      	adds	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d10c      	bne.n	8001fa6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f8c:	4a17      	ldr	r2, [pc, #92]	@ (8001fec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	4a14      	ldr	r2, [pc, #80]	@ (8001fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f96:	68d2      	ldr	r2, [r2, #12]
 8001f98:	0a12      	lsrs	r2, r2, #8
 8001f9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	617b      	str	r3, [r7, #20]
    break;
 8001fa4:	e00c      	b.n	8001fc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fa6:	4a12      	ldr	r2, [pc, #72]	@ (8001ff0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fb0:	68d2      	ldr	r2, [r2, #12]
 8001fb2:	0a12      	lsrs	r2, r2, #8
 8001fb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fb8:	fb02 f303 	mul.w	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
    break;
 8001fbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	0e5b      	lsrs	r3, r3, #25
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001fda:	687b      	ldr	r3, [r7, #4]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	016e3600 	.word	0x016e3600
 8001ff0:	00f42400 	.word	0x00f42400

08001ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e09d      	b.n	8002142 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200a:	2b00      	cmp	r3, #0
 800200c:	d108      	bne.n	8002020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002016:	d009      	beq.n	800202c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
 800201e:	e005      	b.n	800202c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe fad4 	bl	80005f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002062:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800206c:	d902      	bls.n	8002074 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	e002      	b.n	800207a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002078:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002082:	d007      	beq.n	8002094 <HAL_SPI_Init+0xa0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800208c:	d002      	beq.n	8002094 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d6:	ea42 0103 	orr.w	r1, r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	0c1b      	lsrs	r3, r3, #16
 80020f0:	f003 0204 	and.w	r2, r3, #4
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002110:	ea42 0103 	orr.w	r1, r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002160:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d00c      	beq.n	8002188 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002174:	d106      	bne.n	8002184 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_SPI_TransmitReceive_DMA+0x38>
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	2b04      	cmp	r3, #4
 8002182:	d001      	beq.n	8002188 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002184:	2302      	movs	r3, #2
 8002186:	e158      	b.n	800243a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_SPI_TransmitReceive_DMA+0x4e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e14d      	b.n	800243a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_SPI_TransmitReceive_DMA+0x60>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e146      	b.n	800243a <HAL_SPI_TransmitReceive_DMA+0x2ee>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d003      	beq.n	80021c8 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2205      	movs	r2, #5
 80021c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	887a      	ldrh	r2, [r7, #2]
 80021de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	887a      	ldrh	r2, [r7, #2]
 80021ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	887a      	ldrh	r2, [r7, #2]
 80021f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8002210:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800221a:	d908      	bls.n	800222e <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	e06f      	b.n	800230e <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800223c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002248:	d126      	bne.n	8002298 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10f      	bne.n	8002276 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002264:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800226a:	b29b      	uxth	r3, r3
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002274:	e010      	b.n	8002298 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002284:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800228a:	b29b      	uxth	r3, r3
 800228c:	085b      	lsrs	r3, r3, #1
 800228e:	b29b      	uxth	r3, r3
 8002290:	3301      	adds	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a2:	d134      	bne.n	800230e <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022b2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d111      	bne.n	80022e8 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022d2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80022da:	b29b      	uxth	r3, r3
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80022e6:	e012      	b.n	800230e <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022f6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80022fe:	b29b      	uxth	r3, r3
 8002300:	085b      	lsrs	r3, r3, #1
 8002302:	b29b      	uxth	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b04      	cmp	r3, #4
 8002318:	d108      	bne.n	800232c <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231e:	4a49      	ldr	r2, [pc, #292]	@ (8002444 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8002320:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002326:	4a48      	ldr	r2, [pc, #288]	@ (8002448 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8002328:	62da      	str	r2, [r3, #44]	@ 0x2c
 800232a:	e007      	b.n	800233c <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002330:	4a46      	ldr	r2, [pc, #280]	@ (800244c <HAL_SPI_TransmitReceive_DMA+0x300>)
 8002332:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002338:	4a45      	ldr	r2, [pc, #276]	@ (8002450 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800233a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	4a44      	ldr	r2, [pc, #272]	@ (8002454 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8002342:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002348:	2200      	movs	r2, #0
 800234a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	330c      	adds	r3, #12
 8002356:	4619      	mov	r1, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002364:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002366:	f7fe fd1d 	bl	8000da4 <HAL_DMA_Start_IT>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00b      	beq.n	8002388 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002374:	f043 0210 	orr.w	r2, r3, #16
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e058      	b.n	800243a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239c:	2200      	movs	r2, #0
 800239e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a4:	2200      	movs	r2, #0
 80023a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ac:	2200      	movs	r2, #0
 80023ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b4:	2200      	movs	r2, #0
 80023b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c0:	4619      	mov	r1, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	330c      	adds	r3, #12
 80023c8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80023d0:	f7fe fce8 	bl	8000da4 <HAL_DMA_Start_IT>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00b      	beq.n	80023f2 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e023      	b.n	800243a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023fc:	2b40      	cmp	r3, #64	@ 0x40
 80023fe:	d007      	beq.n	8002410 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800240e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0220 	orr.w	r2, r2, #32
 8002426:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0202 	orr.w	r2, r2, #2
 8002436:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	080025e9 	.word	0x080025e9
 8002448:	080024b1 	.word	0x080024b1
 800244c:	08002605 	.word	0x08002605
 8002450:	08002559 	.word	0x08002559
 8002454:	08002621 	.word	0x08002621

08002458 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024a2:	b2db      	uxtb	r3, r3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024bc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024be:	f7fe fa8b 	bl	80009d8 <HAL_GetTick>
 80024c2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d03c      	beq.n	800254c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0220 	bic.w	r2, r2, #32
 80024e0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10d      	bne.n	8002506 <SPI_DMAReceiveCplt+0x56>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024f2:	d108      	bne.n	8002506 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0203 	bic.w	r2, r2, #3
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	e007      	b.n	8002516 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	2164      	movs	r1, #100	@ 0x64
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f9be 	bl	800289c <SPI_EndRxTransaction>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f7fd ffed 	bl	8000524 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800254a:	e002      	b.n	8002552 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f7ff ff83 	bl	8002458 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002566:	f7fe fa37 	bl	80009d8 <HAL_GetTick>
 800256a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b20      	cmp	r3, #32
 8002578:	d030      	beq.n	80025dc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0220 	bic.w	r2, r2, #32
 8002588:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	2164      	movs	r1, #100	@ 0x64
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f9dc 	bl	800294c <SPI_EndRxTxTransaction>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800259e:	f043 0220 	orr.w	r2, r3, #32
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0203 	bic.w	r2, r2, #3
 80025b4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7fd ffa5 	bl	8000524 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80025da:	e002      	b.n	80025e2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7fd ff7f 	bl	80004e0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f7ff ff38 	bl	800246c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7ff ff34 	bl	8002480 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0203 	bic.w	r2, r2, #3
 800263c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002642:	f043 0210 	orr.w	r2, r3, #16
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f7fd ff66 	bl	8000524 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002670:	f7fe f9b2 	bl	80009d8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	4413      	add	r3, r2
 800267e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002680:	f7fe f9aa 	bl	80009d8 <HAL_GetTick>
 8002684:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002686:	4b39      	ldr	r3, [pc, #228]	@ (800276c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	015b      	lsls	r3, r3, #5
 800268c:	0d1b      	lsrs	r3, r3, #20
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002696:	e054      	b.n	8002742 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d050      	beq.n	8002742 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026a0:	f7fe f99a 	bl	80009d8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d902      	bls.n	80026b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d13d      	bne.n	8002732 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80026c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026ce:	d111      	bne.n	80026f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026d8:	d004      	beq.n	80026e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026e2:	d107      	bne.n	80026f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026fc:	d10f      	bne.n	800271e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800271c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e017      	b.n	8002762 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3b01      	subs	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4013      	ands	r3, r2
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	429a      	cmp	r2, r3
 800275e:	d19b      	bne.n	8002698 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000088 	.word	0x20000088

08002770 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	@ 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002782:	f7fe f929 	bl	80009d8 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	4413      	add	r3, r2
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002792:	f7fe f921 	bl	80009d8 <HAL_GetTick>
 8002796:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	330c      	adds	r3, #12
 800279e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80027a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002898 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00da      	lsls	r2, r3, #3
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	0d1b      	lsrs	r3, r3, #20
 80027b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80027b8:	e060      	b.n	800287c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80027c0:	d107      	bne.n	80027d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d104      	bne.n	80027d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d050      	beq.n	800287c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027da:	f7fe f8fd 	bl	80009d8 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d902      	bls.n	80027f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d13d      	bne.n	800286c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002808:	d111      	bne.n	800282e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002812:	d004      	beq.n	800281e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800281c:	d107      	bne.n	800282e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800282c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002836:	d10f      	bne.n	8002858 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002856:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e010      	b.n	800288e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	3b01      	subs	r3, #1
 800287a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	4013      	ands	r3, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	429a      	cmp	r2, r3
 800288a:	d196      	bne.n	80027ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3728      	adds	r7, #40	@ 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000088 	.word	0x20000088

0800289c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028b0:	d111      	bne.n	80028d6 <SPI_EndRxTransaction+0x3a>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ba:	d004      	beq.n	80028c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028c4:	d107      	bne.n	80028d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028d4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2200      	movs	r2, #0
 80028de:	2180      	movs	r1, #128	@ 0x80
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff febd 	bl	8002660 <SPI_WaitFlagStateUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e023      	b.n	8002944 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002904:	d11d      	bne.n	8002942 <SPI_EndRxTransaction+0xa6>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800290e:	d004      	beq.n	800291a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002918:	d113      	bne.n	8002942 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2200      	movs	r2, #0
 8002922:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff ff22 	bl	8002770 <SPI_WaitFifoStateUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002936:	f043 0220 	orr.w	r2, r3, #32
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e000      	b.n	8002944 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2200      	movs	r2, #0
 8002960:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff ff03 	bl	8002770 <SPI_WaitFifoStateUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002974:	f043 0220 	orr.w	r2, r3, #32
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e027      	b.n	80029d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2200      	movs	r2, #0
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7ff fe68 	bl	8002660 <SPI_WaitFlagStateUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e014      	b.n	80029d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f7ff fedc 	bl	8002770 <SPI_WaitFifoStateUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c2:	f043 0220 	orr.w	r2, r3, #32
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e000      	b.n	80029d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <memset>:
 80029d8:	4402      	add	r2, r0
 80029da:	4603      	mov	r3, r0
 80029dc:	4293      	cmp	r3, r2
 80029de:	d100      	bne.n	80029e2 <memset+0xa>
 80029e0:	4770      	bx	lr
 80029e2:	f803 1b01 	strb.w	r1, [r3], #1
 80029e6:	e7f9      	b.n	80029dc <memset+0x4>

080029e8 <__libc_init_array>:
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	4d0d      	ldr	r5, [pc, #52]	@ (8002a20 <__libc_init_array+0x38>)
 80029ec:	4c0d      	ldr	r4, [pc, #52]	@ (8002a24 <__libc_init_array+0x3c>)
 80029ee:	1b64      	subs	r4, r4, r5
 80029f0:	10a4      	asrs	r4, r4, #2
 80029f2:	2600      	movs	r6, #0
 80029f4:	42a6      	cmp	r6, r4
 80029f6:	d109      	bne.n	8002a0c <__libc_init_array+0x24>
 80029f8:	4d0b      	ldr	r5, [pc, #44]	@ (8002a28 <__libc_init_array+0x40>)
 80029fa:	4c0c      	ldr	r4, [pc, #48]	@ (8002a2c <__libc_init_array+0x44>)
 80029fc:	f000 f818 	bl	8002a30 <_init>
 8002a00:	1b64      	subs	r4, r4, r5
 8002a02:	10a4      	asrs	r4, r4, #2
 8002a04:	2600      	movs	r6, #0
 8002a06:	42a6      	cmp	r6, r4
 8002a08:	d105      	bne.n	8002a16 <__libc_init_array+0x2e>
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a10:	4798      	blx	r3
 8002a12:	3601      	adds	r6, #1
 8002a14:	e7ee      	b.n	80029f4 <__libc_init_array+0xc>
 8002a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1a:	4798      	blx	r3
 8002a1c:	3601      	adds	r6, #1
 8002a1e:	e7f2      	b.n	8002a06 <__libc_init_array+0x1e>
 8002a20:	08002a58 	.word	0x08002a58
 8002a24:	08002a58 	.word	0x08002a58
 8002a28:	08002a58 	.word	0x08002a58
 8002a2c:	08002a5c 	.word	0x08002a5c

08002a30 <_init>:
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a32:	bf00      	nop
 8002a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a36:	bc08      	pop	{r3}
 8002a38:	469e      	mov	lr, r3
 8002a3a:	4770      	bx	lr

08002a3c <_fini>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	bf00      	nop
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr
