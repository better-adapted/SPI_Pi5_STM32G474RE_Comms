
SPI_FullDuplex_ComDMA_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d20  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004f00  08004f00  00005f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005014  08005014  0000b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005014  08005014  00006014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800501c  0800501c  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800501c  0800501c  0000601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005020  08005020  00006020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00004070  20000000  08005024  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042e0  20004070  08009094  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008350  08009094  0000b350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000b123  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000083  00000000  00000000  000161c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00009b7e  00000000  00000000  00016246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001db4  00000000  00000000  0001fdc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009c8  00000000  00000000  00021b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ed24e  00000000  00000000  00022540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000747  00000000  00000000  0010f78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00025f4e  00000000  00000000  0010fed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135e23  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003158  00000000  00000000  00135e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20004070 	.word	0x20004070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004ee8 	.word	0x08004ee8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20004074 	.word	0x20004074
 800021c:	08004ee8 	.word	0x08004ee8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c0:	480d      	ldr	r0, [pc, #52]	@ (80002f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480d      	ldr	r0, [pc, #52]	@ (80002fc <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490e      	ldr	r1, [pc, #56]	@ (8000300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000304 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	@ (8000308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0b      	ldr	r4, [pc, #44]	@ (800030c <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002ea:	f000 fdc7 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ee:	f003 fe01 	bl	8003ef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002f2:	f000 f97f 	bl	80005f4 <main>

080002f6 <LoopForever>:

LoopForever:
    b LoopForever
 80002f6:	e7fe      	b.n	80002f6 <LoopForever>
  ldr   r0, =_estack
 80002f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20004070 	.word	0x20004070
  ldr r2, =_sidata
 8000304:	08005024 	.word	0x08005024
  ldr r2, =_sbss
 8000308:	20004070 	.word	0x20004070
  ldr r4, =_ebss
 800030c:	20008350 	.word	0x20008350

08000310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC1_2_IRQHandler>

08000312 <cal_crc>:

#define SPI1_Process_DBG_PIN                  GPIO_PIN_1
#define SPI1_Process_DBG_PORT                 GPIOA

uint16_t cal_crc(const uint8_t *pBuffer,int pSize)
{
 8000312:	b480      	push	{r7}
 8000314:	b087      	sub	sp, #28
 8000316:	af00      	add	r7, sp, #0
 8000318:	6078      	str	r0, [r7, #4]
 800031a:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF;
 800031c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000320:	82fb      	strh	r3, [r7, #22]
	uint8_t temp;
	for(int x=0;x<pSize;x++)
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
 8000326:	e00c      	b.n	8000342 <cal_crc+0x30>
	{
			temp = pBuffer[x];
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	4413      	add	r3, r2
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	73fb      	strb	r3, [r7, #15]
			crc -= temp;
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	b29b      	uxth	r3, r3
 8000336:	8afa      	ldrh	r2, [r7, #22]
 8000338:	1ad3      	subs	r3, r2, r3
 800033a:	82fb      	strh	r3, [r7, #22]
	for(int x=0;x<pSize;x++)
 800033c:	693b      	ldr	r3, [r7, #16]
 800033e:	3301      	adds	r3, #1
 8000340:	613b      	str	r3, [r7, #16]
 8000342:	693a      	ldr	r2, [r7, #16]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	429a      	cmp	r2, r3
 8000348:	dbee      	blt.n	8000328 <cal_crc+0x16>
	}

	return crc;
 800034a:	8afb      	ldrh	r3, [r7, #22]
}
 800034c:	4618      	mov	r0, r3
 800034e:	371c      	adds	r7, #28
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <Process_Buffer>:
	uint16_t crc;
}SPI_Transfer_Base_t;
#pragma pack(pop)

void Process_Buffer()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0
	// all good!
	SPI_Transfer_Status.Process.Begin_Counter++;
 800035e:	4b2e      	ldr	r3, [pc, #184]	@ (8000418 <Process_Buffer+0xc0>)
 8000360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000362:	3301      	adds	r3, #1
 8000364:	4a2c      	ldr	r2, [pc, #176]	@ (8000418 <Process_Buffer+0xc0>)
 8000366:	6293      	str	r3, [r2, #40]	@ 0x28

	SPI_Transfer_Base_t *packet = (SPI_Transfer_Base_t *)aRxBuffer;
 8000368:	4b2c      	ldr	r3, [pc, #176]	@ (800041c <Process_Buffer+0xc4>)
 800036a:	613b      	str	r3, [r7, #16]

	uint16_t Errors=0;
 800036c:	2300      	movs	r3, #0
 800036e:	81fb      	strh	r3, [r7, #14]
	int Length_Ok=0;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
	int CRC_Ok=0;
 8000374:	2300      	movs	r3, #0
 8000376:	60bb      	str	r3, [r7, #8]

	if(packet->payload.length>sizeof(SPI_Transfer_Base_t))
 8000378:	693b      	ldr	r3, [r7, #16]
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	b29b      	uxth	r3, r3
 800037e:	2b85      	cmp	r3, #133	@ 0x85
 8000380:	d907      	bls.n	8000392 <Process_Buffer+0x3a>
	{
		Errors=0x0001;
 8000382:	2301      	movs	r3, #1
 8000384:	81fb      	strh	r3, [r7, #14]
		SPI_Transfer_Status.Process.Length_Max_Error++;
 8000386:	4b24      	ldr	r3, [pc, #144]	@ (8000418 <Process_Buffer+0xc0>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038a:	3301      	adds	r3, #1
 800038c:	4a22      	ldr	r2, [pc, #136]	@ (8000418 <Process_Buffer+0xc0>)
 800038e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000390:	e018      	b.n	80003c4 <Process_Buffer+0x6c>
	}
	else
	{
		int bytes_rx_in_DMA = SPI_TX_RX_BUFFERSIZE - hspi1.hdmarx->Instance->CNDTR;
 8000392:	4b23      	ldr	r3, [pc, #140]	@ (8000420 <Process_Buffer+0xc8>)
 8000394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	f5c3 4380 	rsb	r3, r3, #16384	@ 0x4000
 800039e:	607b      	str	r3, [r7, #4]
		if(packet->payload.length == (bytes_rx_in_DMA)-2)
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	461a      	mov	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3b02      	subs	r3, #2
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d102      	bne.n	80003b6 <Process_Buffer+0x5e>
		{
			Length_Ok=1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	617b      	str	r3, [r7, #20]
 80003b4:	e006      	b.n	80003c4 <Process_Buffer+0x6c>
		}
		else
		{
			Errors=0x0002;
 80003b6:	2302      	movs	r3, #2
 80003b8:	81fb      	strh	r3, [r7, #14]
			SPI_Transfer_Status.Process.Length_DMA_Count_Error++;
 80003ba:	4b17      	ldr	r3, [pc, #92]	@ (8000418 <Process_Buffer+0xc0>)
 80003bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003be:	3301      	adds	r3, #1
 80003c0:	4a15      	ldr	r2, [pc, #84]	@ (8000418 <Process_Buffer+0xc0>)
 80003c2:	6353      	str	r3, [r2, #52]	@ 0x34
		}
	}


	if(Length_Ok)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d01d      	beq.n	8000406 <Process_Buffer+0xae>
	{
		// ok packet length rx'f matches the DMA counter
		uint16_t rx_crc = cal_crc((uint8_t*)&packet->payload,packet->payload.length);
 80003ca:	693a      	ldr	r2, [r7, #16]
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	4619      	mov	r1, r3
 80003d4:	4610      	mov	r0, r2
 80003d6:	f7ff ff9c 	bl	8000312 <cal_crc>
 80003da:	4603      	mov	r3, r0
 80003dc:	807b      	strh	r3, [r7, #2]

		if(packet->crc == rx_crc)
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	f8b3 3083 	ldrh.w	r3, [r3, #131]	@ 0x83
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	887a      	ldrh	r2, [r7, #2]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d107      	bne.n	80003fc <Process_Buffer+0xa4>
		{
			CRC_Ok=1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
			SPI_Transfer_Status.Process.CRC_OK_Counter++;
 80003f0:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <Process_Buffer+0xc0>)
 80003f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003f4:	3301      	adds	r3, #1
 80003f6:	4a08      	ldr	r2, [pc, #32]	@ (8000418 <Process_Buffer+0xc0>)
 80003f8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80003fa:	e004      	b.n	8000406 <Process_Buffer+0xae>
		}
		else
		{
			SPI_Transfer_Status.Process.CRC_Error_Counter++;
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <Process_Buffer+0xc0>)
 80003fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000400:	3301      	adds	r3, #1
 8000402:	4a05      	ldr	r2, [pc, #20]	@ (8000418 <Process_Buffer+0xc0>)
 8000404:	6393      	str	r3, [r2, #56]	@ 0x38
		}
	}

	SPI_Transfer_Status.Process.End_Counter++;
 8000406:	4b04      	ldr	r3, [pc, #16]	@ (8000418 <Process_Buffer+0xc0>)
 8000408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800040a:	3301      	adds	r3, #1
 800040c:	4a02      	ldr	r2, [pc, #8]	@ (8000418 <Process_Buffer+0xc0>)
 800040e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8000410:	bf00      	nop
 8000412:	3718      	adds	r7, #24
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200081b4 	.word	0x200081b4
 800041c:	200041b0 	.word	0x200041b0
 8000420:	2000408c 	.word	0x2000408c

08000424 <SPI1_TEST_SEND>:

HAL_StatusTypeDef SPI1_TEST_SEND(int pRandom)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b0a9      	sub	sp, #164	@ 0xa4
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	static uint32_t tx_counter;
	memset(aRxBuffer,0xFF,sizeof(aRxBuffer));
 800042c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000430:	21ff      	movs	r1, #255	@ 0xff
 8000432:	4843      	ldr	r0, [pc, #268]	@ (8000540 <SPI1_TEST_SEND+0x11c>)
 8000434:	f003 fd09 	bl	8003e4a <memset>
	memset(aTxBuffer,0,sizeof(aTxBuffer));
 8000438:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800043c:	2100      	movs	r1, #0
 800043e:	4841      	ldr	r0, [pc, #260]	@ (8000544 <SPI1_TEST_SEND+0x120>)
 8000440:	f003 fd03 	bl	8003e4a <memset>

	SPI_Transfer_Base_t packet = {};
 8000444:	f107 030c 	add.w	r3, r7, #12
 8000448:	2285      	movs	r2, #133	@ 0x85
 800044a:	2100      	movs	r1, #0
 800044c:	4618      	mov	r0, r3
 800044e:	f003 fcfc 	bl	8003e4a <memset>

	if(pRandom)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d02b      	beq.n	80004b0 <SPI1_TEST_SEND+0x8c>
	{
		// random payload
		packet.payload.buffer[4]=tx_counter>>0;
 8000458:	4b3b      	ldr	r3, [pc, #236]	@ (8000548 <SPI1_TEST_SEND+0x124>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	b2db      	uxtb	r3, r3
 800045e:	74fb      	strb	r3, [r7, #19]
		packet.payload.buffer[5]=tx_counter>>8;
 8000460:	4b39      	ldr	r3, [pc, #228]	@ (8000548 <SPI1_TEST_SEND+0x124>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	0a1b      	lsrs	r3, r3, #8
 8000466:	b2db      	uxtb	r3, r3
 8000468:	753b      	strb	r3, [r7, #20]
		packet.payload.buffer[6]=tx_counter>>16;
 800046a:	4b37      	ldr	r3, [pc, #220]	@ (8000548 <SPI1_TEST_SEND+0x124>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	0c1b      	lsrs	r3, r3, #16
 8000470:	b2db      	uxtb	r3, r3
 8000472:	757b      	strb	r3, [r7, #21]
		packet.payload.buffer[7]=tx_counter>>24;
 8000474:	4b34      	ldr	r3, [pc, #208]	@ (8000548 <SPI1_TEST_SEND+0x124>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	0e1b      	lsrs	r3, r3, #24
 800047a:	b2db      	uxtb	r3, r3
 800047c:	75bb      	strb	r3, [r7, #22]

		for(int x=8;x<sizeof(packet.payload.buffer);x++)
 800047e:	2308      	movs	r3, #8
 8000480:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000484:	e00f      	b.n	80004a6 <SPI1_TEST_SEND+0x82>
		{
			packet.payload.buffer[x]=rand();
 8000486:	f003 fb7b 	bl	8003b80 <rand>
 800048a:	4603      	mov	r3, r0
 800048c:	b2d9      	uxtb	r1, r3
 800048e:	f107 020f 	add.w	r2, r7, #15
 8000492:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000496:	4413      	add	r3, r2
 8000498:	460a      	mov	r2, r1
 800049a:	701a      	strb	r2, [r3, #0]
		for(int x=8;x<sizeof(packet.payload.buffer);x++)
 800049c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80004a0:	3301      	adds	r3, #1
 80004a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80004a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80004aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80004ac:	d9eb      	bls.n	8000486 <SPI1_TEST_SEND+0x62>
 80004ae:	e00c      	b.n	80004ca <SPI1_TEST_SEND+0xa6>
		}
	}
	else
	{
		sprintf((char *)packet.payload.buffer, "Reply Message Blah Blah,%09ld,%09ld",tx_counter,HAL_GetTick());
 80004b0:	4b25      	ldr	r3, [pc, #148]	@ (8000548 <SPI1_TEST_SEND+0x124>)
 80004b2:	681c      	ldr	r4, [r3, #0]
 80004b4:	f000 fd5c 	bl	8000f70 <HAL_GetTick>
 80004b8:	4602      	mov	r2, r0
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	1cd8      	adds	r0, r3, #3
 80004c0:	4613      	mov	r3, r2
 80004c2:	4622      	mov	r2, r4
 80004c4:	4921      	ldr	r1, [pc, #132]	@ (800054c <SPI1_TEST_SEND+0x128>)
 80004c6:	f003 fc5b 	bl	8003d80 <siprintf>
	}

	packet.payload.length = sizeof(packet)-2;
 80004ca:	2383      	movs	r3, #131	@ 0x83
 80004cc:	81bb      	strh	r3, [r7, #12]
	packet.crc = cal_crc((const uint8_t *)&packet.payload, packet.payload.length);
 80004ce:	89bb      	ldrh	r3, [r7, #12]
 80004d0:	461a      	mov	r2, r3
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	4611      	mov	r1, r2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff1a 	bl	8000312 <cal_crc>
 80004de:	4603      	mov	r3, r0
 80004e0:	f8a7 308f 	strh.w	r3, [r7, #143]	@ 0x8f

	tx_counter++;
 80004e4:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <SPI1_TEST_SEND+0x124>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	3301      	adds	r3, #1
 80004ea:	4a17      	ldr	r2, [pc, #92]	@ (8000548 <SPI1_TEST_SEND+0x124>)
 80004ec:	6013      	str	r3, [r2, #0]

	uint8_t* byte_ptr=(uint8_t*)&packet;
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	for(int x=0;x<sizeof(packet);x++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80004fc:	e010      	b.n	8000520 <SPI1_TEST_SEND+0xfc>
	{
		aTxBuffer[x]=byte_ptr[x];
 80004fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000502:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000506:	4413      	add	r3, r2
 8000508:	7819      	ldrb	r1, [r3, #0]
 800050a:	4a0e      	ldr	r2, [pc, #56]	@ (8000544 <SPI1_TEST_SEND+0x120>)
 800050c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000510:	4413      	add	r3, r2
 8000512:	460a      	mov	r2, r1
 8000514:	701a      	strb	r2, [r3, #0]
	for(int x=0;x<sizeof(packet);x++)
 8000516:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800051a:	3301      	adds	r3, #1
 800051c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000524:	2b84      	cmp	r3, #132	@ 0x84
 8000526:	d9ea      	bls.n	80004fe <SPI1_TEST_SEND+0xda>
	}

	return HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, SPI_TX_RX_BUFFERSIZE);
 8000528:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800052c:	4a04      	ldr	r2, [pc, #16]	@ (8000540 <SPI1_TEST_SEND+0x11c>)
 800052e:	4905      	ldr	r1, [pc, #20]	@ (8000544 <SPI1_TEST_SEND+0x120>)
 8000530:	4807      	ldr	r0, [pc, #28]	@ (8000550 <SPI1_TEST_SEND+0x12c>)
 8000532:	f002 fb67 	bl	8002c04 <HAL_SPI_TransmitReceive_DMA>
 8000536:	4603      	mov	r3, r0
}
 8000538:	4618      	mov	r0, r3
 800053a:	37a4      	adds	r7, #164	@ 0xa4
 800053c:	46bd      	mov	sp, r7
 800053e:	bd90      	pop	{r4, r7, pc}
 8000540:	200041b0 	.word	0x200041b0
 8000544:	20000000 	.word	0x20000000
 8000548:	200081f4 	.word	0x200081f4
 800054c:	08004f00 	.word	0x08004f00
 8000550:	2000408c 	.word	0x2000408c

08000554 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_4)
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	2b10      	cmp	r3, #16
 8000562:	d119      	bne.n	8000598 <HAL_GPIO_EXTI_Callback+0x44>
	{
		SPI_Transfer_Status.CS_End.Interrupt_Counter++;
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	3301      	adds	r3, #1
 800056a:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0x4c>)
 800056c:	6053      	str	r3, [r2, #4]

		HAL_StatusTypeDef state_res = HAL_SPI_GetState(&hspi1);
 800056e:	480d      	ldr	r0, [pc, #52]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000570:	f002 ff4c 	bl	800340c <HAL_SPI_GetState>
 8000574:	4603      	mov	r3, r0
 8000576:	73fb      	strb	r3, [r7, #15]
		if(state_res<=(HAL_StatusTypeDef)HAL_SPI_STATE_ABORT)
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	2b07      	cmp	r3, #7
 800057c:	d809      	bhi.n	8000592 <HAL_GPIO_EXTI_Callback+0x3e>
		{
			SPI_Transfer_Status.CS_End.States[state_res]++;
 800057e:	7bfa      	ldrb	r2, [r7, #15]
 8000580:	4907      	ldr	r1, [pc, #28]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000582:	0093      	lsls	r3, r2, #2
 8000584:	440b      	add	r3, r1
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	1c59      	adds	r1, r3, #1
 800058a:	4805      	ldr	r0, [pc, #20]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0x4c>)
 800058c:	0093      	lsls	r3, r2, #2
 800058e:	4403      	add	r3, r0
 8000590:	6099      	str	r1, [r3, #8]
		}

		// just make this state - even if no bytes!
		wTransferState = TRANSFER_COMPLETE;
 8000592:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]
	}
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	200081b4 	.word	0x200081b4
 80005a4:	2000408c 	.word	0x2000408c
 80005a8:	200081b0 	.word	0x200081b0

080005ac <SPI1_PA4_EN_Intterrupt>:
{
	return HAL_GPIO_ReadPin(SPI1_CS_PORT, SPI1_CS_PIN);
}

void SPI1_PA4_EN_Intterrupt()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 80005c0:	2310      	movs	r3, #16
 80005c2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005c8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SPI1_CS_PORT, &GPIO_InitStruct);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4619      	mov	r1, r3
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d6:	f001 fa03 	bl	80019e0 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(SPI1_CS_EXTI_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	200a      	movs	r0, #10
 80005e0:	f000 fdf3 	bl	80011ca <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(SPI1_CS_EXTI_IRQn);
 80005e4:	200a      	movs	r0, #10
 80005e6:	f000 fe0a 	bl	80011fe <HAL_NVIC_EnableIRQ>
}
 80005ea:	bf00      	nop
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fc55 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f883 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f937 	bl	8000874 <MX_GPIO_Init>
  MX_DMA_Init();
 8000606:	f000 f903 	bl	8000810 <MX_DMA_Init>
  MX_SPI1_Init();
 800060a:	f000 f8c9 	bl	80007a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED2);
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fbd2 	bl	8000db8 <BSP_LED_Init>
  SPI1_PA4_EN_Intterrupt();
 8000614:	f7ff ffca 	bl	80005ac <SPI1_PA4_EN_Intterrupt>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_StatusTypeDef state_res = HAL_SPI_GetState(&hspi1);
 8000618:	4836      	ldr	r0, [pc, #216]	@ (80006f4 <main+0x100>)
 800061a:	f002 fef7 	bl	800340c <HAL_SPI_GetState>
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]

	  if(Transfer_Init)
 8000622:	4b35      	ldr	r3, [pc, #212]	@ (80006f8 <main+0x104>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00c      	beq.n	8000644 <main+0x50>
	  {
		  HAL_StatusTypeDef res = SPI1_TEST_SEND(1);
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff fefa 	bl	8000424 <SPI1_TEST_SEND>
 8000630:	4603      	mov	r3, r0
 8000632:	71bb      	strb	r3, [r7, #6]
		  if ( res != HAL_OK)
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <main+0x4a>
		  {
		    /* Transfer error in transmission process */
		    Error_Handler();
 800063a:	f000 f97b 	bl	8000934 <Error_Handler>
		  }
		  Transfer_Init=0;
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <main+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
	  }

	  while (wTransferState == TRANSFER_WAIT)
 8000644:	bf00      	nop
 8000646:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <main+0x108>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0fb      	beq.n	8000646 <main+0x52>
	  {
	  }

	  switch (wTransferState)
 800064e:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <main+0x108>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d002      	beq.n	800065c <main+0x68>
 8000656:	2b02      	cmp	r3, #2
 8000658:	d029      	beq.n	80006ae <main+0xba>
 800065a:	e04a      	b.n	80006f2 <main+0xfe>
	  {
	    case TRANSFER_COMPLETE :
	    	HAL_GPIO_WritePin(SPI_Process_DBG_GPIO_Port, SPI_Process_DBG_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2102      	movs	r1, #2
 8000660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000664:	f001 fc20 	bl	8001ea8 <HAL_GPIO_WritePin>

	    	Process_Buffer();
 8000668:	f7ff fe76 	bl	8000358 <Process_Buffer>

	    	HAL_SPI_DMAStop(&hspi1);
 800066c:	4821      	ldr	r0, [pc, #132]	@ (80006f4 <main+0x100>)
 800066e:	f002 fd6f 	bl	8003150 <HAL_SPI_DMAStop>
			HAL_SPI_Abort(&hspi1);
 8000672:	4820      	ldr	r0, [pc, #128]	@ (80006f4 <main+0x100>)
 8000674:	f002 fc4c 	bl	8002f10 <HAL_SPI_Abort>

			__HAL_RCC_SPI1_FORCE_RESET();
 8000678:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <main+0x10c>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a20      	ldr	r2, [pc, #128]	@ (8000700 <main+0x10c>)
 800067e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_RCC_SPI1_RELEASE_RESET();
 8000684:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <main+0x10c>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a1d      	ldr	r2, [pc, #116]	@ (8000700 <main+0x10c>)
 800068a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40

			HAL_StatusTypeDef res = SPI1_TEST_SEND(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff fec7 	bl	8000424 <SPI1_TEST_SEND>
 8000696:	4603      	mov	r3, r0
 8000698:	717b      	strb	r3, [r7, #5]

			wTransferState = TRANSFER_PROCESSED;
 800069a:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <main+0x108>)
 800069c:	2203      	movs	r2, #3
 800069e:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(SPI_Process_DBG_GPIO_Port, SPI_Process_DBG_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2102      	movs	r1, #2
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a8:	f001 fbfe 	bl	8001ea8 <HAL_GPIO_WritePin>
	      break;
 80006ac:	e021      	b.n	80006f2 <main+0xfe>

	    case TRANSFER_ERROR:
	    	SPI_Transfer_Status.HAL_Error_Counter++;
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <main+0x110>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a13      	ldr	r2, [pc, #76]	@ (8000704 <main+0x110>)
 80006b6:	6013      	str	r3, [r2, #0]
			wTransferState = TRANSFER_PROCESSED;
 80006b8:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <main+0x108>)
 80006ba:	2203      	movs	r2, #3
 80006bc:	601a      	str	r2, [r3, #0]

			// https://community.st.com/t5/stm32-mcus-products/restart-spi-dma-transmission/td-p/637909
			HAL_SPI_DMAStop(&hspi1);
 80006be:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <main+0x100>)
 80006c0:	f002 fd46 	bl	8003150 <HAL_SPI_DMAStop>
			__HAL_RCC_SPI1_FORCE_RESET();
 80006c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <main+0x10c>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000700 <main+0x10c>)
 80006ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_RCC_SPI1_RELEASE_RESET();
 80006d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <main+0x10c>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000700 <main+0x10c>)
 80006d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006da:	6413      	str	r3, [r2, #64]	@ 0x40
			HAL_SPI_DeInit(&hspi1);
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <main+0x100>)
 80006de:	f002 fa68 	bl	8002bb2 <HAL_SPI_DeInit>
			MX_SPI1_Init();
 80006e2:	f000 f85d 	bl	80007a0 <MX_SPI1_Init>
			SPI1_PA4_EN_Intterrupt();
 80006e6:	f7ff ff61 	bl	80005ac <SPI1_PA4_EN_Intterrupt>

			Transfer_Init=1;
 80006ea:	4b03      	ldr	r3, [pc, #12]	@ (80006f8 <main+0x104>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
	      break;
 80006f0:	bf00      	nop
  {
 80006f2:	e791      	b.n	8000618 <main+0x24>
 80006f4:	2000408c 	.word	0x2000408c
 80006f8:	20004000 	.word	0x20004000
 80006fc:	200081b0 	.word	0x200081b0
 8000700:	40021000 	.word	0x40021000
 8000704:	200081b4 	.word	0x200081b4

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	2238      	movs	r2, #56	@ 0x38
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fb97 	bl	8003e4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800072a:	2000      	movs	r0, #0
 800072c:	f001 fbec 	bl	8001f08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073a:	2340      	movs	r3, #64	@ 0x40
 800073c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000742:	2302      	movs	r3, #2
 8000744:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000746:	2304      	movs	r3, #4
 8000748:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800074a:	2355      	movs	r3, #85	@ 0x55
 800074c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0318 	add.w	r3, r7, #24
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fc86 	bl	8002070 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800076a:	f000 f8e3 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2303      	movs	r3, #3
 8000774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2104      	movs	r1, #4
 8000786:	4618      	mov	r0, r3
 8000788:	f001 ff84 	bl	8002694 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000792:	f000 f8cf 	bl	8000934 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	@ 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007a6:	4a19      	ldr	r2, [pc, #100]	@ (800080c <MX_SPI1_Init+0x6c>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80007aa:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b0:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007b8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007f6:	f002 f931 	bl	8002a5c <HAL_SPI_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000800:	f000 f898 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000408c 	.word	0x2000408c
 800080c:	40013000 	.word	0x40013000

08000810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000816:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_DMA_Init+0x60>)
 8000818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800081a:	4a15      	ldr	r2, [pc, #84]	@ (8000870 <MX_DMA_Init+0x60>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6493      	str	r3, [r2, #72]	@ 0x48
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_DMA_Init+0x60>)
 8000824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <MX_DMA_Init+0x60>)
 8000830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000832:	4a0f      	ldr	r2, [pc, #60]	@ (8000870 <MX_DMA_Init+0x60>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6493      	str	r3, [r2, #72]	@ 0x48
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <MX_DMA_Init+0x60>)
 800083c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	200c      	movs	r0, #12
 800084c:	f000 fcbd 	bl	80011ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000850:	200c      	movs	r0, #12
 8000852:	f000 fcd4 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	200d      	movs	r0, #13
 800085c:	f000 fcb5 	bl	80011ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000860:	200d      	movs	r0, #13
 8000862:	f000 fccc 	bl	80011fe <HAL_NVIC_EnableIRQ>

}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_GPIO_Init+0x78>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	4a17      	ldr	r2, [pc, #92]	@ (80008ec <MX_GPIO_Init+0x78>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_GPIO_Init+0x78>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_GPIO_Init+0x78>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	4a11      	ldr	r2, [pc, #68]	@ (80008ec <MX_GPIO_Init+0x78>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_GPIO_Init+0x78>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_Process_DBG_GPIO_Port, SPI_Process_DBG_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2102      	movs	r1, #2
 80008be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c2:	f001 faf1 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_Process_DBG_Pin */
  GPIO_InitStruct.Pin = SPI_Process_DBG_Pin;
 80008c6:	2302      	movs	r3, #2
 80008c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_Process_DBG_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e0:	f001 f87e 	bl	80019e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  static int callbacks;
  /* Turn LED2 on: Transfer in transmission/reception process is complete */


  callbacks++;
 80008f8:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <HAL_SPI_TxRxCpltCallback+0x20>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	4a04      	ldr	r2, [pc, #16]	@ (8000910 <HAL_SPI_TxRxCpltCallback+0x20>)
 8000900:	6013      	str	r3, [r2, #0]
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	200081f8 	.word	0x200081f8

08000914 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 800091c:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <HAL_SPI_ErrorCallback+0x1c>)
 800091e:	2202      	movs	r2, #2
 8000920:	601a      	str	r2, [r3, #0]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	200081b0 	.word	0x200081b0

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_Off(LED2);
 8000938:	2000      	movs	r0, #0
 800093a:	f000 fa89 	bl	8000e50 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 800093e:	2000      	movs	r0, #0
 8000940:	f000 fa86 	bl	8000e50 <BSP_LED_Off>
  while (1)
  {
    /* Toggle LED2 for error */
	BSP_LED_On(LED2);
 8000944:	2000      	movs	r0, #0
 8000946:	f000 fa6d 	bl	8000e24 <BSP_LED_On>
    HAL_Delay(1000);
 800094a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800094e:	f000 fb1b 	bl	8000f88 <HAL_Delay>
	BSP_LED_On(LED2);
 8000952:	bf00      	nop
 8000954:	e7f6      	b.n	8000944 <Error_Handler+0x10>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_MspInit+0x44>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000962:	4a0e      	ldr	r2, [pc, #56]	@ (800099c <HAL_MspInit+0x44>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6613      	str	r3, [r2, #96]	@ 0x60
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <HAL_MspInit+0x44>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <HAL_MspInit+0x44>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097a:	4a08      	ldr	r2, [pc, #32]	@ (800099c <HAL_MspInit+0x44>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000980:	6593      	str	r3, [r2, #88]	@ 0x58
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_MspInit+0x44>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800098e:	f001 fb5f 	bl	8002050 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	@ 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a53      	ldr	r2, [pc, #332]	@ (8000b0c <HAL_SPI_MspInit+0x16c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	f040 80a0 	bne.w	8000b04 <HAL_SPI_MspInit+0x164>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c4:	4b52      	ldr	r3, [pc, #328]	@ (8000b10 <HAL_SPI_MspInit+0x170>)
 80009c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009c8:	4a51      	ldr	r2, [pc, #324]	@ (8000b10 <HAL_SPI_MspInit+0x170>)
 80009ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80009d0:	4b4f      	ldr	r3, [pc, #316]	@ (8000b10 <HAL_SPI_MspInit+0x170>)
 80009d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b4c      	ldr	r3, [pc, #304]	@ (8000b10 <HAL_SPI_MspInit+0x170>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e0:	4a4b      	ldr	r2, [pc, #300]	@ (8000b10 <HAL_SPI_MspInit+0x170>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e8:	4b49      	ldr	r3, [pc, #292]	@ (8000b10 <HAL_SPI_MspInit+0x170>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	4b46      	ldr	r3, [pc, #280]	@ (8000b10 <HAL_SPI_MspInit+0x170>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	4a45      	ldr	r2, [pc, #276]	@ (8000b10 <HAL_SPI_MspInit+0x170>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a00:	4b43      	ldr	r3, [pc, #268]	@ (8000b10 <HAL_SPI_MspInit+0x170>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a0c:	2310      	movs	r3, #16
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2a:	f000 ffd9 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a2e:	2338      	movs	r3, #56	@ 0x38
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4832      	ldr	r0, [pc, #200]	@ (8000b14 <HAL_SPI_MspInit+0x174>)
 8000a4a:	f000 ffc9 	bl	80019e0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000a4e:	4b32      	ldr	r3, [pc, #200]	@ (8000b18 <HAL_SPI_MspInit+0x178>)
 8000a50:	4a32      	ldr	r2, [pc, #200]	@ (8000b1c <HAL_SPI_MspInit+0x17c>)
 8000a52:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000a54:	4b30      	ldr	r3, [pc, #192]	@ (8000b18 <HAL_SPI_MspInit+0x178>)
 8000a56:	220b      	movs	r2, #11
 8000a58:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b18 <HAL_SPI_MspInit+0x178>)
 8000a5c:	2210      	movs	r2, #16
 8000a5e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a60:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <HAL_SPI_MspInit+0x178>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a66:	4b2c      	ldr	r3, [pc, #176]	@ (8000b18 <HAL_SPI_MspInit+0x178>)
 8000a68:	2280      	movs	r2, #128	@ 0x80
 8000a6a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b18 <HAL_SPI_MspInit+0x178>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a72:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <HAL_SPI_MspInit+0x178>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000a78:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <HAL_SPI_MspInit+0x178>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a7e:	4b26      	ldr	r3, [pc, #152]	@ (8000b18 <HAL_SPI_MspInit+0x178>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000a84:	4824      	ldr	r0, [pc, #144]	@ (8000b18 <HAL_SPI_MspInit+0x178>)
 8000a86:	f000 fbe3 	bl	8001250 <HAL_DMA_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 8000a90:	f7ff ff50 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a20      	ldr	r2, [pc, #128]	@ (8000b18 <HAL_SPI_MspInit+0x178>)
 8000a98:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000b18 <HAL_SPI_MspInit+0x178>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <HAL_SPI_MspInit+0x180>)
 8000aa2:	4a20      	ldr	r2, [pc, #128]	@ (8000b24 <HAL_SPI_MspInit+0x184>)
 8000aa4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <HAL_SPI_MspInit+0x180>)
 8000aa8:	220a      	movs	r2, #10
 8000aaa:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aac:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <HAL_SPI_MspInit+0x180>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <HAL_SPI_MspInit+0x180>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab8:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <HAL_SPI_MspInit+0x180>)
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000abe:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <HAL_SPI_MspInit+0x180>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <HAL_SPI_MspInit+0x180>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_SPI_MspInit+0x180>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <HAL_SPI_MspInit+0x180>)
 8000ad2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ad6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000ad8:	4811      	ldr	r0, [pc, #68]	@ (8000b20 <HAL_SPI_MspInit+0x180>)
 8000ada:	f000 fbb9 	bl	8001250 <HAL_DMA_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8000ae4:	f7ff ff26 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a0d      	ldr	r2, [pc, #52]	@ (8000b20 <HAL_SPI_MspInit+0x180>)
 8000aec:	659a      	str	r2, [r3, #88]	@ 0x58
 8000aee:	4a0c      	ldr	r2, [pc, #48]	@ (8000b20 <HAL_SPI_MspInit+0x180>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	2023      	movs	r0, #35	@ 0x23
 8000afa:	f000 fb66 	bl	80011ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000afe:	2023      	movs	r0, #35	@ 0x23
 8000b00:	f000 fb7d 	bl	80011fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	@ 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40013000 	.word	0x40013000
 8000b10:	40021000 	.word	0x40021000
 8000b14:	48000400 	.word	0x48000400
 8000b18:	200040f0 	.word	0x200040f0
 8000b1c:	40020030 	.word	0x40020030
 8000b20:	20004150 	.word	0x20004150
 8000b24:	4002001c 	.word	0x4002001c

08000b28 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a17      	ldr	r2, [pc, #92]	@ (8000b94 <HAL_SPI_MspDeInit+0x6c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d127      	bne.n	8000b8a <HAL_SPI_MspDeInit+0x62>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */
    /* Reset peripherals */
    __HAL_RCC_SPI1_FORCE_RESET();
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <HAL_SPI_MspDeInit+0x70>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	4a16      	ldr	r2, [pc, #88]	@ (8000b98 <HAL_SPI_MspDeInit+0x70>)
 8000b40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b44:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_RCC_SPI1_RELEASE_RESET();
 8000b46:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <HAL_SPI_MspDeInit+0x70>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	4a13      	ldr	r2, [pc, #76]	@ (8000b98 <HAL_SPI_MspDeInit+0x70>)
 8000b4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b50:	6413      	str	r3, [r2, #64]	@ 0x40

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <HAL_SPI_MspDeInit+0x70>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b56:	4a10      	ldr	r2, [pc, #64]	@ (8000b98 <HAL_SPI_MspDeInit+0x70>)
 8000b58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b5c:	6613      	str	r3, [r2, #96]	@ 0x60
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8000b5e:	2110      	movs	r1, #16
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b64:	f001 f8be 	bl	8001ce4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8000b68:	2138      	movs	r1, #56	@ 0x38
 8000b6a:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <HAL_SPI_MspDeInit+0x74>)
 8000b6c:	f001 f8ba 	bl	8001ce4 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmatx);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fc13 	bl	80013a0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fc0e 	bl	80013a0 <HAL_DMA_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8000b84:	2023      	movs	r0, #35	@ 0x23
 8000b86:	f000 fb48 	bl	800121a <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN SPI1_MspDeInit 1 */

    /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40013000 	.word	0x40013000
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	bf00      	nop
 8000bb4:	e7fd      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd6:	f000 f9b9 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <DMA1_Channel2_IRQHandler+0x10>)
 8000be6:	f000 fdac 	bl	8001742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20004150 	.word	0x20004150

08000bf4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <DMA1_Channel3_IRQHandler+0x10>)
 8000bfa:	f000 fda2 	bl	8001742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200040f0 	.word	0x200040f0

08000c08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <SPI1_IRQHandler+0x10>)
 8000c0e:	f002 fadf 	bl	80031d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000408c 	.word	0x2000408c

08000c1c <EXTI4_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI4_IRQHandler(void)   // <----- The ISR Function We're Looking For!
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000c20:	2010      	movs	r0, #16
 8000c22:	f001 f959 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  return 1;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_kill>:

int _kill(int pid, int sig)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c44:	f003 f950 	bl	8003ee8 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2216      	movs	r2, #22
 8000c4c:	601a      	str	r2, [r3, #0]
  return -1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_exit>:

void _exit (int status)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c62:	f04f 31ff 	mov.w	r1, #4294967295
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffe7 	bl	8000c3a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <_exit+0x12>

08000c70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e00a      	b.n	8000c98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c82:	f3af 8000 	nop.w
 8000c86:	4601      	mov	r1, r0
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	60ba      	str	r2, [r7, #8]
 8000c8e:	b2ca      	uxtb	r2, r1
 8000c90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3301      	adds	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dbf0      	blt.n	8000c82 <_read+0x12>
  }

  return len;
 8000ca0:	687b      	ldr	r3, [r7, #4]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e009      	b.n	8000cd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dbf1      	blt.n	8000cbc <_write+0x12>
  }
  return len;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <_close>:

int _close(int file)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_isatty>:

int _isatty(int file)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	@ (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f003 f8b4 	bl	8003ee8 <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20020000 	.word	0x20020000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	200081fc 	.word	0x200081fc
 8000db4:	20008350 	.word	0x20008350

08000db8 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <BSP_LED_Init+0x64>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	4a15      	ldr	r2, [pc, #84]	@ (8000e1c <BSP_LED_Init+0x64>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dce:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <BSP_LED_Init+0x64>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000dda:	2320      	movs	r3, #32
 8000ddc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	4a0c      	ldr	r2, [pc, #48]	@ (8000e20 <BSP_LED_Init+0x68>)
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	f107 020c 	add.w	r2, r7, #12
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fdf1 	bl	80019e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4a07      	ldr	r2, [pc, #28]	@ (8000e20 <BSP_LED_Init+0x68>)
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	2120      	movs	r1, #32
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 f84c 	bl	8001ea8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	20004004 	.word	0x20004004

08000e24 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	4a06      	ldr	r2, [pc, #24]	@ (8000e4c <BSP_LED_On+0x28>)
 8000e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e36:	2120      	movs	r1, #32
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 f834 	bl	8001ea8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20004004 	.word	0x20004004

08000e50 <BSP_LED_Off>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	4a06      	ldr	r2, [pc, #24]	@ (8000e78 <BSP_LED_Off+0x28>)
 8000e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e62:	2120      	movs	r1, #32
 8000e64:	2200      	movs	r2, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 f81e 	bl	8001ea8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20004004 	.word	0x20004004

08000e7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <SystemInit+0x28>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e86:	4a07      	ldr	r2, [pc, #28]	@ (8000ea4 <SystemInit+0x28>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e90:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <SystemInit+0x28>)
 8000e92:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e96:	609a      	str	r2, [r3, #8]
#endif
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 f97e 	bl	80011b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f000 f80d 	bl	8000ed8 <HAL_InitTick>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	e001      	b.n	8000ece <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eca:	f7ff fd45 	bl	8000958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ece:	79fb      	ldrb	r3, [r7, #7]

}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ee4:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <HAL_InitTick+0x68>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d022      	beq.n	8000f32 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <HAL_InitTick+0x6c>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <HAL_InitTick+0x68>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ef8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f998 	bl	8001236 <HAL_SYSTICK_Config>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10f      	bne.n	8000f2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b0f      	cmp	r3, #15
 8000f10:	d809      	bhi.n	8000f26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f12:	2200      	movs	r2, #0
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	f000 f956 	bl	80011ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <HAL_InitTick+0x70>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	e007      	b.n	8000f36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e004      	b.n	8000f36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e001      	b.n	8000f36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20004010 	.word	0x20004010
 8000f44:	20004008 	.word	0x20004008
 8000f48:	2000400c 	.word	0x2000400c

08000f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_IncTick+0x1c>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a03      	ldr	r2, [pc, #12]	@ (8000f68 <HAL_IncTick+0x1c>)
 8000f5c:	6013      	str	r3, [r2, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	20008200 	.word	0x20008200
 8000f6c:	20004010 	.word	0x20004010

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20008200 	.word	0x20008200

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d004      	beq.n	8000fac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <HAL_Delay+0x40>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fac:	bf00      	nop
 8000fae:	f7ff ffdf 	bl	8000f70 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d8f7      	bhi.n	8000fae <HAL_Delay+0x26>
  {
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20004010 	.word	0x20004010

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	@ (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db12      	blt.n	80010a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	490a      	ldr	r1, [pc, #40]	@ (80010b0 <__NVIC_DisableIRQ+0x44>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	2001      	movs	r0, #1
 800108e:	fa00 f202 	lsl.w	r2, r0, r2
 8001092:	3320      	adds	r3, #32
 8001094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001098:	f3bf 8f4f 	dsb	sy
}
 800109c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800109e:	f3bf 8f6f 	isb	sy
}
 80010a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	@ (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	@ (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	@ 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	@ 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001180:	d301      	bcc.n	8001186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001182:	2301      	movs	r3, #1
 8001184:	e00f      	b.n	80011a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <SysTick_Config+0x40>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118e:	210f      	movs	r1, #15
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f7ff ff8e 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <SysTick_Config+0x40>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <SysTick_Config+0x40>)
 80011a0:	2207      	movs	r2, #7
 80011a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	e000e010 	.word	0xe000e010

080011b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff05 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff1c 	bl	8001014 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff90 	bl	8001108 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5f 	bl	80010b4 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff0f 	bl	8001030 <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff1f 	bl	800106c <__NVIC_DisableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff96 	bl	8001170 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e08d      	b.n	800137e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	4b47      	ldr	r3, [pc, #284]	@ (8001388 <HAL_DMA_Init+0x138>)
 800126a:	429a      	cmp	r2, r3
 800126c:	d80f      	bhi.n	800128e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4b45      	ldr	r3, [pc, #276]	@ (800138c <HAL_DMA_Init+0x13c>)
 8001276:	4413      	add	r3, r2
 8001278:	4a45      	ldr	r2, [pc, #276]	@ (8001390 <HAL_DMA_Init+0x140>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	009a      	lsls	r2, r3, #2
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a42      	ldr	r2, [pc, #264]	@ (8001394 <HAL_DMA_Init+0x144>)
 800128a:	641a      	str	r2, [r3, #64]	@ 0x40
 800128c:	e00e      	b.n	80012ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	4b40      	ldr	r3, [pc, #256]	@ (8001398 <HAL_DMA_Init+0x148>)
 8001296:	4413      	add	r3, r2
 8001298:	4a3d      	ldr	r2, [pc, #244]	@ (8001390 <HAL_DMA_Init+0x140>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	009a      	lsls	r2, r3, #2
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a3c      	ldr	r2, [pc, #240]	@ (800139c <HAL_DMA_Init+0x14c>)
 80012aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80012c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80012c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fb0c 	bl	800191c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800130c:	d102      	bne.n	8001314 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001328:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d010      	beq.n	8001354 <HAL_DMA_Init+0x104>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b04      	cmp	r3, #4
 8001338:	d80c      	bhi.n	8001354 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 fb2c 	bl	8001998 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	e008      	b.n	8001366 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40020407 	.word	0x40020407
 800138c:	bffdfff8 	.word	0xbffdfff8
 8001390:	cccccccd 	.word	0xcccccccd
 8001394:	40020000 	.word	0x40020000
 8001398:	bffdfbf8 	.word	0xbffdfbf8
 800139c:	40020400 	.word	0x40020400

080013a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e07b      	b.n	80014aa <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b3a      	ldr	r3, [pc, #232]	@ (80014b4 <HAL_DMA_DeInit+0x114>)
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d80f      	bhi.n	80013ee <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b38      	ldr	r3, [pc, #224]	@ (80014b8 <HAL_DMA_DeInit+0x118>)
 80013d6:	4413      	add	r3, r2
 80013d8:	4a38      	ldr	r2, [pc, #224]	@ (80014bc <HAL_DMA_DeInit+0x11c>)
 80013da:	fba2 2303 	umull	r2, r3, r2, r3
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	009a      	lsls	r2, r3, #2
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a35      	ldr	r2, [pc, #212]	@ (80014c0 <HAL_DMA_DeInit+0x120>)
 80013ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80013ec:	e00e      	b.n	800140c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b33      	ldr	r3, [pc, #204]	@ (80014c4 <HAL_DMA_DeInit+0x124>)
 80013f6:	4413      	add	r3, r2
 80013f8:	4a30      	ldr	r2, [pc, #192]	@ (80014bc <HAL_DMA_DeInit+0x11c>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	009a      	lsls	r2, r3, #2
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a2f      	ldr	r2, [pc, #188]	@ (80014c8 <HAL_DMA_DeInit+0x128>)
 800140a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001418:	f003 021f 	and.w	r2, r3, #31
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001420:	2101      	movs	r1, #1
 8001422:	fa01 f202 	lsl.w	r2, r1, r2
 8001426:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 fa77 	bl	800191c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800143e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00f      	beq.n	8001468 <HAL_DMA_DeInit+0xc8>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d80b      	bhi.n	8001468 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 faa1 	bl	8001998 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001466:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40020407 	.word	0x40020407
 80014b8:	bffdfff8 	.word	0xbffdfff8
 80014bc:	cccccccd 	.word	0xcccccccd
 80014c0:	40020000 	.word	0x40020000
 80014c4:	bffdfbf8 	.word	0xbffdfbf8
 80014c8:	40020400 	.word	0x40020400

080014cc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_DMA_Start_IT+0x20>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e066      	b.n	80015ba <HAL_DMA_Start_IT+0xee>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d155      	bne.n	80015ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2202      	movs	r2, #2
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0201 	bic.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 f9bb 	bl	80018a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	2b00      	cmp	r3, #0
 8001530:	d008      	beq.n	8001544 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 020e 	orr.w	r2, r2, #14
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e00f      	b.n	8001564 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0204 	bic.w	r2, r2, #4
 8001552:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 020a 	orr.w	r2, r2, #10
 8001562:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800157c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001580:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001594:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001598:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0201 	orr.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e005      	b.n	80015b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015b4:	2302      	movs	r3, #2
 80015b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d005      	beq.n	80015e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2204      	movs	r2, #4
 80015de:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e037      	b.n	8001656 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 020e 	bic.w	r2, r2, #14
 80015f4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001600:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001604:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0201 	bic.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	f003 021f 	and.w	r2, r3, #31
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	2101      	movs	r1, #1
 8001624:	fa01 f202 	lsl.w	r2, r1, r2
 8001628:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001632:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00c      	beq.n	8001656 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001646:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800164a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001654:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d00d      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2204      	movs	r2, #4
 8001690:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	e047      	b.n	8001738 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 020e 	bic.w	r2, r2, #14
 80016b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	2101      	movs	r1, #1
 80016e6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00c      	beq.n	8001718 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001708:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800170c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001716:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4798      	blx	r3
    }
  }
  return status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	2204      	movs	r2, #4
 8001764:	409a      	lsls	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4013      	ands	r3, r2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d026      	beq.n	80017bc <HAL_DMA_IRQHandler+0x7a>
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d021      	beq.n	80017bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	2b00      	cmp	r3, #0
 8001784:	d107      	bne.n	8001796 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0204 	bic.w	r2, r2, #4
 8001794:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f003 021f 	and.w	r2, r3, #31
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	2104      	movs	r1, #4
 80017a4:	fa01 f202 	lsl.w	r2, r1, r2
 80017a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d071      	beq.n	8001896 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017ba:	e06c      	b.n	8001896 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	2202      	movs	r2, #2
 80017c6:	409a      	lsls	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d02e      	beq.n	800182e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d029      	beq.n	800182e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10b      	bne.n	8001800 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 020a 	bic.w	r2, r2, #10
 80017f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	2102      	movs	r1, #2
 800180e:	fa01 f202 	lsl.w	r2, r1, r2
 8001812:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	2b00      	cmp	r3, #0
 8001822:	d038      	beq.n	8001896 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800182c:	e033      	b.n	8001896 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	2208      	movs	r2, #8
 8001838:	409a      	lsls	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d02a      	beq.n	8001898 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d025      	beq.n	8001898 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 020e 	bic.w	r2, r2, #14
 800185a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	2101      	movs	r1, #1
 800186a:	fa01 f202 	lsl.w	r2, r1, r2
 800186e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800188a:	2b00      	cmp	r3, #0
 800188c:	d004      	beq.n	8001898 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001896:	bf00      	nop
 8001898:	bf00      	nop
}
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d004      	beq.n	80018ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	f003 021f 	and.w	r2, r3, #31
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	2101      	movs	r1, #1
 80018d8:	fa01 f202 	lsl.w	r2, r1, r2
 80018dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d108      	bne.n	8001900 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018fe:	e007      	b.n	8001910 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	60da      	str	r2, [r3, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800192c:	429a      	cmp	r2, r3
 800192e:	d802      	bhi.n	8001936 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e001      	b.n	800193a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001938:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3b08      	subs	r3, #8
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	009a      	lsls	r2, r3, #2
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4413      	add	r3, r2
 800195c:	461a      	mov	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a0b      	ldr	r2, [pc, #44]	@ (8001994 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001966:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2201      	movs	r2, #1
 8001970:	409a      	lsls	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001976:	bf00      	nop
 8001978:	371c      	adds	r7, #28
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40020407 	.word	0x40020407
 8001988:	40020800 	.word	0x40020800
 800198c:	40020820 	.word	0x40020820
 8001990:	cccccccd 	.word	0xcccccccd
 8001994:	40020880 	.word	0x40020880

08001998 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	461a      	mov	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a08      	ldr	r2, [pc, #32]	@ (80019dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019ba:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	2201      	movs	r2, #1
 80019c6:	409a      	lsls	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	1000823f 	.word	0x1000823f
 80019dc:	40020940 	.word	0x40020940

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019ee:	e15a      	b.n	8001ca6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2101      	movs	r1, #1
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 814c 	beq.w	8001ca0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d005      	beq.n	8001a20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d130      	bne.n	8001a82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a56:	2201      	movs	r2, #1
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	091b      	lsrs	r3, r3, #4
 8001a6c:	f003 0201 	and.w	r2, r3, #1
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d017      	beq.n	8001abe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d123      	bne.n	8001b12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	08da      	lsrs	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3208      	adds	r2, #8
 8001ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	08da      	lsrs	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3208      	adds	r2, #8
 8001b0c:	6939      	ldr	r1, [r7, #16]
 8001b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0203 	and.w	r2, r3, #3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80a6 	beq.w	8001ca0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b54:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc4 <HAL_GPIO_Init+0x2e4>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b58:	4a5a      	ldr	r2, [pc, #360]	@ (8001cc4 <HAL_GPIO_Init+0x2e4>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b60:	4b58      	ldr	r3, [pc, #352]	@ (8001cc4 <HAL_GPIO_Init+0x2e4>)
 8001b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6c:	4a56      	ldr	r2, [pc, #344]	@ (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b96:	d01f      	beq.n	8001bd8 <HAL_GPIO_Init+0x1f8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a4c      	ldr	r2, [pc, #304]	@ (8001ccc <HAL_GPIO_Init+0x2ec>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d019      	beq.n	8001bd4 <HAL_GPIO_Init+0x1f4>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a4b      	ldr	r2, [pc, #300]	@ (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d013      	beq.n	8001bd0 <HAL_GPIO_Init+0x1f0>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a4a      	ldr	r2, [pc, #296]	@ (8001cd4 <HAL_GPIO_Init+0x2f4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00d      	beq.n	8001bcc <HAL_GPIO_Init+0x1ec>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a49      	ldr	r2, [pc, #292]	@ (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d007      	beq.n	8001bc8 <HAL_GPIO_Init+0x1e8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a48      	ldr	r2, [pc, #288]	@ (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_GPIO_Init+0x1e4>
 8001bc0:	2305      	movs	r3, #5
 8001bc2:	e00a      	b.n	8001bda <HAL_GPIO_Init+0x1fa>
 8001bc4:	2306      	movs	r3, #6
 8001bc6:	e008      	b.n	8001bda <HAL_GPIO_Init+0x1fa>
 8001bc8:	2304      	movs	r3, #4
 8001bca:	e006      	b.n	8001bda <HAL_GPIO_Init+0x1fa>
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e004      	b.n	8001bda <HAL_GPIO_Init+0x1fa>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e002      	b.n	8001bda <HAL_GPIO_Init+0x1fa>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <HAL_GPIO_Init+0x1fa>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	f002 0203 	and.w	r2, r2, #3
 8001be0:	0092      	lsls	r2, r2, #2
 8001be2:	4093      	lsls	r3, r2
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bea:	4937      	ldr	r1, [pc, #220]	@ (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bf8:	4b39      	ldr	r3, [pc, #228]	@ (8001ce0 <HAL_GPIO_Init+0x300>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c1c:	4a30      	ldr	r2, [pc, #192]	@ (8001ce0 <HAL_GPIO_Init+0x300>)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce0 <HAL_GPIO_Init+0x300>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c46:	4a26      	ldr	r2, [pc, #152]	@ (8001ce0 <HAL_GPIO_Init+0x300>)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ce0 <HAL_GPIO_Init+0x300>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <HAL_GPIO_Init+0x300>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce0 <HAL_GPIO_Init+0x300>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ce0 <HAL_GPIO_Init+0x300>)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f47f ae9d 	bne.w	80019f0 <HAL_GPIO_Init+0x10>
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	bf00      	nop
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	48000400 	.word	0x48000400
 8001cd0:	48000800 	.word	0x48000800
 8001cd4:	48000c00 	.word	0x48000c00
 8001cd8:	48001000 	.word	0x48001000
 8001cdc:	48001400 	.word	0x48001400
 8001ce0:	40010400 	.word	0x40010400

08001ce4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8001cf2:	e0bd      	b.n	8001e70 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80b0 	beq.w	8001e6a <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8001d0a:	4a60      	ldr	r2, [pc, #384]	@ (8001e8c <HAL_GPIO_DeInit+0x1a8>)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3302      	adds	r3, #2
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	220f      	movs	r2, #15
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d32:	d01f      	beq.n	8001d74 <HAL_GPIO_DeInit+0x90>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a56      	ldr	r2, [pc, #344]	@ (8001e90 <HAL_GPIO_DeInit+0x1ac>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d019      	beq.n	8001d70 <HAL_GPIO_DeInit+0x8c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a55      	ldr	r2, [pc, #340]	@ (8001e94 <HAL_GPIO_DeInit+0x1b0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d013      	beq.n	8001d6c <HAL_GPIO_DeInit+0x88>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a54      	ldr	r2, [pc, #336]	@ (8001e98 <HAL_GPIO_DeInit+0x1b4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00d      	beq.n	8001d68 <HAL_GPIO_DeInit+0x84>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a53      	ldr	r2, [pc, #332]	@ (8001e9c <HAL_GPIO_DeInit+0x1b8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d007      	beq.n	8001d64 <HAL_GPIO_DeInit+0x80>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a52      	ldr	r2, [pc, #328]	@ (8001ea0 <HAL_GPIO_DeInit+0x1bc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d101      	bne.n	8001d60 <HAL_GPIO_DeInit+0x7c>
 8001d5c:	2305      	movs	r3, #5
 8001d5e:	e00a      	b.n	8001d76 <HAL_GPIO_DeInit+0x92>
 8001d60:	2306      	movs	r3, #6
 8001d62:	e008      	b.n	8001d76 <HAL_GPIO_DeInit+0x92>
 8001d64:	2304      	movs	r3, #4
 8001d66:	e006      	b.n	8001d76 <HAL_GPIO_DeInit+0x92>
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e004      	b.n	8001d76 <HAL_GPIO_DeInit+0x92>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e002      	b.n	8001d76 <HAL_GPIO_DeInit+0x92>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_GPIO_DeInit+0x92>
 8001d74:	2300      	movs	r3, #0
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	f002 0203 	and.w	r2, r2, #3
 8001d7c:	0092      	lsls	r2, r2, #2
 8001d7e:	4093      	lsls	r3, r2
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d132      	bne.n	8001dec <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001d86:	4b47      	ldr	r3, [pc, #284]	@ (8001ea4 <HAL_GPIO_DeInit+0x1c0>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	4945      	ldr	r1, [pc, #276]	@ (8001ea4 <HAL_GPIO_DeInit+0x1c0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001d94:	4b43      	ldr	r3, [pc, #268]	@ (8001ea4 <HAL_GPIO_DeInit+0x1c0>)
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	4941      	ldr	r1, [pc, #260]	@ (8001ea4 <HAL_GPIO_DeInit+0x1c0>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001da2:	4b40      	ldr	r3, [pc, #256]	@ (8001ea4 <HAL_GPIO_DeInit+0x1c0>)
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	493e      	ldr	r1, [pc, #248]	@ (8001ea4 <HAL_GPIO_DeInit+0x1c0>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001db0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea4 <HAL_GPIO_DeInit+0x1c0>)
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	493a      	ldr	r1, [pc, #232]	@ (8001ea4 <HAL_GPIO_DeInit+0x1c0>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001dce:	4a2f      	ldr	r2, [pc, #188]	@ (8001e8c <HAL_GPIO_DeInit+0x1a8>)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	482b      	ldr	r0, [pc, #172]	@ (8001e8c <HAL_GPIO_DeInit+0x1a8>)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	400a      	ands	r2, r1
 8001de6:	3302      	adds	r3, #2
 8001de8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2103      	movs	r1, #3
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	08d2      	lsrs	r2, r2, #3
 8001e20:	4019      	ands	r1, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2103      	movs	r1, #3
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	2101      	movs	r1, #1
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	401a      	ands	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2103      	movs	r1, #3
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	401a      	ands	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f47f af3b 	bne.w	8001cf4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	48000400 	.word	0x48000400
 8001e94:	48000800 	.word	0x48000800
 8001e98:	48000c00 	.word	0x48000c00
 8001e9c:	48001000 	.word	0x48001000
 8001ea0:	48001400 	.word	0x48001400
 8001ea4:	40010400 	.word	0x40010400

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eee:	4a05      	ldr	r2, [pc, #20]	@ (8001f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fb2c 	bl	8000554 <HAL_GPIO_EXTI_Callback>
  }
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40010400 	.word	0x40010400

08001f08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d141      	bne.n	8001f9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f16:	4b4b      	ldr	r3, [pc, #300]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f22:	d131      	bne.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f24:	4b47      	ldr	r3, [pc, #284]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f2a:	4a46      	ldr	r2, [pc, #280]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f34:	4b43      	ldr	r3, [pc, #268]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f3c:	4a41      	ldr	r2, [pc, #260]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f44:	4b40      	ldr	r3, [pc, #256]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2232      	movs	r2, #50	@ 0x32
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800204c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	0c9b      	lsrs	r3, r3, #18
 8001f56:	3301      	adds	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f5a:	e002      	b.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f62:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f6e:	d102      	bne.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f2      	bne.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f76:	4b33      	ldr	r3, [pc, #204]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f82:	d158      	bne.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e057      	b.n	8002038 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f88:	4b2e      	ldr	r3, [pc, #184]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f98:	e04d      	b.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fa0:	d141      	bne.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fa2:	4b28      	ldr	r3, [pc, #160]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fae:	d131      	bne.n	8002014 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb0:	4b24      	ldr	r3, [pc, #144]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fb6:	4a23      	ldr	r2, [pc, #140]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc0:	4b20      	ldr	r3, [pc, #128]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2232      	movs	r2, #50	@ 0x32
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	4a1c      	ldr	r2, [pc, #112]	@ (800204c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	0c9b      	lsrs	r3, r3, #18
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe6:	e002      	b.n	8001fee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ffa:	d102      	bne.n	8002002 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f2      	bne.n	8001fe8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800200a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800200e:	d112      	bne.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e011      	b.n	8002038 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002014:	4b0b      	ldr	r3, [pc, #44]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800201a:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002020:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002024:	e007      	b.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800202e:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002034:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40007000 	.word	0x40007000
 8002048:	20004008 	.word	0x20004008
 800204c:	431bde83 	.word	0x431bde83

08002050 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800205a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800205e:	6093      	str	r3, [r2, #8]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40007000 	.word	0x40007000

08002070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e2fe      	b.n	8002680 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d075      	beq.n	800217a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208e:	4b97      	ldr	r3, [pc, #604]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002098:	4b94      	ldr	r3, [pc, #592]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	d102      	bne.n	80020ae <HAL_RCC_OscConfig+0x3e>
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_OscConfig+0x44>
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d10b      	bne.n	80020cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	4b8d      	ldr	r3, [pc, #564]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d05b      	beq.n	8002178 <HAL_RCC_OscConfig+0x108>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d157      	bne.n	8002178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e2d9      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d4:	d106      	bne.n	80020e4 <HAL_RCC_OscConfig+0x74>
 80020d6:	4b85      	ldr	r3, [pc, #532]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a84      	ldr	r2, [pc, #528]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e01d      	b.n	8002120 <HAL_RCC_OscConfig+0xb0>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x98>
 80020ee:	4b7f      	ldr	r3, [pc, #508]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a7e      	ldr	r2, [pc, #504]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80020f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b7c      	ldr	r3, [pc, #496]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7b      	ldr	r2, [pc, #492]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0xb0>
 8002108:	4b78      	ldr	r3, [pc, #480]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a77      	ldr	r2, [pc, #476]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 800210e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b75      	ldr	r3, [pc, #468]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a74      	ldr	r2, [pc, #464]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800211e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe ff22 	bl	8000f70 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7fe ff1e 	bl	8000f70 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	@ 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e29e      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002142:	4b6a      	ldr	r3, [pc, #424]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0xc0>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe ff0e 	bl	8000f70 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7fe ff0a 	bl	8000f70 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	@ 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e28a      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800216a:	4b60      	ldr	r3, [pc, #384]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0xe8>
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d075      	beq.n	8002272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002186:	4b59      	ldr	r3, [pc, #356]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002190:	4b56      	ldr	r3, [pc, #344]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	2b0c      	cmp	r3, #12
 800219e:	d102      	bne.n	80021a6 <HAL_RCC_OscConfig+0x136>
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d002      	beq.n	80021ac <HAL_RCC_OscConfig+0x13c>
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d11f      	bne.n	80021ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ac:	4b4f      	ldr	r3, [pc, #316]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_OscConfig+0x154>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e25d      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c4:	4b49      	ldr	r3, [pc, #292]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	061b      	lsls	r3, r3, #24
 80021d2:	4946      	ldr	r1, [pc, #280]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021d8:	4b45      	ldr	r3, [pc, #276]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fe7b 	bl	8000ed8 <HAL_InitTick>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d043      	beq.n	8002270 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e249      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d023      	beq.n	800223c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f4:	4b3d      	ldr	r3, [pc, #244]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a3c      	ldr	r2, [pc, #240]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7fe feb6 	bl	8000f70 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002208:	f7fe feb2 	bl	8000f70 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e232      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800221a:	4b34      	ldr	r3, [pc, #208]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4b31      	ldr	r3, [pc, #196]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	061b      	lsls	r3, r3, #24
 8002234:	492d      	ldr	r1, [pc, #180]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
 800223a:	e01a      	b.n	8002272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223c:	4b2b      	ldr	r3, [pc, #172]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a2a      	ldr	r2, [pc, #168]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 8002242:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe fe92 	bl	8000f70 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002250:	f7fe fe8e 	bl	8000f70 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e20e      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002262:	4b22      	ldr	r3, [pc, #136]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x1e0>
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002270:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d041      	beq.n	8002302 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01c      	beq.n	80022c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002286:	4b19      	ldr	r3, [pc, #100]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 8002288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800228c:	4a17      	ldr	r2, [pc, #92]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7fe fe6b 	bl	8000f70 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229e:	f7fe fe67 	bl	8000f70 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e1e7      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b0:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80022b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0ef      	beq.n	800229e <HAL_RCC_OscConfig+0x22e>
 80022be:	e020      	b.n	8002302 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c0:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c6:	4a09      	ldr	r2, [pc, #36]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7fe fe4e 	bl	8000f70 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022d6:	e00d      	b.n	80022f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7fe fe4a 	bl	8000f70 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d906      	bls.n	80022f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1ca      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	2000400c 	.word	0x2000400c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f4:	4b8c      	ldr	r3, [pc, #560]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 80022f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1ea      	bne.n	80022d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80a6 	beq.w	800245c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002310:	2300      	movs	r3, #0
 8002312:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002314:	4b84      	ldr	r3, [pc, #528]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x2b4>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x2b6>
 8002324:	2300      	movs	r3, #0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00d      	beq.n	8002346 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4b7f      	ldr	r3, [pc, #508]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	4a7e      	ldr	r2, [pc, #504]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002334:	6593      	str	r3, [r2, #88]	@ 0x58
 8002336:	4b7c      	ldr	r3, [pc, #496]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002342:	2301      	movs	r3, #1
 8002344:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002346:	4b79      	ldr	r3, [pc, #484]	@ (800252c <HAL_RCC_OscConfig+0x4bc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d118      	bne.n	8002384 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002352:	4b76      	ldr	r3, [pc, #472]	@ (800252c <HAL_RCC_OscConfig+0x4bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a75      	ldr	r2, [pc, #468]	@ (800252c <HAL_RCC_OscConfig+0x4bc>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235e:	f7fe fe07 	bl	8000f70 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002366:	f7fe fe03 	bl	8000f70 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e183      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002378:	4b6c      	ldr	r3, [pc, #432]	@ (800252c <HAL_RCC_OscConfig+0x4bc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d108      	bne.n	800239e <HAL_RCC_OscConfig+0x32e>
 800238c:	4b66      	ldr	r3, [pc, #408]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002392:	4a65      	ldr	r2, [pc, #404]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800239c:	e024      	b.n	80023e8 <HAL_RCC_OscConfig+0x378>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d110      	bne.n	80023c8 <HAL_RCC_OscConfig+0x358>
 80023a6:	4b60      	ldr	r3, [pc, #384]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ac:	4a5e      	ldr	r2, [pc, #376]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023bc:	4a5a      	ldr	r2, [pc, #360]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023c6:	e00f      	b.n	80023e8 <HAL_RCC_OscConfig+0x378>
 80023c8:	4b57      	ldr	r3, [pc, #348]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ce:	4a56      	ldr	r2, [pc, #344]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023d8:	4b53      	ldr	r3, [pc, #332]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023de:	4a52      	ldr	r2, [pc, #328]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 80023e0:	f023 0304 	bic.w	r3, r3, #4
 80023e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d016      	beq.n	800241e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7fe fdbe 	bl	8000f70 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe fdba 	bl	8000f70 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e138      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240e:	4b46      	ldr	r3, [pc, #280]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ed      	beq.n	80023f8 <HAL_RCC_OscConfig+0x388>
 800241c:	e015      	b.n	800244a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241e:	f7fe fda7 	bl	8000f70 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fda3 	bl	8000f70 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e121      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800243c:	4b3a      	ldr	r3, [pc, #232]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1ed      	bne.n	8002426 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800244a:	7ffb      	ldrb	r3, [r7, #31]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d105      	bne.n	800245c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002450:	4b35      	ldr	r3, [pc, #212]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002454:	4a34      	ldr	r2, [pc, #208]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 8002456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800245a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d03c      	beq.n	80024e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01c      	beq.n	80024aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002470:	4b2d      	ldr	r3, [pc, #180]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 8002472:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002476:	4a2c      	ldr	r2, [pc, #176]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7fe fd76 	bl	8000f70 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002488:	f7fe fd72 	bl	8000f70 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e0f2      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800249a:	4b23      	ldr	r3, [pc, #140]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 800249c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0ef      	beq.n	8002488 <HAL_RCC_OscConfig+0x418>
 80024a8:	e01b      	b.n	80024e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 80024ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ba:	f7fe fd59 	bl	8000f70 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c2:	f7fe fd55 	bl	8000f70 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0d5      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024d4:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 80024d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ef      	bne.n	80024c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80c9 	beq.w	800267e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b0c      	cmp	r3, #12
 80024f6:	f000 8083 	beq.w	8002600 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d15e      	bne.n	80025c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a08      	ldr	r2, [pc, #32]	@ (8002528 <HAL_RCC_OscConfig+0x4b8>)
 8002508:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800250c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7fe fd2f 	bl	8000f70 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002514:	e00c      	b.n	8002530 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe fd2b 	bl	8000f70 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d905      	bls.n	8002530 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0ab      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002530:	4b55      	ldr	r3, [pc, #340]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ec      	bne.n	8002516 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253c:	4b52      	ldr	r3, [pc, #328]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	4b52      	ldr	r3, [pc, #328]	@ (800268c <HAL_RCC_OscConfig+0x61c>)
 8002542:	4013      	ands	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6a11      	ldr	r1, [r2, #32]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800254c:	3a01      	subs	r2, #1
 800254e:	0112      	lsls	r2, r2, #4
 8002550:	4311      	orrs	r1, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002556:	0212      	lsls	r2, r2, #8
 8002558:	4311      	orrs	r1, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800255e:	0852      	lsrs	r2, r2, #1
 8002560:	3a01      	subs	r2, #1
 8002562:	0552      	lsls	r2, r2, #21
 8002564:	4311      	orrs	r1, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800256a:	0852      	lsrs	r2, r2, #1
 800256c:	3a01      	subs	r2, #1
 800256e:	0652      	lsls	r2, r2, #25
 8002570:	4311      	orrs	r1, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002576:	06d2      	lsls	r2, r2, #27
 8002578:	430a      	orrs	r2, r1
 800257a:	4943      	ldr	r1, [pc, #268]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 800257c:	4313      	orrs	r3, r2
 800257e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002580:	4b41      	ldr	r3, [pc, #260]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a40      	ldr	r2, [pc, #256]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 8002586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800258a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800258c:	4b3e      	ldr	r3, [pc, #248]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4a3d      	ldr	r2, [pc, #244]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 8002592:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002596:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fcea 	bl	8000f70 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe fce6 	bl	8000f70 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e066      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b2:	4b35      	ldr	r3, [pc, #212]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x530>
 80025be:	e05e      	b.n	800267e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c0:	4b31      	ldr	r3, [pc, #196]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a30      	ldr	r2, [pc, #192]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 80025c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe fcd0 	bl	8000f70 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fe fccc 	bl	8000f70 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e04c      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e6:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80025f2:	4b25      	ldr	r3, [pc, #148]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	4924      	ldr	r1, [pc, #144]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 80025f8:	4b25      	ldr	r3, [pc, #148]	@ (8002690 <HAL_RCC_OscConfig+0x620>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	60cb      	str	r3, [r1, #12]
 80025fe:	e03e      	b.n	800267e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e039      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800260c:	4b1e      	ldr	r3, [pc, #120]	@ (8002688 <HAL_RCC_OscConfig+0x618>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	429a      	cmp	r2, r3
 800261e:	d12c      	bne.n	800267a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	3b01      	subs	r3, #1
 800262c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d123      	bne.n	800267a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d11b      	bne.n	800267a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d113      	bne.n	800267a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	3b01      	subs	r3, #1
 8002660:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d109      	bne.n	800267a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	3b01      	subs	r3, #1
 8002674:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000
 800268c:	019f800c 	.word	0x019f800c
 8002690:	feeefffc 	.word	0xfeeefffc

08002694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e11e      	b.n	80028ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026ac:	4b91      	ldr	r3, [pc, #580]	@ (80028f4 <HAL_RCC_ClockConfig+0x260>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d910      	bls.n	80026dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b8e      	ldr	r3, [pc, #568]	@ (80028f4 <HAL_RCC_ClockConfig+0x260>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 020f 	bic.w	r2, r3, #15
 80026c2:	498c      	ldr	r1, [pc, #560]	@ (80028f4 <HAL_RCC_ClockConfig+0x260>)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b8a      	ldr	r3, [pc, #552]	@ (80028f4 <HAL_RCC_ClockConfig+0x260>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e106      	b.n	80028ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d073      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d129      	bne.n	8002744 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f0:	4b81      	ldr	r3, [pc, #516]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0f4      	b.n	80028ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002700:	f000 f966 	bl	80029d0 <RCC_GetSysClockFreqFromPLLSource>
 8002704:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4a7c      	ldr	r2, [pc, #496]	@ (80028fc <HAL_RCC_ClockConfig+0x268>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d93f      	bls.n	800278e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800270e:	4b7a      	ldr	r3, [pc, #488]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002722:	2b00      	cmp	r3, #0
 8002724:	d033      	beq.n	800278e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800272a:	2b00      	cmp	r3, #0
 800272c:	d12f      	bne.n	800278e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800272e:	4b72      	ldr	r3, [pc, #456]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002736:	4a70      	ldr	r2, [pc, #448]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 8002738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800273c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	e024      	b.n	800278e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d107      	bne.n	800275c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800274c:	4b6a      	ldr	r3, [pc, #424]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d109      	bne.n	800276c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0c6      	b.n	80028ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800275c:	4b66      	ldr	r3, [pc, #408]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0be      	b.n	80028ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800276c:	f000 f8ce 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8002770:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4a61      	ldr	r2, [pc, #388]	@ (80028fc <HAL_RCC_ClockConfig+0x268>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d909      	bls.n	800278e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800277a:	4b5f      	ldr	r3, [pc, #380]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002782:	4a5d      	ldr	r2, [pc, #372]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 8002784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002788:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800278a:	2380      	movs	r3, #128	@ 0x80
 800278c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800278e:	4b5a      	ldr	r3, [pc, #360]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4957      	ldr	r1, [pc, #348]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a0:	f7fe fbe6 	bl	8000f70 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7fe fbe2 	bl	8000f70 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e095      	b.n	80028ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	4b4e      	ldr	r3, [pc, #312]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 020c 	and.w	r2, r3, #12
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d1eb      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d023      	beq.n	8002824 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e8:	4b43      	ldr	r3, [pc, #268]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a42      	ldr	r2, [pc, #264]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 80027ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002800:	4b3d      	ldr	r3, [pc, #244]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002808:	4a3b      	ldr	r2, [pc, #236]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 800280a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800280e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002810:	4b39      	ldr	r3, [pc, #228]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4936      	ldr	r1, [pc, #216]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
 8002822:	e008      	b.n	8002836 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b80      	cmp	r3, #128	@ 0x80
 8002828:	d105      	bne.n	8002836 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800282a:	4b33      	ldr	r3, [pc, #204]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	4a32      	ldr	r2, [pc, #200]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 8002830:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002834:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002836:	4b2f      	ldr	r3, [pc, #188]	@ (80028f4 <HAL_RCC_ClockConfig+0x260>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d21d      	bcs.n	8002880 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002844:	4b2b      	ldr	r3, [pc, #172]	@ (80028f4 <HAL_RCC_ClockConfig+0x260>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 020f 	bic.w	r2, r3, #15
 800284c:	4929      	ldr	r1, [pc, #164]	@ (80028f4 <HAL_RCC_ClockConfig+0x260>)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002854:	f7fe fb8c 	bl	8000f70 <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285c:	f7fe fb88 	bl	8000f70 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e03b      	b.n	80028ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b20      	ldr	r3, [pc, #128]	@ (80028f4 <HAL_RCC_ClockConfig+0x260>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d1ed      	bne.n	800285c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800288c:	4b1a      	ldr	r3, [pc, #104]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4917      	ldr	r1, [pc, #92]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028aa:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	490f      	ldr	r1, [pc, #60]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028be:	f000 f825 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4b0c      	ldr	r3, [pc, #48]	@ (80028f8 <HAL_RCC_ClockConfig+0x264>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	490c      	ldr	r1, [pc, #48]	@ (8002900 <HAL_RCC_ClockConfig+0x26c>)
 80028d0:	5ccb      	ldrb	r3, [r1, r3]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	fa22 f303 	lsr.w	r3, r2, r3
 80028da:	4a0a      	ldr	r2, [pc, #40]	@ (8002904 <HAL_RCC_ClockConfig+0x270>)
 80028dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028de:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <HAL_RCC_ClockConfig+0x274>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe faf8 	bl	8000ed8 <HAL_InitTick>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40022000 	.word	0x40022000
 80028f8:	40021000 	.word	0x40021000
 80028fc:	04c4b400 	.word	0x04c4b400
 8002900:	08004f24 	.word	0x08004f24
 8002904:	20004008 	.word	0x20004008
 8002908:	2000400c 	.word	0x2000400c

0800290c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002912:	4b2c      	ldr	r3, [pc, #176]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b04      	cmp	r3, #4
 800291c:	d102      	bne.n	8002924 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800291e:	4b2a      	ldr	r3, [pc, #168]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	e047      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002924:	4b27      	ldr	r3, [pc, #156]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b08      	cmp	r3, #8
 800292e:	d102      	bne.n	8002936 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002930:	4b26      	ldr	r3, [pc, #152]	@ (80029cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	e03e      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002936:	4b23      	ldr	r3, [pc, #140]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d136      	bne.n	80029b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002942:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800294c:	4b1d      	ldr	r3, [pc, #116]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	3301      	adds	r3, #1
 8002958:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d10c      	bne.n	800297a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002960:	4a1a      	ldr	r2, [pc, #104]	@ (80029cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	4a16      	ldr	r2, [pc, #88]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800296a:	68d2      	ldr	r2, [r2, #12]
 800296c:	0a12      	lsrs	r2, r2, #8
 800296e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	617b      	str	r3, [r7, #20]
      break;
 8002978:	e00c      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800297a:	4a13      	ldr	r2, [pc, #76]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	4a10      	ldr	r2, [pc, #64]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002984:	68d2      	ldr	r2, [r2, #12]
 8002986:	0a12      	lsrs	r2, r2, #8
 8002988:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]
      break;
 8002992:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002994:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	0e5b      	lsrs	r3, r3, #25
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	3301      	adds	r3, #1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	e001      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029b4:	693b      	ldr	r3, [r7, #16]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	00f42400 	.word	0x00f42400
 80029cc:	016e3600 	.word	0x016e3600

080029d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3301      	adds	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d10c      	bne.n	8002a0e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029f4:	4a17      	ldr	r2, [pc, #92]	@ (8002a54 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	4a14      	ldr	r2, [pc, #80]	@ (8002a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029fe:	68d2      	ldr	r2, [r2, #12]
 8002a00:	0a12      	lsrs	r2, r2, #8
 8002a02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	617b      	str	r3, [r7, #20]
    break;
 8002a0c:	e00c      	b.n	8002a28 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a0e:	4a12      	ldr	r2, [pc, #72]	@ (8002a58 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	4a0e      	ldr	r2, [pc, #56]	@ (8002a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a18:	68d2      	ldr	r2, [r2, #12]
 8002a1a:	0a12      	lsrs	r2, r2, #8
 8002a1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
    break;
 8002a26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a28:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0e5b      	lsrs	r3, r3, #25
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a42:	687b      	ldr	r3, [r7, #4]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	40021000 	.word	0x40021000
 8002a54:	016e3600 	.word	0x016e3600
 8002a58:	00f42400 	.word	0x00f42400

08002a5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e09d      	b.n	8002baa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d108      	bne.n	8002a88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a7e:	d009      	beq.n	8002a94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
 8002a86:	e005      	b.n	8002a94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fd ff76 	bl	80009a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002aca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ad4:	d902      	bls.n	8002adc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	e002      	b.n	8002ae2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002aea:	d007      	beq.n	8002afc <HAL_SPI_Init+0xa0>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002af4:	d002      	beq.n	8002afc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3e:	ea42 0103 	orr.w	r1, r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b46:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	0c1b      	lsrs	r3, r3, #16
 8002b58:	f003 0204 	and.w	r2, r3, #4
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002b78:	ea42 0103 	orr.w	r1, r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e01a      	b.n	8002bfa <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bda:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd ffa3 	bl	8000b28 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c18:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d00c      	beq.n	8002c40 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c2c:	d106      	bne.n	8002c3c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d102      	bne.n	8002c3c <HAL_SPI_TransmitReceive_DMA+0x38>
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d001      	beq.n	8002c40 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e158      	b.n	8002ef2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e14d      	b.n	8002ef2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_SPI_TransmitReceive_DMA+0x60>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e146      	b.n	8002ef2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d003      	beq.n	8002c80 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2205      	movs	r2, #5
 8002c7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	887a      	ldrh	r2, [r7, #2]
 8002c96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	887a      	ldrh	r2, [r7, #2]
 8002ca2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	887a      	ldrh	r2, [r7, #2]
 8002caa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8002cc8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cd2:	d908      	bls.n	8002ce6 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	e06f      	b.n	8002dc6 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cf4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d00:	d126      	bne.n	8002d50 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d1c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	085b      	lsrs	r3, r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d2c:	e010      	b.n	8002d50 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d3c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	085b      	lsrs	r3, r3, #1
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d5a:	d134      	bne.n	8002dc6 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d6a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d8a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002d9e:	e012      	b.n	8002dc6 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dae:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d108      	bne.n	8002de4 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd6:	4a49      	ldr	r2, [pc, #292]	@ (8002efc <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8002dd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dde:	4a48      	ldr	r2, [pc, #288]	@ (8002f00 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8002de0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002de2:	e007      	b.n	8002df4 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	4a46      	ldr	r2, [pc, #280]	@ (8002f04 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df0:	4a45      	ldr	r2, [pc, #276]	@ (8002f08 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8002df2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df8:	4a44      	ldr	r2, [pc, #272]	@ (8002f0c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8002dfa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	2200      	movs	r2, #0
 8002e02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	4619      	mov	r1, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e1c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002e1e:	f7fe fb55 	bl	80014cc <HAL_DMA_Start_IT>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00b      	beq.n	8002e40 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2c:	f043 0210 	orr.w	r2, r3, #16
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e058      	b.n	8002ef2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e64:	2200      	movs	r2, #0
 8002e66:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e78:	4619      	mov	r1, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	330c      	adds	r3, #12
 8002e80:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e88:	f7fe fb20 	bl	80014cc <HAL_DMA_Start_IT>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e96:	f043 0210 	orr.w	r2, r3, #16
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e023      	b.n	8002ef2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb4:	2b40      	cmp	r3, #64	@ 0x40
 8002eb6:	d007      	beq.n	8002ec8 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ec6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0220 	orr.w	r2, r2, #32
 8002ede:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0202 	orr.w	r2, r2, #2
 8002eee:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	08003561 	.word	0x08003561
 8002f00:	08003429 	.word	0x08003429
 8002f04:	0800357d 	.word	0x0800357d
 8002f08:	080034d1 	.word	0x080034d1
 8002f0c:	08003599 	.word	0x08003599

08002f10 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	@ 0x28
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002f1c:	4b88      	ldr	r3, [pc, #544]	@ (8003140 <HAL_SPI_Abort+0x230>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a88      	ldr	r2, [pc, #544]	@ (8003144 <HAL_SPI_Abort+0x234>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0a5b      	lsrs	r3, r3, #9
 8002f28:	2264      	movs	r2, #100	@ 0x64
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0220 	bic.w	r2, r2, #32
 8002f42:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4e:	2b80      	cmp	r3, #128	@ 0x80
 8002f50:	d117      	bne.n	8002f82 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a7c      	ldr	r2, [pc, #496]	@ (8003148 <HAL_SPI_Abort+0x238>)
 8002f56:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8002f6a:	e008      	b.n	8002f7e <HAL_SPI_Abort+0x6e>
      }
      count--;
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b07      	cmp	r3, #7
 8002f7c:	d1ec      	bne.n	8002f58 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8c:	2b40      	cmp	r3, #64	@ 0x40
 8002f8e:	d117      	bne.n	8002fc0 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a6e      	ldr	r2, [pc, #440]	@ (800314c <HAL_SPI_Abort+0x23c>)
 8002f94:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d106      	bne.n	8002faa <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8002fa8:	e008      	b.n	8002fbc <HAL_SPI_Abort+0xac>
      }
      count--;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b07      	cmp	r3, #7
 8002fba:	d1ec      	bne.n	8002f96 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d141      	bne.n	8003052 <HAL_SPI_Abort+0x142>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d03d      	beq.n	8003052 <HAL_SPI_Abort+0x142>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fda:	2200      	movs	r2, #0
 8002fdc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe faed 	bl	80015c2 <HAL_DMA_Abort>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2240      	movs	r2, #64	@ 0x40
 8002ff2:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0202 	bic.w	r2, r2, #2
 8003002:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003004:	f7fd ffb4 	bl	8000f70 <HAL_GetTick>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	2164      	movs	r1, #100	@ 0x64
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fc6e 	bl	80038f0 <SPI_EndRxTxTransaction>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <HAL_SPI_Abort+0x110>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2240      	movs	r2, #64	@ 0x40
 800301e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800302e:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003030:	f7fd ff9e 	bl	8000f70 <HAL_GetTick>
 8003034:	4603      	mov	r3, r0
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2364      	movs	r3, #100	@ 0x64
 800303a:	2200      	movs	r2, #0
 800303c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fb67 	bl	8003714 <SPI_WaitFifoStateUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_SPI_Abort+0x142>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2240      	movs	r2, #64	@ 0x40
 8003050:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d143      	bne.n	80030e8 <HAL_SPI_Abort+0x1d8>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	2b00      	cmp	r3, #0
 8003066:	d03f      	beq.n	80030e8 <HAL_SPI_Abort+0x1d8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306c:	2200      	movs	r2, #0
 800306e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe faa4 	bl	80015c2 <HAL_DMA_Abort>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_SPI_Abort+0x176>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2240      	movs	r2, #64	@ 0x40
 8003084:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003094:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003096:	f7fd ff6b 	bl	8000f70 <HAL_GetTick>
 800309a:	4603      	mov	r3, r0
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	2364      	movs	r3, #100	@ 0x64
 80030a0:	2200      	movs	r2, #0
 80030a2:	2180      	movs	r1, #128	@ 0x80
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 faad 	bl	8003604 <SPI_WaitFlagStateUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <HAL_SPI_Abort+0x1a6>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2240      	movs	r2, #64	@ 0x40
 80030b4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 80030b6:	f7fd ff5b 	bl	8000f70 <HAL_GetTick>
 80030ba:	4603      	mov	r3, r0
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	2364      	movs	r3, #100	@ 0x64
 80030c0:	2200      	movs	r2, #0
 80030c2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fb24 	bl	8003714 <SPI_WaitFifoStateUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_Abort+0x1c8>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2240      	movs	r2, #64	@ 0x40
 80030d6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fa:	2b40      	cmp	r3, #64	@ 0x40
 80030fc:	d102      	bne.n	8003104 <HAL_SPI_Abort+0x1f4>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e002      	b.n	800310a <HAL_SPI_Abort+0x1fa>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return errorcode;
 8003136:	7ffb      	ldrb	r3, [r7, #31]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3720      	adds	r7, #32
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20004008 	.word	0x20004008
 8003144:	057619f1 	.word	0x057619f1
 8003148:	08003a3d 	.word	0x08003a3d
 800314c:	0800397d 	.word	0x0800397d

08003150 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00f      	beq.n	8003184 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe fa2a 	bl	80015c2 <HAL_DMA_Abort>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003178:	f043 0210 	orr.w	r2, r3, #16
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00f      	beq.n	80031ac <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe fa16 	bl	80015c2 <HAL_DMA_Abort>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a0:	f043 0210 	orr.w	r2, r3, #16
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0203 	bic.w	r2, r2, #3
 80031ba:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10f      	bne.n	8003214 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	099b      	lsrs	r3, r3, #6
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d004      	beq.n	8003214 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
    return;
 8003212:	e0d7      	b.n	80033c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_SPI_IRQHandler+0x66>
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	09db      	lsrs	r3, r3, #7
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4798      	blx	r3
    return;
 8003234:	e0c6      	b.n	80033c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10c      	bne.n	800325c <HAL_SPI_IRQHandler+0x8c>
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80b4 	beq.w	80033c4 <HAL_SPI_IRQHandler+0x1f4>
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80ad 	beq.w	80033c4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	099b      	lsrs	r3, r3, #6
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d023      	beq.n	80032be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b03      	cmp	r3, #3
 8003280:	d011      	beq.n	80032a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003286:	f043 0204 	orr.w	r2, r3, #4
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	e00b      	b.n	80032be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]
        return;
 80032bc:	e082      	b.n	80033c4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d014      	beq.n	80032f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ce:	f043 0201 	orr.w	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00c      	beq.n	800331a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003304:	f043 0208 	orr.w	r2, r3, #8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331e:	2b00      	cmp	r3, #0
 8003320:	d04f      	beq.n	80033c2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003330:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <HAL_SPI_IRQHandler+0x17e>
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d034      	beq.n	80033b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0203 	bic.w	r2, r2, #3
 800335c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	2b00      	cmp	r3, #0
 8003364:	d011      	beq.n	800338a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336a:	4a18      	ldr	r2, [pc, #96]	@ (80033cc <HAL_SPI_IRQHandler+0x1fc>)
 800336c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe f97e 	bl	8001674 <HAL_DMA_Abort_IT>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003382:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003396:	4a0d      	ldr	r2, [pc, #52]	@ (80033cc <HAL_SPI_IRQHandler+0x1fc>)
 8003398:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe f968 	bl	8001674 <HAL_DMA_Abort_IT>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80033b6:	e003      	b.n	80033c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7fd faab 	bl	8000914 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80033be:	e000      	b.n	80033c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80033c0:	bf00      	nop
    return;
 80033c2:	bf00      	nop
  }
}
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	080035d9 	.word	0x080035d9

080033d0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800341a:	b2db      	uxtb	r3, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003434:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003436:	f7fd fd9b 	bl	8000f70 <HAL_GetTick>
 800343a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b20      	cmp	r3, #32
 8003448:	d03c      	beq.n	80034c4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0220 	bic.w	r2, r2, #32
 8003458:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10d      	bne.n	800347e <SPI_DMAReceiveCplt+0x56>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800346a:	d108      	bne.n	800347e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0203 	bic.w	r2, r2, #3
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	e007      	b.n	800348e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	2164      	movs	r1, #100	@ 0x64
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f9d4 	bl	8003840 <SPI_EndRxTransaction>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7fd fa29 	bl	8000914 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80034c2:	e002      	b.n	80034ca <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f7ff ff83 	bl	80033d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034dc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034de:	f7fd fd47 	bl	8000f70 <HAL_GetTick>
 80034e2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d030      	beq.n	8003554 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0220 	bic.w	r2, r2, #32
 8003500:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	2164      	movs	r1, #100	@ 0x64
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f9f2 	bl	80038f0 <SPI_EndRxTxTransaction>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0203 	bic.w	r2, r2, #3
 800352c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f7fd f9e1 	bl	8000914 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003552:	e002      	b.n	800355a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7fd f9cb 	bl	80008f0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7ff ff38 	bl	80033e4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003588:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff ff34 	bl	80033f8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0203 	bic.w	r2, r2, #3
 80035b4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ba:	f043 0210 	orr.w	r2, r3, #16
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f7fd f9a2 	bl	8000914 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7fd f98d 	bl	8000914 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003614:	f7fd fcac 	bl	8000f70 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	4413      	add	r3, r2
 8003622:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003624:	f7fd fca4 	bl	8000f70 <HAL_GetTick>
 8003628:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800362a:	4b39      	ldr	r3, [pc, #228]	@ (8003710 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	015b      	lsls	r3, r3, #5
 8003630:	0d1b      	lsrs	r3, r3, #20
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	fb02 f303 	mul.w	r3, r2, r3
 8003638:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800363a:	e054      	b.n	80036e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003642:	d050      	beq.n	80036e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003644:	f7fd fc94 	bl	8000f70 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	429a      	cmp	r2, r3
 8003652:	d902      	bls.n	800365a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d13d      	bne.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003672:	d111      	bne.n	8003698 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800367c:	d004      	beq.n	8003688 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003686:	d107      	bne.n	8003698 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003696:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036a0:	d10f      	bne.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e017      	b.n	8003706 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4013      	ands	r3, r2
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	bf0c      	ite	eq
 80036f6:	2301      	moveq	r3, #1
 80036f8:	2300      	movne	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	429a      	cmp	r2, r3
 8003702:	d19b      	bne.n	800363c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20004008 	.word	0x20004008

08003714 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	@ 0x28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003726:	f7fd fc23 	bl	8000f70 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	4413      	add	r3, r2
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003736:	f7fd fc1b 	bl	8000f70 <HAL_GetTick>
 800373a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003744:	4b3d      	ldr	r3, [pc, #244]	@ (800383c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	00da      	lsls	r2, r3, #3
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	0d1b      	lsrs	r3, r3, #20
 8003754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800375c:	e060      	b.n	8003820 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003764:	d107      	bne.n	8003776 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003774:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d050      	beq.n	8003820 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800377e:	f7fd fbf7 	bl	8000f70 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378a:	429a      	cmp	r2, r3
 800378c:	d902      	bls.n	8003794 <SPI_WaitFifoStateUntilTimeout+0x80>
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	2b00      	cmp	r3, #0
 8003792:	d13d      	bne.n	8003810 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037ac:	d111      	bne.n	80037d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037b6:	d004      	beq.n	80037c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c0:	d107      	bne.n	80037d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037da:	d10f      	bne.n	80037fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e010      	b.n	8003832 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	3b01      	subs	r3, #1
 800381e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	d196      	bne.n	800375e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3728      	adds	r7, #40	@ 0x28
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20004008 	.word	0x20004008

08003840 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003854:	d111      	bne.n	800387a <SPI_EndRxTransaction+0x3a>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800385e:	d004      	beq.n	800386a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003868:	d107      	bne.n	800387a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003878:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2200      	movs	r2, #0
 8003882:	2180      	movs	r1, #128	@ 0x80
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7ff febd 	bl	8003604 <SPI_WaitFlagStateUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003894:	f043 0220 	orr.w	r2, r3, #32
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e023      	b.n	80038e8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038a8:	d11d      	bne.n	80038e6 <SPI_EndRxTransaction+0xa6>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038b2:	d004      	beq.n	80038be <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038bc:	d113      	bne.n	80038e6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff ff22 	bl	8003714 <SPI_WaitFifoStateUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e000      	b.n	80038e8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2200      	movs	r2, #0
 8003904:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff ff03 	bl	8003714 <SPI_WaitFifoStateUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003918:	f043 0220 	orr.w	r2, r3, #32
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e027      	b.n	8003974 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2200      	movs	r2, #0
 800392c:	2180      	movs	r1, #128	@ 0x80
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff fe68 	bl	8003604 <SPI_WaitFlagStateUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e014      	b.n	8003974 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2200      	movs	r2, #0
 8003952:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7ff fedc 	bl	8003714 <SPI_WaitFifoStateUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e000      	b.n	8003974 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af02      	add	r7, sp, #8
 8003982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003992:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003994:	4b27      	ldr	r3, [pc, #156]	@ (8003a34 <SPI_AbortRx_ISR+0xb8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a27      	ldr	r2, [pc, #156]	@ (8003a38 <SPI_AbortRx_ISR+0xbc>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0a5b      	lsrs	r3, r3, #9
 80039a0:	2264      	movs	r2, #100	@ 0x64
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039b6:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 80039ca:	e009      	b.n	80039e0 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039dc:	2b40      	cmp	r3, #64	@ 0x40
 80039de:	d0eb      	beq.n	80039b8 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80039e0:	f7fd fac6 	bl	8000f70 <HAL_GetTick>
 80039e4:	4603      	mov	r3, r0
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	2364      	movs	r3, #100	@ 0x64
 80039ea:	2200      	movs	r2, #0
 80039ec:	2180      	movs	r1, #128	@ 0x80
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff fe08 	bl	8003604 <SPI_WaitFlagStateUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2240      	movs	r2, #64	@ 0x40
 80039fe:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003a00:	f7fd fab6 	bl	8000f70 <HAL_GetTick>
 8003a04:	4603      	mov	r3, r0
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	2364      	movs	r3, #100	@ 0x64
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff fe7f 	bl	8003714 <SPI_WaitFifoStateUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2240      	movs	r2, #64	@ 0x40
 8003a20:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2207      	movs	r2, #7
 8003a26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20004008 	.word	0x20004008
 8003a38:	057619f1 	.word	0x057619f1

08003a3c <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003a44:	4b4c      	ldr	r3, [pc, #304]	@ (8003b78 <SPI_AbortTx_ISR+0x13c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a4c      	ldr	r2, [pc, #304]	@ (8003b7c <SPI_AbortTx_ISR+0x140>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	0a5b      	lsrs	r3, r3, #9
 8003a50:	2264      	movs	r2, #100	@ 0x64
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a66:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8003a7a:	e009      	b.n	8003a90 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8c:	2b80      	cmp	r3, #128	@ 0x80
 8003a8e:	d0eb      	beq.n	8003a68 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003a90:	f7fd fa6e 	bl	8000f70 <HAL_GetTick>
 8003a94:	4603      	mov	r3, r0
 8003a96:	461a      	mov	r2, r3
 8003a98:	2164      	movs	r1, #100	@ 0x64
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ff28 	bl	80038f0 <SPI_EndRxTxTransaction>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2240      	movs	r2, #64	@ 0x40
 8003aaa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aba:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003abc:	f7fd fa58 	bl	8000f70 <HAL_GetTick>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	2364      	movs	r3, #100	@ 0x64
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fe21 	bl	8003714 <SPI_WaitFifoStateUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2240      	movs	r2, #64	@ 0x40
 8003adc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae8:	2b40      	cmp	r3, #64	@ 0x40
 8003aea:	d13c      	bne.n	8003b66 <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003afa:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003b0e:	e009      	b.n	8003b24 <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b20:	2b40      	cmp	r3, #64	@ 0x40
 8003b22:	d0eb      	beq.n	8003afc <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003b24:	f7fd fa24 	bl	8000f70 <HAL_GetTick>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2364      	movs	r3, #100	@ 0x64
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2180      	movs	r1, #128	@ 0x80
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff fd66 	bl	8003604 <SPI_WaitFlagStateUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2240      	movs	r2, #64	@ 0x40
 8003b42:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003b44:	f7fd fa14 	bl	8000f70 <HAL_GetTick>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2364      	movs	r3, #100	@ 0x64
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff fddd 	bl	8003714 <SPI_WaitFifoStateUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2240      	movs	r2, #64	@ 0x40
 8003b64:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2207      	movs	r2, #7
 8003b6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20004008 	.word	0x20004008
 8003b7c:	057619f1 	.word	0x057619f1

08003b80 <rand>:
 8003b80:	4b16      	ldr	r3, [pc, #88]	@ (8003bdc <rand+0x5c>)
 8003b82:	b510      	push	{r4, lr}
 8003b84:	681c      	ldr	r4, [r3, #0]
 8003b86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003b88:	b9b3      	cbnz	r3, 8003bb8 <rand+0x38>
 8003b8a:	2018      	movs	r0, #24
 8003b8c:	f000 fa42 	bl	8004014 <malloc>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6320      	str	r0, [r4, #48]	@ 0x30
 8003b94:	b920      	cbnz	r0, 8003ba0 <rand+0x20>
 8003b96:	4b12      	ldr	r3, [pc, #72]	@ (8003be0 <rand+0x60>)
 8003b98:	4812      	ldr	r0, [pc, #72]	@ (8003be4 <rand+0x64>)
 8003b9a:	2152      	movs	r1, #82	@ 0x52
 8003b9c:	f000 f9d2 	bl	8003f44 <__assert_func>
 8003ba0:	4911      	ldr	r1, [pc, #68]	@ (8003be8 <rand+0x68>)
 8003ba2:	4b12      	ldr	r3, [pc, #72]	@ (8003bec <rand+0x6c>)
 8003ba4:	e9c0 1300 	strd	r1, r3, [r0]
 8003ba8:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <rand+0x70>)
 8003baa:	6083      	str	r3, [r0, #8]
 8003bac:	230b      	movs	r3, #11
 8003bae:	8183      	strh	r3, [r0, #12]
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003bb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003bba:	480e      	ldr	r0, [pc, #56]	@ (8003bf4 <rand+0x74>)
 8003bbc:	690b      	ldr	r3, [r1, #16]
 8003bbe:	694c      	ldr	r4, [r1, #20]
 8003bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf8 <rand+0x78>)
 8003bc2:	4358      	muls	r0, r3
 8003bc4:	fb02 0004 	mla	r0, r2, r4, r0
 8003bc8:	fba3 3202 	umull	r3, r2, r3, r2
 8003bcc:	3301      	adds	r3, #1
 8003bce:	eb40 0002 	adc.w	r0, r0, r2
 8003bd2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003bd6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003bda:	bd10      	pop	{r4, pc}
 8003bdc:	20004020 	.word	0x20004020
 8003be0:	08004f34 	.word	0x08004f34
 8003be4:	08004f4b 	.word	0x08004f4b
 8003be8:	abcd330e 	.word	0xabcd330e
 8003bec:	e66d1234 	.word	0xe66d1234
 8003bf0:	0005deec 	.word	0x0005deec
 8003bf4:	5851f42d 	.word	0x5851f42d
 8003bf8:	4c957f2d 	.word	0x4c957f2d

08003bfc <std>:
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	b510      	push	{r4, lr}
 8003c00:	4604      	mov	r4, r0
 8003c02:	e9c0 3300 	strd	r3, r3, [r0]
 8003c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c0a:	6083      	str	r3, [r0, #8]
 8003c0c:	8181      	strh	r1, [r0, #12]
 8003c0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c10:	81c2      	strh	r2, [r0, #14]
 8003c12:	6183      	str	r3, [r0, #24]
 8003c14:	4619      	mov	r1, r3
 8003c16:	2208      	movs	r2, #8
 8003c18:	305c      	adds	r0, #92	@ 0x5c
 8003c1a:	f000 f916 	bl	8003e4a <memset>
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <std+0x58>)
 8003c20:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c22:	4b0d      	ldr	r3, [pc, #52]	@ (8003c58 <std+0x5c>)
 8003c24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <std+0x60>)
 8003c28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c60 <std+0x64>)
 8003c2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c64 <std+0x68>)
 8003c30:	6224      	str	r4, [r4, #32]
 8003c32:	429c      	cmp	r4, r3
 8003c34:	d006      	beq.n	8003c44 <std+0x48>
 8003c36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c3a:	4294      	cmp	r4, r2
 8003c3c:	d002      	beq.n	8003c44 <std+0x48>
 8003c3e:	33d0      	adds	r3, #208	@ 0xd0
 8003c40:	429c      	cmp	r4, r3
 8003c42:	d105      	bne.n	8003c50 <std+0x54>
 8003c44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c4c:	f000 b976 	b.w	8003f3c <__retarget_lock_init_recursive>
 8003c50:	bd10      	pop	{r4, pc}
 8003c52:	bf00      	nop
 8003c54:	08003dc5 	.word	0x08003dc5
 8003c58:	08003de7 	.word	0x08003de7
 8003c5c:	08003e1f 	.word	0x08003e1f
 8003c60:	08003e43 	.word	0x08003e43
 8003c64:	20008204 	.word	0x20008204

08003c68 <stdio_exit_handler>:
 8003c68:	4a02      	ldr	r2, [pc, #8]	@ (8003c74 <stdio_exit_handler+0xc>)
 8003c6a:	4903      	ldr	r1, [pc, #12]	@ (8003c78 <stdio_exit_handler+0x10>)
 8003c6c:	4803      	ldr	r0, [pc, #12]	@ (8003c7c <stdio_exit_handler+0x14>)
 8003c6e:	f000 b869 	b.w	8003d44 <_fwalk_sglue>
 8003c72:	bf00      	nop
 8003c74:	20004014 	.word	0x20004014
 8003c78:	08004851 	.word	0x08004851
 8003c7c:	20004024 	.word	0x20004024

08003c80 <cleanup_stdio>:
 8003c80:	6841      	ldr	r1, [r0, #4]
 8003c82:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb4 <cleanup_stdio+0x34>)
 8003c84:	4299      	cmp	r1, r3
 8003c86:	b510      	push	{r4, lr}
 8003c88:	4604      	mov	r4, r0
 8003c8a:	d001      	beq.n	8003c90 <cleanup_stdio+0x10>
 8003c8c:	f000 fde0 	bl	8004850 <_fflush_r>
 8003c90:	68a1      	ldr	r1, [r4, #8]
 8003c92:	4b09      	ldr	r3, [pc, #36]	@ (8003cb8 <cleanup_stdio+0x38>)
 8003c94:	4299      	cmp	r1, r3
 8003c96:	d002      	beq.n	8003c9e <cleanup_stdio+0x1e>
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f000 fdd9 	bl	8004850 <_fflush_r>
 8003c9e:	68e1      	ldr	r1, [r4, #12]
 8003ca0:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <cleanup_stdio+0x3c>)
 8003ca2:	4299      	cmp	r1, r3
 8003ca4:	d004      	beq.n	8003cb0 <cleanup_stdio+0x30>
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cac:	f000 bdd0 	b.w	8004850 <_fflush_r>
 8003cb0:	bd10      	pop	{r4, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20008204 	.word	0x20008204
 8003cb8:	2000826c 	.word	0x2000826c
 8003cbc:	200082d4 	.word	0x200082d4

08003cc0 <global_stdio_init.part.0>:
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf0 <global_stdio_init.part.0+0x30>)
 8003cc4:	4c0b      	ldr	r4, [pc, #44]	@ (8003cf4 <global_stdio_init.part.0+0x34>)
 8003cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf8 <global_stdio_init.part.0+0x38>)
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	4620      	mov	r0, r4
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2104      	movs	r1, #4
 8003cd0:	f7ff ff94 	bl	8003bfc <std>
 8003cd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003cd8:	2201      	movs	r2, #1
 8003cda:	2109      	movs	r1, #9
 8003cdc:	f7ff ff8e 	bl	8003bfc <std>
 8003ce0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cea:	2112      	movs	r1, #18
 8003cec:	f7ff bf86 	b.w	8003bfc <std>
 8003cf0:	2000833c 	.word	0x2000833c
 8003cf4:	20008204 	.word	0x20008204
 8003cf8:	08003c69 	.word	0x08003c69

08003cfc <__sfp_lock_acquire>:
 8003cfc:	4801      	ldr	r0, [pc, #4]	@ (8003d04 <__sfp_lock_acquire+0x8>)
 8003cfe:	f000 b91e 	b.w	8003f3e <__retarget_lock_acquire_recursive>
 8003d02:	bf00      	nop
 8003d04:	20008345 	.word	0x20008345

08003d08 <__sfp_lock_release>:
 8003d08:	4801      	ldr	r0, [pc, #4]	@ (8003d10 <__sfp_lock_release+0x8>)
 8003d0a:	f000 b919 	b.w	8003f40 <__retarget_lock_release_recursive>
 8003d0e:	bf00      	nop
 8003d10:	20008345 	.word	0x20008345

08003d14 <__sinit>:
 8003d14:	b510      	push	{r4, lr}
 8003d16:	4604      	mov	r4, r0
 8003d18:	f7ff fff0 	bl	8003cfc <__sfp_lock_acquire>
 8003d1c:	6a23      	ldr	r3, [r4, #32]
 8003d1e:	b11b      	cbz	r3, 8003d28 <__sinit+0x14>
 8003d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d24:	f7ff bff0 	b.w	8003d08 <__sfp_lock_release>
 8003d28:	4b04      	ldr	r3, [pc, #16]	@ (8003d3c <__sinit+0x28>)
 8003d2a:	6223      	str	r3, [r4, #32]
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <__sinit+0x2c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f5      	bne.n	8003d20 <__sinit+0xc>
 8003d34:	f7ff ffc4 	bl	8003cc0 <global_stdio_init.part.0>
 8003d38:	e7f2      	b.n	8003d20 <__sinit+0xc>
 8003d3a:	bf00      	nop
 8003d3c:	08003c81 	.word	0x08003c81
 8003d40:	2000833c 	.word	0x2000833c

08003d44 <_fwalk_sglue>:
 8003d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d48:	4607      	mov	r7, r0
 8003d4a:	4688      	mov	r8, r1
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	2600      	movs	r6, #0
 8003d50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d54:	f1b9 0901 	subs.w	r9, r9, #1
 8003d58:	d505      	bpl.n	8003d66 <_fwalk_sglue+0x22>
 8003d5a:	6824      	ldr	r4, [r4, #0]
 8003d5c:	2c00      	cmp	r4, #0
 8003d5e:	d1f7      	bne.n	8003d50 <_fwalk_sglue+0xc>
 8003d60:	4630      	mov	r0, r6
 8003d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d66:	89ab      	ldrh	r3, [r5, #12]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d907      	bls.n	8003d7c <_fwalk_sglue+0x38>
 8003d6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d70:	3301      	adds	r3, #1
 8003d72:	d003      	beq.n	8003d7c <_fwalk_sglue+0x38>
 8003d74:	4629      	mov	r1, r5
 8003d76:	4638      	mov	r0, r7
 8003d78:	47c0      	blx	r8
 8003d7a:	4306      	orrs	r6, r0
 8003d7c:	3568      	adds	r5, #104	@ 0x68
 8003d7e:	e7e9      	b.n	8003d54 <_fwalk_sglue+0x10>

08003d80 <siprintf>:
 8003d80:	b40e      	push	{r1, r2, r3}
 8003d82:	b510      	push	{r4, lr}
 8003d84:	b09d      	sub	sp, #116	@ 0x74
 8003d86:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003d88:	9002      	str	r0, [sp, #8]
 8003d8a:	9006      	str	r0, [sp, #24]
 8003d8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003d90:	480a      	ldr	r0, [pc, #40]	@ (8003dbc <siprintf+0x3c>)
 8003d92:	9107      	str	r1, [sp, #28]
 8003d94:	9104      	str	r1, [sp, #16]
 8003d96:	490a      	ldr	r1, [pc, #40]	@ (8003dc0 <siprintf+0x40>)
 8003d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d9c:	9105      	str	r1, [sp, #20]
 8003d9e:	2400      	movs	r4, #0
 8003da0:	a902      	add	r1, sp, #8
 8003da2:	6800      	ldr	r0, [r0, #0]
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003da8:	f000 fa46 	bl	8004238 <_svfiprintf_r>
 8003dac:	9b02      	ldr	r3, [sp, #8]
 8003dae:	701c      	strb	r4, [r3, #0]
 8003db0:	b01d      	add	sp, #116	@ 0x74
 8003db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003db6:	b003      	add	sp, #12
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20004020 	.word	0x20004020
 8003dc0:	ffff0208 	.word	0xffff0208

08003dc4 <__sread>:
 8003dc4:	b510      	push	{r4, lr}
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dcc:	f000 f868 	bl	8003ea0 <_read_r>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	bfab      	itete	ge
 8003dd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8003dd8:	181b      	addge	r3, r3, r0
 8003dda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003dde:	bfac      	ite	ge
 8003de0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003de2:	81a3      	strhlt	r3, [r4, #12]
 8003de4:	bd10      	pop	{r4, pc}

08003de6 <__swrite>:
 8003de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dea:	461f      	mov	r7, r3
 8003dec:	898b      	ldrh	r3, [r1, #12]
 8003dee:	05db      	lsls	r3, r3, #23
 8003df0:	4605      	mov	r5, r0
 8003df2:	460c      	mov	r4, r1
 8003df4:	4616      	mov	r6, r2
 8003df6:	d505      	bpl.n	8003e04 <__swrite+0x1e>
 8003df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f000 f83c 	bl	8003e7c <_lseek_r>
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e0e:	81a3      	strh	r3, [r4, #12]
 8003e10:	4632      	mov	r2, r6
 8003e12:	463b      	mov	r3, r7
 8003e14:	4628      	mov	r0, r5
 8003e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e1a:	f000 b853 	b.w	8003ec4 <_write_r>

08003e1e <__sseek>:
 8003e1e:	b510      	push	{r4, lr}
 8003e20:	460c      	mov	r4, r1
 8003e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e26:	f000 f829 	bl	8003e7c <_lseek_r>
 8003e2a:	1c43      	adds	r3, r0, #1
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	bf15      	itete	ne
 8003e30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e3a:	81a3      	strheq	r3, [r4, #12]
 8003e3c:	bf18      	it	ne
 8003e3e:	81a3      	strhne	r3, [r4, #12]
 8003e40:	bd10      	pop	{r4, pc}

08003e42 <__sclose>:
 8003e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e46:	f000 b809 	b.w	8003e5c <_close_r>

08003e4a <memset>:
 8003e4a:	4402      	add	r2, r0
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d100      	bne.n	8003e54 <memset+0xa>
 8003e52:	4770      	bx	lr
 8003e54:	f803 1b01 	strb.w	r1, [r3], #1
 8003e58:	e7f9      	b.n	8003e4e <memset+0x4>
	...

08003e5c <_close_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4d06      	ldr	r5, [pc, #24]	@ (8003e78 <_close_r+0x1c>)
 8003e60:	2300      	movs	r3, #0
 8003e62:	4604      	mov	r4, r0
 8003e64:	4608      	mov	r0, r1
 8003e66:	602b      	str	r3, [r5, #0]
 8003e68:	f7fc ff3b 	bl	8000ce2 <_close>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d102      	bne.n	8003e76 <_close_r+0x1a>
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	b103      	cbz	r3, 8003e76 <_close_r+0x1a>
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	20008340 	.word	0x20008340

08003e7c <_lseek_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4d07      	ldr	r5, [pc, #28]	@ (8003e9c <_lseek_r+0x20>)
 8003e80:	4604      	mov	r4, r0
 8003e82:	4608      	mov	r0, r1
 8003e84:	4611      	mov	r1, r2
 8003e86:	2200      	movs	r2, #0
 8003e88:	602a      	str	r2, [r5, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f7fc ff50 	bl	8000d30 <_lseek>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d102      	bne.n	8003e9a <_lseek_r+0x1e>
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	b103      	cbz	r3, 8003e9a <_lseek_r+0x1e>
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
 8003e9c:	20008340 	.word	0x20008340

08003ea0 <_read_r>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	4d07      	ldr	r5, [pc, #28]	@ (8003ec0 <_read_r+0x20>)
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	4608      	mov	r0, r1
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	2200      	movs	r2, #0
 8003eac:	602a      	str	r2, [r5, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f7fc fede 	bl	8000c70 <_read>
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	d102      	bne.n	8003ebe <_read_r+0x1e>
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	b103      	cbz	r3, 8003ebe <_read_r+0x1e>
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	bd38      	pop	{r3, r4, r5, pc}
 8003ec0:	20008340 	.word	0x20008340

08003ec4 <_write_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4d07      	ldr	r5, [pc, #28]	@ (8003ee4 <_write_r+0x20>)
 8003ec8:	4604      	mov	r4, r0
 8003eca:	4608      	mov	r0, r1
 8003ecc:	4611      	mov	r1, r2
 8003ece:	2200      	movs	r2, #0
 8003ed0:	602a      	str	r2, [r5, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f7fc fee9 	bl	8000caa <_write>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_write_r+0x1e>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_write_r+0x1e>
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	20008340 	.word	0x20008340

08003ee8 <__errno>:
 8003ee8:	4b01      	ldr	r3, [pc, #4]	@ (8003ef0 <__errno+0x8>)
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20004020 	.word	0x20004020

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8003f2c <__libc_init_array+0x38>)
 8003ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8003f30 <__libc_init_array+0x3c>)
 8003efa:	1b64      	subs	r4, r4, r5
 8003efc:	10a4      	asrs	r4, r4, #2
 8003efe:	2600      	movs	r6, #0
 8003f00:	42a6      	cmp	r6, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	4d0b      	ldr	r5, [pc, #44]	@ (8003f34 <__libc_init_array+0x40>)
 8003f06:	4c0c      	ldr	r4, [pc, #48]	@ (8003f38 <__libc_init_array+0x44>)
 8003f08:	f000 ffee 	bl	8004ee8 <_init>
 8003f0c:	1b64      	subs	r4, r4, r5
 8003f0e:	10a4      	asrs	r4, r4, #2
 8003f10:	2600      	movs	r6, #0
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1c:	4798      	blx	r3
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f26:	4798      	blx	r3
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	0800501c 	.word	0x0800501c
 8003f30:	0800501c 	.word	0x0800501c
 8003f34:	0800501c 	.word	0x0800501c
 8003f38:	08005020 	.word	0x08005020

08003f3c <__retarget_lock_init_recursive>:
 8003f3c:	4770      	bx	lr

08003f3e <__retarget_lock_acquire_recursive>:
 8003f3e:	4770      	bx	lr

08003f40 <__retarget_lock_release_recursive>:
 8003f40:	4770      	bx	lr
	...

08003f44 <__assert_func>:
 8003f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f46:	4614      	mov	r4, r2
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b09      	ldr	r3, [pc, #36]	@ (8003f70 <__assert_func+0x2c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4605      	mov	r5, r0
 8003f50:	68d8      	ldr	r0, [r3, #12]
 8003f52:	b14c      	cbz	r4, 8003f68 <__assert_func+0x24>
 8003f54:	4b07      	ldr	r3, [pc, #28]	@ (8003f74 <__assert_func+0x30>)
 8003f56:	9100      	str	r1, [sp, #0]
 8003f58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f5c:	4906      	ldr	r1, [pc, #24]	@ (8003f78 <__assert_func+0x34>)
 8003f5e:	462b      	mov	r3, r5
 8003f60:	f000 fc9e 	bl	80048a0 <fiprintf>
 8003f64:	f000 fce6 	bl	8004934 <abort>
 8003f68:	4b04      	ldr	r3, [pc, #16]	@ (8003f7c <__assert_func+0x38>)
 8003f6a:	461c      	mov	r4, r3
 8003f6c:	e7f3      	b.n	8003f56 <__assert_func+0x12>
 8003f6e:	bf00      	nop
 8003f70:	20004020 	.word	0x20004020
 8003f74:	08004fa3 	.word	0x08004fa3
 8003f78:	08004fb0 	.word	0x08004fb0
 8003f7c:	08004fde 	.word	0x08004fde

08003f80 <_free_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4605      	mov	r5, r0
 8003f84:	2900      	cmp	r1, #0
 8003f86:	d041      	beq.n	800400c <_free_r+0x8c>
 8003f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f8c:	1f0c      	subs	r4, r1, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bfb8      	it	lt
 8003f92:	18e4      	addlt	r4, r4, r3
 8003f94:	f000 f8e8 	bl	8004168 <__malloc_lock>
 8003f98:	4a1d      	ldr	r2, [pc, #116]	@ (8004010 <_free_r+0x90>)
 8003f9a:	6813      	ldr	r3, [r2, #0]
 8003f9c:	b933      	cbnz	r3, 8003fac <_free_r+0x2c>
 8003f9e:	6063      	str	r3, [r4, #4]
 8003fa0:	6014      	str	r4, [r2, #0]
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fa8:	f000 b8e4 	b.w	8004174 <__malloc_unlock>
 8003fac:	42a3      	cmp	r3, r4
 8003fae:	d908      	bls.n	8003fc2 <_free_r+0x42>
 8003fb0:	6820      	ldr	r0, [r4, #0]
 8003fb2:	1821      	adds	r1, r4, r0
 8003fb4:	428b      	cmp	r3, r1
 8003fb6:	bf01      	itttt	eq
 8003fb8:	6819      	ldreq	r1, [r3, #0]
 8003fba:	685b      	ldreq	r3, [r3, #4]
 8003fbc:	1809      	addeq	r1, r1, r0
 8003fbe:	6021      	streq	r1, [r4, #0]
 8003fc0:	e7ed      	b.n	8003f9e <_free_r+0x1e>
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	b10b      	cbz	r3, 8003fcc <_free_r+0x4c>
 8003fc8:	42a3      	cmp	r3, r4
 8003fca:	d9fa      	bls.n	8003fc2 <_free_r+0x42>
 8003fcc:	6811      	ldr	r1, [r2, #0]
 8003fce:	1850      	adds	r0, r2, r1
 8003fd0:	42a0      	cmp	r0, r4
 8003fd2:	d10b      	bne.n	8003fec <_free_r+0x6c>
 8003fd4:	6820      	ldr	r0, [r4, #0]
 8003fd6:	4401      	add	r1, r0
 8003fd8:	1850      	adds	r0, r2, r1
 8003fda:	4283      	cmp	r3, r0
 8003fdc:	6011      	str	r1, [r2, #0]
 8003fde:	d1e0      	bne.n	8003fa2 <_free_r+0x22>
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	6053      	str	r3, [r2, #4]
 8003fe6:	4408      	add	r0, r1
 8003fe8:	6010      	str	r0, [r2, #0]
 8003fea:	e7da      	b.n	8003fa2 <_free_r+0x22>
 8003fec:	d902      	bls.n	8003ff4 <_free_r+0x74>
 8003fee:	230c      	movs	r3, #12
 8003ff0:	602b      	str	r3, [r5, #0]
 8003ff2:	e7d6      	b.n	8003fa2 <_free_r+0x22>
 8003ff4:	6820      	ldr	r0, [r4, #0]
 8003ff6:	1821      	adds	r1, r4, r0
 8003ff8:	428b      	cmp	r3, r1
 8003ffa:	bf04      	itt	eq
 8003ffc:	6819      	ldreq	r1, [r3, #0]
 8003ffe:	685b      	ldreq	r3, [r3, #4]
 8004000:	6063      	str	r3, [r4, #4]
 8004002:	bf04      	itt	eq
 8004004:	1809      	addeq	r1, r1, r0
 8004006:	6021      	streq	r1, [r4, #0]
 8004008:	6054      	str	r4, [r2, #4]
 800400a:	e7ca      	b.n	8003fa2 <_free_r+0x22>
 800400c:	bd38      	pop	{r3, r4, r5, pc}
 800400e:	bf00      	nop
 8004010:	2000834c 	.word	0x2000834c

08004014 <malloc>:
 8004014:	4b02      	ldr	r3, [pc, #8]	@ (8004020 <malloc+0xc>)
 8004016:	4601      	mov	r1, r0
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	f000 b825 	b.w	8004068 <_malloc_r>
 800401e:	bf00      	nop
 8004020:	20004020 	.word	0x20004020

08004024 <sbrk_aligned>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	4e0f      	ldr	r6, [pc, #60]	@ (8004064 <sbrk_aligned+0x40>)
 8004028:	460c      	mov	r4, r1
 800402a:	6831      	ldr	r1, [r6, #0]
 800402c:	4605      	mov	r5, r0
 800402e:	b911      	cbnz	r1, 8004036 <sbrk_aligned+0x12>
 8004030:	f000 fc62 	bl	80048f8 <_sbrk_r>
 8004034:	6030      	str	r0, [r6, #0]
 8004036:	4621      	mov	r1, r4
 8004038:	4628      	mov	r0, r5
 800403a:	f000 fc5d 	bl	80048f8 <_sbrk_r>
 800403e:	1c43      	adds	r3, r0, #1
 8004040:	d103      	bne.n	800404a <sbrk_aligned+0x26>
 8004042:	f04f 34ff 	mov.w	r4, #4294967295
 8004046:	4620      	mov	r0, r4
 8004048:	bd70      	pop	{r4, r5, r6, pc}
 800404a:	1cc4      	adds	r4, r0, #3
 800404c:	f024 0403 	bic.w	r4, r4, #3
 8004050:	42a0      	cmp	r0, r4
 8004052:	d0f8      	beq.n	8004046 <sbrk_aligned+0x22>
 8004054:	1a21      	subs	r1, r4, r0
 8004056:	4628      	mov	r0, r5
 8004058:	f000 fc4e 	bl	80048f8 <_sbrk_r>
 800405c:	3001      	adds	r0, #1
 800405e:	d1f2      	bne.n	8004046 <sbrk_aligned+0x22>
 8004060:	e7ef      	b.n	8004042 <sbrk_aligned+0x1e>
 8004062:	bf00      	nop
 8004064:	20008348 	.word	0x20008348

08004068 <_malloc_r>:
 8004068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800406c:	1ccd      	adds	r5, r1, #3
 800406e:	f025 0503 	bic.w	r5, r5, #3
 8004072:	3508      	adds	r5, #8
 8004074:	2d0c      	cmp	r5, #12
 8004076:	bf38      	it	cc
 8004078:	250c      	movcc	r5, #12
 800407a:	2d00      	cmp	r5, #0
 800407c:	4606      	mov	r6, r0
 800407e:	db01      	blt.n	8004084 <_malloc_r+0x1c>
 8004080:	42a9      	cmp	r1, r5
 8004082:	d904      	bls.n	800408e <_malloc_r+0x26>
 8004084:	230c      	movs	r3, #12
 8004086:	6033      	str	r3, [r6, #0]
 8004088:	2000      	movs	r0, #0
 800408a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800408e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004164 <_malloc_r+0xfc>
 8004092:	f000 f869 	bl	8004168 <__malloc_lock>
 8004096:	f8d8 3000 	ldr.w	r3, [r8]
 800409a:	461c      	mov	r4, r3
 800409c:	bb44      	cbnz	r4, 80040f0 <_malloc_r+0x88>
 800409e:	4629      	mov	r1, r5
 80040a0:	4630      	mov	r0, r6
 80040a2:	f7ff ffbf 	bl	8004024 <sbrk_aligned>
 80040a6:	1c43      	adds	r3, r0, #1
 80040a8:	4604      	mov	r4, r0
 80040aa:	d158      	bne.n	800415e <_malloc_r+0xf6>
 80040ac:	f8d8 4000 	ldr.w	r4, [r8]
 80040b0:	4627      	mov	r7, r4
 80040b2:	2f00      	cmp	r7, #0
 80040b4:	d143      	bne.n	800413e <_malloc_r+0xd6>
 80040b6:	2c00      	cmp	r4, #0
 80040b8:	d04b      	beq.n	8004152 <_malloc_r+0xea>
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	4639      	mov	r1, r7
 80040be:	4630      	mov	r0, r6
 80040c0:	eb04 0903 	add.w	r9, r4, r3
 80040c4:	f000 fc18 	bl	80048f8 <_sbrk_r>
 80040c8:	4581      	cmp	r9, r0
 80040ca:	d142      	bne.n	8004152 <_malloc_r+0xea>
 80040cc:	6821      	ldr	r1, [r4, #0]
 80040ce:	1a6d      	subs	r5, r5, r1
 80040d0:	4629      	mov	r1, r5
 80040d2:	4630      	mov	r0, r6
 80040d4:	f7ff ffa6 	bl	8004024 <sbrk_aligned>
 80040d8:	3001      	adds	r0, #1
 80040da:	d03a      	beq.n	8004152 <_malloc_r+0xea>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	442b      	add	r3, r5
 80040e0:	6023      	str	r3, [r4, #0]
 80040e2:	f8d8 3000 	ldr.w	r3, [r8]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	bb62      	cbnz	r2, 8004144 <_malloc_r+0xdc>
 80040ea:	f8c8 7000 	str.w	r7, [r8]
 80040ee:	e00f      	b.n	8004110 <_malloc_r+0xa8>
 80040f0:	6822      	ldr	r2, [r4, #0]
 80040f2:	1b52      	subs	r2, r2, r5
 80040f4:	d420      	bmi.n	8004138 <_malloc_r+0xd0>
 80040f6:	2a0b      	cmp	r2, #11
 80040f8:	d917      	bls.n	800412a <_malloc_r+0xc2>
 80040fa:	1961      	adds	r1, r4, r5
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	6025      	str	r5, [r4, #0]
 8004100:	bf18      	it	ne
 8004102:	6059      	strne	r1, [r3, #4]
 8004104:	6863      	ldr	r3, [r4, #4]
 8004106:	bf08      	it	eq
 8004108:	f8c8 1000 	streq.w	r1, [r8]
 800410c:	5162      	str	r2, [r4, r5]
 800410e:	604b      	str	r3, [r1, #4]
 8004110:	4630      	mov	r0, r6
 8004112:	f000 f82f 	bl	8004174 <__malloc_unlock>
 8004116:	f104 000b 	add.w	r0, r4, #11
 800411a:	1d23      	adds	r3, r4, #4
 800411c:	f020 0007 	bic.w	r0, r0, #7
 8004120:	1ac2      	subs	r2, r0, r3
 8004122:	bf1c      	itt	ne
 8004124:	1a1b      	subne	r3, r3, r0
 8004126:	50a3      	strne	r3, [r4, r2]
 8004128:	e7af      	b.n	800408a <_malloc_r+0x22>
 800412a:	6862      	ldr	r2, [r4, #4]
 800412c:	42a3      	cmp	r3, r4
 800412e:	bf0c      	ite	eq
 8004130:	f8c8 2000 	streq.w	r2, [r8]
 8004134:	605a      	strne	r2, [r3, #4]
 8004136:	e7eb      	b.n	8004110 <_malloc_r+0xa8>
 8004138:	4623      	mov	r3, r4
 800413a:	6864      	ldr	r4, [r4, #4]
 800413c:	e7ae      	b.n	800409c <_malloc_r+0x34>
 800413e:	463c      	mov	r4, r7
 8004140:	687f      	ldr	r7, [r7, #4]
 8004142:	e7b6      	b.n	80040b2 <_malloc_r+0x4a>
 8004144:	461a      	mov	r2, r3
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	42a3      	cmp	r3, r4
 800414a:	d1fb      	bne.n	8004144 <_malloc_r+0xdc>
 800414c:	2300      	movs	r3, #0
 800414e:	6053      	str	r3, [r2, #4]
 8004150:	e7de      	b.n	8004110 <_malloc_r+0xa8>
 8004152:	230c      	movs	r3, #12
 8004154:	6033      	str	r3, [r6, #0]
 8004156:	4630      	mov	r0, r6
 8004158:	f000 f80c 	bl	8004174 <__malloc_unlock>
 800415c:	e794      	b.n	8004088 <_malloc_r+0x20>
 800415e:	6005      	str	r5, [r0, #0]
 8004160:	e7d6      	b.n	8004110 <_malloc_r+0xa8>
 8004162:	bf00      	nop
 8004164:	2000834c 	.word	0x2000834c

08004168 <__malloc_lock>:
 8004168:	4801      	ldr	r0, [pc, #4]	@ (8004170 <__malloc_lock+0x8>)
 800416a:	f7ff bee8 	b.w	8003f3e <__retarget_lock_acquire_recursive>
 800416e:	bf00      	nop
 8004170:	20008344 	.word	0x20008344

08004174 <__malloc_unlock>:
 8004174:	4801      	ldr	r0, [pc, #4]	@ (800417c <__malloc_unlock+0x8>)
 8004176:	f7ff bee3 	b.w	8003f40 <__retarget_lock_release_recursive>
 800417a:	bf00      	nop
 800417c:	20008344 	.word	0x20008344

08004180 <__ssputs_r>:
 8004180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004184:	688e      	ldr	r6, [r1, #8]
 8004186:	461f      	mov	r7, r3
 8004188:	42be      	cmp	r6, r7
 800418a:	680b      	ldr	r3, [r1, #0]
 800418c:	4682      	mov	sl, r0
 800418e:	460c      	mov	r4, r1
 8004190:	4690      	mov	r8, r2
 8004192:	d82d      	bhi.n	80041f0 <__ssputs_r+0x70>
 8004194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004198:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800419c:	d026      	beq.n	80041ec <__ssputs_r+0x6c>
 800419e:	6965      	ldr	r5, [r4, #20]
 80041a0:	6909      	ldr	r1, [r1, #16]
 80041a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041a6:	eba3 0901 	sub.w	r9, r3, r1
 80041aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041ae:	1c7b      	adds	r3, r7, #1
 80041b0:	444b      	add	r3, r9
 80041b2:	106d      	asrs	r5, r5, #1
 80041b4:	429d      	cmp	r5, r3
 80041b6:	bf38      	it	cc
 80041b8:	461d      	movcc	r5, r3
 80041ba:	0553      	lsls	r3, r2, #21
 80041bc:	d527      	bpl.n	800420e <__ssputs_r+0x8e>
 80041be:	4629      	mov	r1, r5
 80041c0:	f7ff ff52 	bl	8004068 <_malloc_r>
 80041c4:	4606      	mov	r6, r0
 80041c6:	b360      	cbz	r0, 8004222 <__ssputs_r+0xa2>
 80041c8:	6921      	ldr	r1, [r4, #16]
 80041ca:	464a      	mov	r2, r9
 80041cc:	f000 fba4 	bl	8004918 <memcpy>
 80041d0:	89a3      	ldrh	r3, [r4, #12]
 80041d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80041d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041da:	81a3      	strh	r3, [r4, #12]
 80041dc:	6126      	str	r6, [r4, #16]
 80041de:	6165      	str	r5, [r4, #20]
 80041e0:	444e      	add	r6, r9
 80041e2:	eba5 0509 	sub.w	r5, r5, r9
 80041e6:	6026      	str	r6, [r4, #0]
 80041e8:	60a5      	str	r5, [r4, #8]
 80041ea:	463e      	mov	r6, r7
 80041ec:	42be      	cmp	r6, r7
 80041ee:	d900      	bls.n	80041f2 <__ssputs_r+0x72>
 80041f0:	463e      	mov	r6, r7
 80041f2:	6820      	ldr	r0, [r4, #0]
 80041f4:	4632      	mov	r2, r6
 80041f6:	4641      	mov	r1, r8
 80041f8:	f000 fb64 	bl	80048c4 <memmove>
 80041fc:	68a3      	ldr	r3, [r4, #8]
 80041fe:	1b9b      	subs	r3, r3, r6
 8004200:	60a3      	str	r3, [r4, #8]
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	4433      	add	r3, r6
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	2000      	movs	r0, #0
 800420a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800420e:	462a      	mov	r2, r5
 8004210:	f000 fb97 	bl	8004942 <_realloc_r>
 8004214:	4606      	mov	r6, r0
 8004216:	2800      	cmp	r0, #0
 8004218:	d1e0      	bne.n	80041dc <__ssputs_r+0x5c>
 800421a:	6921      	ldr	r1, [r4, #16]
 800421c:	4650      	mov	r0, sl
 800421e:	f7ff feaf 	bl	8003f80 <_free_r>
 8004222:	230c      	movs	r3, #12
 8004224:	f8ca 3000 	str.w	r3, [sl]
 8004228:	89a3      	ldrh	r3, [r4, #12]
 800422a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800422e:	81a3      	strh	r3, [r4, #12]
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	e7e9      	b.n	800420a <__ssputs_r+0x8a>
	...

08004238 <_svfiprintf_r>:
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	4698      	mov	r8, r3
 800423e:	898b      	ldrh	r3, [r1, #12]
 8004240:	061b      	lsls	r3, r3, #24
 8004242:	b09d      	sub	sp, #116	@ 0x74
 8004244:	4607      	mov	r7, r0
 8004246:	460d      	mov	r5, r1
 8004248:	4614      	mov	r4, r2
 800424a:	d510      	bpl.n	800426e <_svfiprintf_r+0x36>
 800424c:	690b      	ldr	r3, [r1, #16]
 800424e:	b973      	cbnz	r3, 800426e <_svfiprintf_r+0x36>
 8004250:	2140      	movs	r1, #64	@ 0x40
 8004252:	f7ff ff09 	bl	8004068 <_malloc_r>
 8004256:	6028      	str	r0, [r5, #0]
 8004258:	6128      	str	r0, [r5, #16]
 800425a:	b930      	cbnz	r0, 800426a <_svfiprintf_r+0x32>
 800425c:	230c      	movs	r3, #12
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	f04f 30ff 	mov.w	r0, #4294967295
 8004264:	b01d      	add	sp, #116	@ 0x74
 8004266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800426a:	2340      	movs	r3, #64	@ 0x40
 800426c:	616b      	str	r3, [r5, #20]
 800426e:	2300      	movs	r3, #0
 8004270:	9309      	str	r3, [sp, #36]	@ 0x24
 8004272:	2320      	movs	r3, #32
 8004274:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004278:	f8cd 800c 	str.w	r8, [sp, #12]
 800427c:	2330      	movs	r3, #48	@ 0x30
 800427e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800441c <_svfiprintf_r+0x1e4>
 8004282:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004286:	f04f 0901 	mov.w	r9, #1
 800428a:	4623      	mov	r3, r4
 800428c:	469a      	mov	sl, r3
 800428e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004292:	b10a      	cbz	r2, 8004298 <_svfiprintf_r+0x60>
 8004294:	2a25      	cmp	r2, #37	@ 0x25
 8004296:	d1f9      	bne.n	800428c <_svfiprintf_r+0x54>
 8004298:	ebba 0b04 	subs.w	fp, sl, r4
 800429c:	d00b      	beq.n	80042b6 <_svfiprintf_r+0x7e>
 800429e:	465b      	mov	r3, fp
 80042a0:	4622      	mov	r2, r4
 80042a2:	4629      	mov	r1, r5
 80042a4:	4638      	mov	r0, r7
 80042a6:	f7ff ff6b 	bl	8004180 <__ssputs_r>
 80042aa:	3001      	adds	r0, #1
 80042ac:	f000 80a7 	beq.w	80043fe <_svfiprintf_r+0x1c6>
 80042b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042b2:	445a      	add	r2, fp
 80042b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80042b6:	f89a 3000 	ldrb.w	r3, [sl]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 809f 	beq.w	80043fe <_svfiprintf_r+0x1c6>
 80042c0:	2300      	movs	r3, #0
 80042c2:	f04f 32ff 	mov.w	r2, #4294967295
 80042c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ca:	f10a 0a01 	add.w	sl, sl, #1
 80042ce:	9304      	str	r3, [sp, #16]
 80042d0:	9307      	str	r3, [sp, #28]
 80042d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80042d8:	4654      	mov	r4, sl
 80042da:	2205      	movs	r2, #5
 80042dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e0:	484e      	ldr	r0, [pc, #312]	@ (800441c <_svfiprintf_r+0x1e4>)
 80042e2:	f7fb ff9d 	bl	8000220 <memchr>
 80042e6:	9a04      	ldr	r2, [sp, #16]
 80042e8:	b9d8      	cbnz	r0, 8004322 <_svfiprintf_r+0xea>
 80042ea:	06d0      	lsls	r0, r2, #27
 80042ec:	bf44      	itt	mi
 80042ee:	2320      	movmi	r3, #32
 80042f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042f4:	0711      	lsls	r1, r2, #28
 80042f6:	bf44      	itt	mi
 80042f8:	232b      	movmi	r3, #43	@ 0x2b
 80042fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004302:	2b2a      	cmp	r3, #42	@ 0x2a
 8004304:	d015      	beq.n	8004332 <_svfiprintf_r+0xfa>
 8004306:	9a07      	ldr	r2, [sp, #28]
 8004308:	4654      	mov	r4, sl
 800430a:	2000      	movs	r0, #0
 800430c:	f04f 0c0a 	mov.w	ip, #10
 8004310:	4621      	mov	r1, r4
 8004312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004316:	3b30      	subs	r3, #48	@ 0x30
 8004318:	2b09      	cmp	r3, #9
 800431a:	d94b      	bls.n	80043b4 <_svfiprintf_r+0x17c>
 800431c:	b1b0      	cbz	r0, 800434c <_svfiprintf_r+0x114>
 800431e:	9207      	str	r2, [sp, #28]
 8004320:	e014      	b.n	800434c <_svfiprintf_r+0x114>
 8004322:	eba0 0308 	sub.w	r3, r0, r8
 8004326:	fa09 f303 	lsl.w	r3, r9, r3
 800432a:	4313      	orrs	r3, r2
 800432c:	9304      	str	r3, [sp, #16]
 800432e:	46a2      	mov	sl, r4
 8004330:	e7d2      	b.n	80042d8 <_svfiprintf_r+0xa0>
 8004332:	9b03      	ldr	r3, [sp, #12]
 8004334:	1d19      	adds	r1, r3, #4
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	9103      	str	r1, [sp, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	bfbb      	ittet	lt
 800433e:	425b      	neglt	r3, r3
 8004340:	f042 0202 	orrlt.w	r2, r2, #2
 8004344:	9307      	strge	r3, [sp, #28]
 8004346:	9307      	strlt	r3, [sp, #28]
 8004348:	bfb8      	it	lt
 800434a:	9204      	strlt	r2, [sp, #16]
 800434c:	7823      	ldrb	r3, [r4, #0]
 800434e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004350:	d10a      	bne.n	8004368 <_svfiprintf_r+0x130>
 8004352:	7863      	ldrb	r3, [r4, #1]
 8004354:	2b2a      	cmp	r3, #42	@ 0x2a
 8004356:	d132      	bne.n	80043be <_svfiprintf_r+0x186>
 8004358:	9b03      	ldr	r3, [sp, #12]
 800435a:	1d1a      	adds	r2, r3, #4
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	9203      	str	r2, [sp, #12]
 8004360:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004364:	3402      	adds	r4, #2
 8004366:	9305      	str	r3, [sp, #20]
 8004368:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800442c <_svfiprintf_r+0x1f4>
 800436c:	7821      	ldrb	r1, [r4, #0]
 800436e:	2203      	movs	r2, #3
 8004370:	4650      	mov	r0, sl
 8004372:	f7fb ff55 	bl	8000220 <memchr>
 8004376:	b138      	cbz	r0, 8004388 <_svfiprintf_r+0x150>
 8004378:	9b04      	ldr	r3, [sp, #16]
 800437a:	eba0 000a 	sub.w	r0, r0, sl
 800437e:	2240      	movs	r2, #64	@ 0x40
 8004380:	4082      	lsls	r2, r0
 8004382:	4313      	orrs	r3, r2
 8004384:	3401      	adds	r4, #1
 8004386:	9304      	str	r3, [sp, #16]
 8004388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800438c:	4824      	ldr	r0, [pc, #144]	@ (8004420 <_svfiprintf_r+0x1e8>)
 800438e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004392:	2206      	movs	r2, #6
 8004394:	f7fb ff44 	bl	8000220 <memchr>
 8004398:	2800      	cmp	r0, #0
 800439a:	d036      	beq.n	800440a <_svfiprintf_r+0x1d2>
 800439c:	4b21      	ldr	r3, [pc, #132]	@ (8004424 <_svfiprintf_r+0x1ec>)
 800439e:	bb1b      	cbnz	r3, 80043e8 <_svfiprintf_r+0x1b0>
 80043a0:	9b03      	ldr	r3, [sp, #12]
 80043a2:	3307      	adds	r3, #7
 80043a4:	f023 0307 	bic.w	r3, r3, #7
 80043a8:	3308      	adds	r3, #8
 80043aa:	9303      	str	r3, [sp, #12]
 80043ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ae:	4433      	add	r3, r6
 80043b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80043b2:	e76a      	b.n	800428a <_svfiprintf_r+0x52>
 80043b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80043b8:	460c      	mov	r4, r1
 80043ba:	2001      	movs	r0, #1
 80043bc:	e7a8      	b.n	8004310 <_svfiprintf_r+0xd8>
 80043be:	2300      	movs	r3, #0
 80043c0:	3401      	adds	r4, #1
 80043c2:	9305      	str	r3, [sp, #20]
 80043c4:	4619      	mov	r1, r3
 80043c6:	f04f 0c0a 	mov.w	ip, #10
 80043ca:	4620      	mov	r0, r4
 80043cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043d0:	3a30      	subs	r2, #48	@ 0x30
 80043d2:	2a09      	cmp	r2, #9
 80043d4:	d903      	bls.n	80043de <_svfiprintf_r+0x1a6>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0c6      	beq.n	8004368 <_svfiprintf_r+0x130>
 80043da:	9105      	str	r1, [sp, #20]
 80043dc:	e7c4      	b.n	8004368 <_svfiprintf_r+0x130>
 80043de:	fb0c 2101 	mla	r1, ip, r1, r2
 80043e2:	4604      	mov	r4, r0
 80043e4:	2301      	movs	r3, #1
 80043e6:	e7f0      	b.n	80043ca <_svfiprintf_r+0x192>
 80043e8:	ab03      	add	r3, sp, #12
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	462a      	mov	r2, r5
 80043ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <_svfiprintf_r+0x1f0>)
 80043f0:	a904      	add	r1, sp, #16
 80043f2:	4638      	mov	r0, r7
 80043f4:	f3af 8000 	nop.w
 80043f8:	1c42      	adds	r2, r0, #1
 80043fa:	4606      	mov	r6, r0
 80043fc:	d1d6      	bne.n	80043ac <_svfiprintf_r+0x174>
 80043fe:	89ab      	ldrh	r3, [r5, #12]
 8004400:	065b      	lsls	r3, r3, #25
 8004402:	f53f af2d 	bmi.w	8004260 <_svfiprintf_r+0x28>
 8004406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004408:	e72c      	b.n	8004264 <_svfiprintf_r+0x2c>
 800440a:	ab03      	add	r3, sp, #12
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	462a      	mov	r2, r5
 8004410:	4b05      	ldr	r3, [pc, #20]	@ (8004428 <_svfiprintf_r+0x1f0>)
 8004412:	a904      	add	r1, sp, #16
 8004414:	4638      	mov	r0, r7
 8004416:	f000 f879 	bl	800450c <_printf_i>
 800441a:	e7ed      	b.n	80043f8 <_svfiprintf_r+0x1c0>
 800441c:	08004fdf 	.word	0x08004fdf
 8004420:	08004fe9 	.word	0x08004fe9
 8004424:	00000000 	.word	0x00000000
 8004428:	08004181 	.word	0x08004181
 800442c:	08004fe5 	.word	0x08004fe5

08004430 <_printf_common>:
 8004430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004434:	4616      	mov	r6, r2
 8004436:	4698      	mov	r8, r3
 8004438:	688a      	ldr	r2, [r1, #8]
 800443a:	690b      	ldr	r3, [r1, #16]
 800443c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004440:	4293      	cmp	r3, r2
 8004442:	bfb8      	it	lt
 8004444:	4613      	movlt	r3, r2
 8004446:	6033      	str	r3, [r6, #0]
 8004448:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800444c:	4607      	mov	r7, r0
 800444e:	460c      	mov	r4, r1
 8004450:	b10a      	cbz	r2, 8004456 <_printf_common+0x26>
 8004452:	3301      	adds	r3, #1
 8004454:	6033      	str	r3, [r6, #0]
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	0699      	lsls	r1, r3, #26
 800445a:	bf42      	ittt	mi
 800445c:	6833      	ldrmi	r3, [r6, #0]
 800445e:	3302      	addmi	r3, #2
 8004460:	6033      	strmi	r3, [r6, #0]
 8004462:	6825      	ldr	r5, [r4, #0]
 8004464:	f015 0506 	ands.w	r5, r5, #6
 8004468:	d106      	bne.n	8004478 <_printf_common+0x48>
 800446a:	f104 0a19 	add.w	sl, r4, #25
 800446e:	68e3      	ldr	r3, [r4, #12]
 8004470:	6832      	ldr	r2, [r6, #0]
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	42ab      	cmp	r3, r5
 8004476:	dc26      	bgt.n	80044c6 <_printf_common+0x96>
 8004478:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800447c:	6822      	ldr	r2, [r4, #0]
 800447e:	3b00      	subs	r3, #0
 8004480:	bf18      	it	ne
 8004482:	2301      	movne	r3, #1
 8004484:	0692      	lsls	r2, r2, #26
 8004486:	d42b      	bmi.n	80044e0 <_printf_common+0xb0>
 8004488:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800448c:	4641      	mov	r1, r8
 800448e:	4638      	mov	r0, r7
 8004490:	47c8      	blx	r9
 8004492:	3001      	adds	r0, #1
 8004494:	d01e      	beq.n	80044d4 <_printf_common+0xa4>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	6922      	ldr	r2, [r4, #16]
 800449a:	f003 0306 	and.w	r3, r3, #6
 800449e:	2b04      	cmp	r3, #4
 80044a0:	bf02      	ittt	eq
 80044a2:	68e5      	ldreq	r5, [r4, #12]
 80044a4:	6833      	ldreq	r3, [r6, #0]
 80044a6:	1aed      	subeq	r5, r5, r3
 80044a8:	68a3      	ldr	r3, [r4, #8]
 80044aa:	bf0c      	ite	eq
 80044ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044b0:	2500      	movne	r5, #0
 80044b2:	4293      	cmp	r3, r2
 80044b4:	bfc4      	itt	gt
 80044b6:	1a9b      	subgt	r3, r3, r2
 80044b8:	18ed      	addgt	r5, r5, r3
 80044ba:	2600      	movs	r6, #0
 80044bc:	341a      	adds	r4, #26
 80044be:	42b5      	cmp	r5, r6
 80044c0:	d11a      	bne.n	80044f8 <_printf_common+0xc8>
 80044c2:	2000      	movs	r0, #0
 80044c4:	e008      	b.n	80044d8 <_printf_common+0xa8>
 80044c6:	2301      	movs	r3, #1
 80044c8:	4652      	mov	r2, sl
 80044ca:	4641      	mov	r1, r8
 80044cc:	4638      	mov	r0, r7
 80044ce:	47c8      	blx	r9
 80044d0:	3001      	adds	r0, #1
 80044d2:	d103      	bne.n	80044dc <_printf_common+0xac>
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295
 80044d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044dc:	3501      	adds	r5, #1
 80044de:	e7c6      	b.n	800446e <_printf_common+0x3e>
 80044e0:	18e1      	adds	r1, r4, r3
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	2030      	movs	r0, #48	@ 0x30
 80044e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044ea:	4422      	add	r2, r4
 80044ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044f4:	3302      	adds	r3, #2
 80044f6:	e7c7      	b.n	8004488 <_printf_common+0x58>
 80044f8:	2301      	movs	r3, #1
 80044fa:	4622      	mov	r2, r4
 80044fc:	4641      	mov	r1, r8
 80044fe:	4638      	mov	r0, r7
 8004500:	47c8      	blx	r9
 8004502:	3001      	adds	r0, #1
 8004504:	d0e6      	beq.n	80044d4 <_printf_common+0xa4>
 8004506:	3601      	adds	r6, #1
 8004508:	e7d9      	b.n	80044be <_printf_common+0x8e>
	...

0800450c <_printf_i>:
 800450c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004510:	7e0f      	ldrb	r7, [r1, #24]
 8004512:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004514:	2f78      	cmp	r7, #120	@ 0x78
 8004516:	4691      	mov	r9, r2
 8004518:	4680      	mov	r8, r0
 800451a:	460c      	mov	r4, r1
 800451c:	469a      	mov	sl, r3
 800451e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004522:	d807      	bhi.n	8004534 <_printf_i+0x28>
 8004524:	2f62      	cmp	r7, #98	@ 0x62
 8004526:	d80a      	bhi.n	800453e <_printf_i+0x32>
 8004528:	2f00      	cmp	r7, #0
 800452a:	f000 80d1 	beq.w	80046d0 <_printf_i+0x1c4>
 800452e:	2f58      	cmp	r7, #88	@ 0x58
 8004530:	f000 80b8 	beq.w	80046a4 <_printf_i+0x198>
 8004534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004538:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800453c:	e03a      	b.n	80045b4 <_printf_i+0xa8>
 800453e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004542:	2b15      	cmp	r3, #21
 8004544:	d8f6      	bhi.n	8004534 <_printf_i+0x28>
 8004546:	a101      	add	r1, pc, #4	@ (adr r1, 800454c <_printf_i+0x40>)
 8004548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800454c:	080045a5 	.word	0x080045a5
 8004550:	080045b9 	.word	0x080045b9
 8004554:	08004535 	.word	0x08004535
 8004558:	08004535 	.word	0x08004535
 800455c:	08004535 	.word	0x08004535
 8004560:	08004535 	.word	0x08004535
 8004564:	080045b9 	.word	0x080045b9
 8004568:	08004535 	.word	0x08004535
 800456c:	08004535 	.word	0x08004535
 8004570:	08004535 	.word	0x08004535
 8004574:	08004535 	.word	0x08004535
 8004578:	080046b7 	.word	0x080046b7
 800457c:	080045e3 	.word	0x080045e3
 8004580:	08004671 	.word	0x08004671
 8004584:	08004535 	.word	0x08004535
 8004588:	08004535 	.word	0x08004535
 800458c:	080046d9 	.word	0x080046d9
 8004590:	08004535 	.word	0x08004535
 8004594:	080045e3 	.word	0x080045e3
 8004598:	08004535 	.word	0x08004535
 800459c:	08004535 	.word	0x08004535
 80045a0:	08004679 	.word	0x08004679
 80045a4:	6833      	ldr	r3, [r6, #0]
 80045a6:	1d1a      	adds	r2, r3, #4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6032      	str	r2, [r6, #0]
 80045ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045b4:	2301      	movs	r3, #1
 80045b6:	e09c      	b.n	80046f2 <_printf_i+0x1e6>
 80045b8:	6833      	ldr	r3, [r6, #0]
 80045ba:	6820      	ldr	r0, [r4, #0]
 80045bc:	1d19      	adds	r1, r3, #4
 80045be:	6031      	str	r1, [r6, #0]
 80045c0:	0606      	lsls	r6, r0, #24
 80045c2:	d501      	bpl.n	80045c8 <_printf_i+0xbc>
 80045c4:	681d      	ldr	r5, [r3, #0]
 80045c6:	e003      	b.n	80045d0 <_printf_i+0xc4>
 80045c8:	0645      	lsls	r5, r0, #25
 80045ca:	d5fb      	bpl.n	80045c4 <_printf_i+0xb8>
 80045cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045d0:	2d00      	cmp	r5, #0
 80045d2:	da03      	bge.n	80045dc <_printf_i+0xd0>
 80045d4:	232d      	movs	r3, #45	@ 0x2d
 80045d6:	426d      	negs	r5, r5
 80045d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045dc:	4858      	ldr	r0, [pc, #352]	@ (8004740 <_printf_i+0x234>)
 80045de:	230a      	movs	r3, #10
 80045e0:	e011      	b.n	8004606 <_printf_i+0xfa>
 80045e2:	6821      	ldr	r1, [r4, #0]
 80045e4:	6833      	ldr	r3, [r6, #0]
 80045e6:	0608      	lsls	r0, r1, #24
 80045e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80045ec:	d402      	bmi.n	80045f4 <_printf_i+0xe8>
 80045ee:	0649      	lsls	r1, r1, #25
 80045f0:	bf48      	it	mi
 80045f2:	b2ad      	uxthmi	r5, r5
 80045f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80045f6:	4852      	ldr	r0, [pc, #328]	@ (8004740 <_printf_i+0x234>)
 80045f8:	6033      	str	r3, [r6, #0]
 80045fa:	bf14      	ite	ne
 80045fc:	230a      	movne	r3, #10
 80045fe:	2308      	moveq	r3, #8
 8004600:	2100      	movs	r1, #0
 8004602:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004606:	6866      	ldr	r6, [r4, #4]
 8004608:	60a6      	str	r6, [r4, #8]
 800460a:	2e00      	cmp	r6, #0
 800460c:	db05      	blt.n	800461a <_printf_i+0x10e>
 800460e:	6821      	ldr	r1, [r4, #0]
 8004610:	432e      	orrs	r6, r5
 8004612:	f021 0104 	bic.w	r1, r1, #4
 8004616:	6021      	str	r1, [r4, #0]
 8004618:	d04b      	beq.n	80046b2 <_printf_i+0x1a6>
 800461a:	4616      	mov	r6, r2
 800461c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004620:	fb03 5711 	mls	r7, r3, r1, r5
 8004624:	5dc7      	ldrb	r7, [r0, r7]
 8004626:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800462a:	462f      	mov	r7, r5
 800462c:	42bb      	cmp	r3, r7
 800462e:	460d      	mov	r5, r1
 8004630:	d9f4      	bls.n	800461c <_printf_i+0x110>
 8004632:	2b08      	cmp	r3, #8
 8004634:	d10b      	bne.n	800464e <_printf_i+0x142>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	07df      	lsls	r7, r3, #31
 800463a:	d508      	bpl.n	800464e <_printf_i+0x142>
 800463c:	6923      	ldr	r3, [r4, #16]
 800463e:	6861      	ldr	r1, [r4, #4]
 8004640:	4299      	cmp	r1, r3
 8004642:	bfde      	ittt	le
 8004644:	2330      	movle	r3, #48	@ 0x30
 8004646:	f806 3c01 	strble.w	r3, [r6, #-1]
 800464a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800464e:	1b92      	subs	r2, r2, r6
 8004650:	6122      	str	r2, [r4, #16]
 8004652:	f8cd a000 	str.w	sl, [sp]
 8004656:	464b      	mov	r3, r9
 8004658:	aa03      	add	r2, sp, #12
 800465a:	4621      	mov	r1, r4
 800465c:	4640      	mov	r0, r8
 800465e:	f7ff fee7 	bl	8004430 <_printf_common>
 8004662:	3001      	adds	r0, #1
 8004664:	d14a      	bne.n	80046fc <_printf_i+0x1f0>
 8004666:	f04f 30ff 	mov.w	r0, #4294967295
 800466a:	b004      	add	sp, #16
 800466c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	f043 0320 	orr.w	r3, r3, #32
 8004676:	6023      	str	r3, [r4, #0]
 8004678:	4832      	ldr	r0, [pc, #200]	@ (8004744 <_printf_i+0x238>)
 800467a:	2778      	movs	r7, #120	@ 0x78
 800467c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	6831      	ldr	r1, [r6, #0]
 8004684:	061f      	lsls	r7, r3, #24
 8004686:	f851 5b04 	ldr.w	r5, [r1], #4
 800468a:	d402      	bmi.n	8004692 <_printf_i+0x186>
 800468c:	065f      	lsls	r7, r3, #25
 800468e:	bf48      	it	mi
 8004690:	b2ad      	uxthmi	r5, r5
 8004692:	6031      	str	r1, [r6, #0]
 8004694:	07d9      	lsls	r1, r3, #31
 8004696:	bf44      	itt	mi
 8004698:	f043 0320 	orrmi.w	r3, r3, #32
 800469c:	6023      	strmi	r3, [r4, #0]
 800469e:	b11d      	cbz	r5, 80046a8 <_printf_i+0x19c>
 80046a0:	2310      	movs	r3, #16
 80046a2:	e7ad      	b.n	8004600 <_printf_i+0xf4>
 80046a4:	4826      	ldr	r0, [pc, #152]	@ (8004740 <_printf_i+0x234>)
 80046a6:	e7e9      	b.n	800467c <_printf_i+0x170>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	f023 0320 	bic.w	r3, r3, #32
 80046ae:	6023      	str	r3, [r4, #0]
 80046b0:	e7f6      	b.n	80046a0 <_printf_i+0x194>
 80046b2:	4616      	mov	r6, r2
 80046b4:	e7bd      	b.n	8004632 <_printf_i+0x126>
 80046b6:	6833      	ldr	r3, [r6, #0]
 80046b8:	6825      	ldr	r5, [r4, #0]
 80046ba:	6961      	ldr	r1, [r4, #20]
 80046bc:	1d18      	adds	r0, r3, #4
 80046be:	6030      	str	r0, [r6, #0]
 80046c0:	062e      	lsls	r6, r5, #24
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	d501      	bpl.n	80046ca <_printf_i+0x1be>
 80046c6:	6019      	str	r1, [r3, #0]
 80046c8:	e002      	b.n	80046d0 <_printf_i+0x1c4>
 80046ca:	0668      	lsls	r0, r5, #25
 80046cc:	d5fb      	bpl.n	80046c6 <_printf_i+0x1ba>
 80046ce:	8019      	strh	r1, [r3, #0]
 80046d0:	2300      	movs	r3, #0
 80046d2:	6123      	str	r3, [r4, #16]
 80046d4:	4616      	mov	r6, r2
 80046d6:	e7bc      	b.n	8004652 <_printf_i+0x146>
 80046d8:	6833      	ldr	r3, [r6, #0]
 80046da:	1d1a      	adds	r2, r3, #4
 80046dc:	6032      	str	r2, [r6, #0]
 80046de:	681e      	ldr	r6, [r3, #0]
 80046e0:	6862      	ldr	r2, [r4, #4]
 80046e2:	2100      	movs	r1, #0
 80046e4:	4630      	mov	r0, r6
 80046e6:	f7fb fd9b 	bl	8000220 <memchr>
 80046ea:	b108      	cbz	r0, 80046f0 <_printf_i+0x1e4>
 80046ec:	1b80      	subs	r0, r0, r6
 80046ee:	6060      	str	r0, [r4, #4]
 80046f0:	6863      	ldr	r3, [r4, #4]
 80046f2:	6123      	str	r3, [r4, #16]
 80046f4:	2300      	movs	r3, #0
 80046f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046fa:	e7aa      	b.n	8004652 <_printf_i+0x146>
 80046fc:	6923      	ldr	r3, [r4, #16]
 80046fe:	4632      	mov	r2, r6
 8004700:	4649      	mov	r1, r9
 8004702:	4640      	mov	r0, r8
 8004704:	47d0      	blx	sl
 8004706:	3001      	adds	r0, #1
 8004708:	d0ad      	beq.n	8004666 <_printf_i+0x15a>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	079b      	lsls	r3, r3, #30
 800470e:	d413      	bmi.n	8004738 <_printf_i+0x22c>
 8004710:	68e0      	ldr	r0, [r4, #12]
 8004712:	9b03      	ldr	r3, [sp, #12]
 8004714:	4298      	cmp	r0, r3
 8004716:	bfb8      	it	lt
 8004718:	4618      	movlt	r0, r3
 800471a:	e7a6      	b.n	800466a <_printf_i+0x15e>
 800471c:	2301      	movs	r3, #1
 800471e:	4632      	mov	r2, r6
 8004720:	4649      	mov	r1, r9
 8004722:	4640      	mov	r0, r8
 8004724:	47d0      	blx	sl
 8004726:	3001      	adds	r0, #1
 8004728:	d09d      	beq.n	8004666 <_printf_i+0x15a>
 800472a:	3501      	adds	r5, #1
 800472c:	68e3      	ldr	r3, [r4, #12]
 800472e:	9903      	ldr	r1, [sp, #12]
 8004730:	1a5b      	subs	r3, r3, r1
 8004732:	42ab      	cmp	r3, r5
 8004734:	dcf2      	bgt.n	800471c <_printf_i+0x210>
 8004736:	e7eb      	b.n	8004710 <_printf_i+0x204>
 8004738:	2500      	movs	r5, #0
 800473a:	f104 0619 	add.w	r6, r4, #25
 800473e:	e7f5      	b.n	800472c <_printf_i+0x220>
 8004740:	08004ff0 	.word	0x08004ff0
 8004744:	08005001 	.word	0x08005001

08004748 <__sflush_r>:
 8004748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800474c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004750:	0716      	lsls	r6, r2, #28
 8004752:	4605      	mov	r5, r0
 8004754:	460c      	mov	r4, r1
 8004756:	d454      	bmi.n	8004802 <__sflush_r+0xba>
 8004758:	684b      	ldr	r3, [r1, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	dc02      	bgt.n	8004764 <__sflush_r+0x1c>
 800475e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	dd48      	ble.n	80047f6 <__sflush_r+0xae>
 8004764:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004766:	2e00      	cmp	r6, #0
 8004768:	d045      	beq.n	80047f6 <__sflush_r+0xae>
 800476a:	2300      	movs	r3, #0
 800476c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004770:	682f      	ldr	r7, [r5, #0]
 8004772:	6a21      	ldr	r1, [r4, #32]
 8004774:	602b      	str	r3, [r5, #0]
 8004776:	d030      	beq.n	80047da <__sflush_r+0x92>
 8004778:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	0759      	lsls	r1, r3, #29
 800477e:	d505      	bpl.n	800478c <__sflush_r+0x44>
 8004780:	6863      	ldr	r3, [r4, #4]
 8004782:	1ad2      	subs	r2, r2, r3
 8004784:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004786:	b10b      	cbz	r3, 800478c <__sflush_r+0x44>
 8004788:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800478a:	1ad2      	subs	r2, r2, r3
 800478c:	2300      	movs	r3, #0
 800478e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004790:	6a21      	ldr	r1, [r4, #32]
 8004792:	4628      	mov	r0, r5
 8004794:	47b0      	blx	r6
 8004796:	1c43      	adds	r3, r0, #1
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	d106      	bne.n	80047aa <__sflush_r+0x62>
 800479c:	6829      	ldr	r1, [r5, #0]
 800479e:	291d      	cmp	r1, #29
 80047a0:	d82b      	bhi.n	80047fa <__sflush_r+0xb2>
 80047a2:	4a2a      	ldr	r2, [pc, #168]	@ (800484c <__sflush_r+0x104>)
 80047a4:	40ca      	lsrs	r2, r1
 80047a6:	07d6      	lsls	r6, r2, #31
 80047a8:	d527      	bpl.n	80047fa <__sflush_r+0xb2>
 80047aa:	2200      	movs	r2, #0
 80047ac:	6062      	str	r2, [r4, #4]
 80047ae:	04d9      	lsls	r1, r3, #19
 80047b0:	6922      	ldr	r2, [r4, #16]
 80047b2:	6022      	str	r2, [r4, #0]
 80047b4:	d504      	bpl.n	80047c0 <__sflush_r+0x78>
 80047b6:	1c42      	adds	r2, r0, #1
 80047b8:	d101      	bne.n	80047be <__sflush_r+0x76>
 80047ba:	682b      	ldr	r3, [r5, #0]
 80047bc:	b903      	cbnz	r3, 80047c0 <__sflush_r+0x78>
 80047be:	6560      	str	r0, [r4, #84]	@ 0x54
 80047c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047c2:	602f      	str	r7, [r5, #0]
 80047c4:	b1b9      	cbz	r1, 80047f6 <__sflush_r+0xae>
 80047c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047ca:	4299      	cmp	r1, r3
 80047cc:	d002      	beq.n	80047d4 <__sflush_r+0x8c>
 80047ce:	4628      	mov	r0, r5
 80047d0:	f7ff fbd6 	bl	8003f80 <_free_r>
 80047d4:	2300      	movs	r3, #0
 80047d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80047d8:	e00d      	b.n	80047f6 <__sflush_r+0xae>
 80047da:	2301      	movs	r3, #1
 80047dc:	4628      	mov	r0, r5
 80047de:	47b0      	blx	r6
 80047e0:	4602      	mov	r2, r0
 80047e2:	1c50      	adds	r0, r2, #1
 80047e4:	d1c9      	bne.n	800477a <__sflush_r+0x32>
 80047e6:	682b      	ldr	r3, [r5, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0c6      	beq.n	800477a <__sflush_r+0x32>
 80047ec:	2b1d      	cmp	r3, #29
 80047ee:	d001      	beq.n	80047f4 <__sflush_r+0xac>
 80047f0:	2b16      	cmp	r3, #22
 80047f2:	d11e      	bne.n	8004832 <__sflush_r+0xea>
 80047f4:	602f      	str	r7, [r5, #0]
 80047f6:	2000      	movs	r0, #0
 80047f8:	e022      	b.n	8004840 <__sflush_r+0xf8>
 80047fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047fe:	b21b      	sxth	r3, r3
 8004800:	e01b      	b.n	800483a <__sflush_r+0xf2>
 8004802:	690f      	ldr	r7, [r1, #16]
 8004804:	2f00      	cmp	r7, #0
 8004806:	d0f6      	beq.n	80047f6 <__sflush_r+0xae>
 8004808:	0793      	lsls	r3, r2, #30
 800480a:	680e      	ldr	r6, [r1, #0]
 800480c:	bf08      	it	eq
 800480e:	694b      	ldreq	r3, [r1, #20]
 8004810:	600f      	str	r7, [r1, #0]
 8004812:	bf18      	it	ne
 8004814:	2300      	movne	r3, #0
 8004816:	eba6 0807 	sub.w	r8, r6, r7
 800481a:	608b      	str	r3, [r1, #8]
 800481c:	f1b8 0f00 	cmp.w	r8, #0
 8004820:	dde9      	ble.n	80047f6 <__sflush_r+0xae>
 8004822:	6a21      	ldr	r1, [r4, #32]
 8004824:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004826:	4643      	mov	r3, r8
 8004828:	463a      	mov	r2, r7
 800482a:	4628      	mov	r0, r5
 800482c:	47b0      	blx	r6
 800482e:	2800      	cmp	r0, #0
 8004830:	dc08      	bgt.n	8004844 <__sflush_r+0xfc>
 8004832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800483a:	81a3      	strh	r3, [r4, #12]
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004844:	4407      	add	r7, r0
 8004846:	eba8 0800 	sub.w	r8, r8, r0
 800484a:	e7e7      	b.n	800481c <__sflush_r+0xd4>
 800484c:	20400001 	.word	0x20400001

08004850 <_fflush_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	690b      	ldr	r3, [r1, #16]
 8004854:	4605      	mov	r5, r0
 8004856:	460c      	mov	r4, r1
 8004858:	b913      	cbnz	r3, 8004860 <_fflush_r+0x10>
 800485a:	2500      	movs	r5, #0
 800485c:	4628      	mov	r0, r5
 800485e:	bd38      	pop	{r3, r4, r5, pc}
 8004860:	b118      	cbz	r0, 800486a <_fflush_r+0x1a>
 8004862:	6a03      	ldr	r3, [r0, #32]
 8004864:	b90b      	cbnz	r3, 800486a <_fflush_r+0x1a>
 8004866:	f7ff fa55 	bl	8003d14 <__sinit>
 800486a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f3      	beq.n	800485a <_fflush_r+0xa>
 8004872:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004874:	07d0      	lsls	r0, r2, #31
 8004876:	d404      	bmi.n	8004882 <_fflush_r+0x32>
 8004878:	0599      	lsls	r1, r3, #22
 800487a:	d402      	bmi.n	8004882 <_fflush_r+0x32>
 800487c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800487e:	f7ff fb5e 	bl	8003f3e <__retarget_lock_acquire_recursive>
 8004882:	4628      	mov	r0, r5
 8004884:	4621      	mov	r1, r4
 8004886:	f7ff ff5f 	bl	8004748 <__sflush_r>
 800488a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800488c:	07da      	lsls	r2, r3, #31
 800488e:	4605      	mov	r5, r0
 8004890:	d4e4      	bmi.n	800485c <_fflush_r+0xc>
 8004892:	89a3      	ldrh	r3, [r4, #12]
 8004894:	059b      	lsls	r3, r3, #22
 8004896:	d4e1      	bmi.n	800485c <_fflush_r+0xc>
 8004898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800489a:	f7ff fb51 	bl	8003f40 <__retarget_lock_release_recursive>
 800489e:	e7dd      	b.n	800485c <_fflush_r+0xc>

080048a0 <fiprintf>:
 80048a0:	b40e      	push	{r1, r2, r3}
 80048a2:	b503      	push	{r0, r1, lr}
 80048a4:	4601      	mov	r1, r0
 80048a6:	ab03      	add	r3, sp, #12
 80048a8:	4805      	ldr	r0, [pc, #20]	@ (80048c0 <fiprintf+0x20>)
 80048aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ae:	6800      	ldr	r0, [r0, #0]
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	f000 f89d 	bl	80049f0 <_vfiprintf_r>
 80048b6:	b002      	add	sp, #8
 80048b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048bc:	b003      	add	sp, #12
 80048be:	4770      	bx	lr
 80048c0:	20004020 	.word	0x20004020

080048c4 <memmove>:
 80048c4:	4288      	cmp	r0, r1
 80048c6:	b510      	push	{r4, lr}
 80048c8:	eb01 0402 	add.w	r4, r1, r2
 80048cc:	d902      	bls.n	80048d4 <memmove+0x10>
 80048ce:	4284      	cmp	r4, r0
 80048d0:	4623      	mov	r3, r4
 80048d2:	d807      	bhi.n	80048e4 <memmove+0x20>
 80048d4:	1e43      	subs	r3, r0, #1
 80048d6:	42a1      	cmp	r1, r4
 80048d8:	d008      	beq.n	80048ec <memmove+0x28>
 80048da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048e2:	e7f8      	b.n	80048d6 <memmove+0x12>
 80048e4:	4402      	add	r2, r0
 80048e6:	4601      	mov	r1, r0
 80048e8:	428a      	cmp	r2, r1
 80048ea:	d100      	bne.n	80048ee <memmove+0x2a>
 80048ec:	bd10      	pop	{r4, pc}
 80048ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048f6:	e7f7      	b.n	80048e8 <memmove+0x24>

080048f8 <_sbrk_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4d06      	ldr	r5, [pc, #24]	@ (8004914 <_sbrk_r+0x1c>)
 80048fc:	2300      	movs	r3, #0
 80048fe:	4604      	mov	r4, r0
 8004900:	4608      	mov	r0, r1
 8004902:	602b      	str	r3, [r5, #0]
 8004904:	f7fc fa22 	bl	8000d4c <_sbrk>
 8004908:	1c43      	adds	r3, r0, #1
 800490a:	d102      	bne.n	8004912 <_sbrk_r+0x1a>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	b103      	cbz	r3, 8004912 <_sbrk_r+0x1a>
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	20008340 	.word	0x20008340

08004918 <memcpy>:
 8004918:	440a      	add	r2, r1
 800491a:	4291      	cmp	r1, r2
 800491c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004920:	d100      	bne.n	8004924 <memcpy+0xc>
 8004922:	4770      	bx	lr
 8004924:	b510      	push	{r4, lr}
 8004926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800492a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800492e:	4291      	cmp	r1, r2
 8004930:	d1f9      	bne.n	8004926 <memcpy+0xe>
 8004932:	bd10      	pop	{r4, pc}

08004934 <abort>:
 8004934:	b508      	push	{r3, lr}
 8004936:	2006      	movs	r0, #6
 8004938:	f000 fa2e 	bl	8004d98 <raise>
 800493c:	2001      	movs	r0, #1
 800493e:	f7fc f98c 	bl	8000c5a <_exit>

08004942 <_realloc_r>:
 8004942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004946:	4607      	mov	r7, r0
 8004948:	4614      	mov	r4, r2
 800494a:	460d      	mov	r5, r1
 800494c:	b921      	cbnz	r1, 8004958 <_realloc_r+0x16>
 800494e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004952:	4611      	mov	r1, r2
 8004954:	f7ff bb88 	b.w	8004068 <_malloc_r>
 8004958:	b92a      	cbnz	r2, 8004966 <_realloc_r+0x24>
 800495a:	f7ff fb11 	bl	8003f80 <_free_r>
 800495e:	4625      	mov	r5, r4
 8004960:	4628      	mov	r0, r5
 8004962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004966:	f000 fa33 	bl	8004dd0 <_malloc_usable_size_r>
 800496a:	4284      	cmp	r4, r0
 800496c:	4606      	mov	r6, r0
 800496e:	d802      	bhi.n	8004976 <_realloc_r+0x34>
 8004970:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004974:	d8f4      	bhi.n	8004960 <_realloc_r+0x1e>
 8004976:	4621      	mov	r1, r4
 8004978:	4638      	mov	r0, r7
 800497a:	f7ff fb75 	bl	8004068 <_malloc_r>
 800497e:	4680      	mov	r8, r0
 8004980:	b908      	cbnz	r0, 8004986 <_realloc_r+0x44>
 8004982:	4645      	mov	r5, r8
 8004984:	e7ec      	b.n	8004960 <_realloc_r+0x1e>
 8004986:	42b4      	cmp	r4, r6
 8004988:	4622      	mov	r2, r4
 800498a:	4629      	mov	r1, r5
 800498c:	bf28      	it	cs
 800498e:	4632      	movcs	r2, r6
 8004990:	f7ff ffc2 	bl	8004918 <memcpy>
 8004994:	4629      	mov	r1, r5
 8004996:	4638      	mov	r0, r7
 8004998:	f7ff faf2 	bl	8003f80 <_free_r>
 800499c:	e7f1      	b.n	8004982 <_realloc_r+0x40>

0800499e <__sfputc_r>:
 800499e:	6893      	ldr	r3, [r2, #8]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	b410      	push	{r4}
 80049a6:	6093      	str	r3, [r2, #8]
 80049a8:	da08      	bge.n	80049bc <__sfputc_r+0x1e>
 80049aa:	6994      	ldr	r4, [r2, #24]
 80049ac:	42a3      	cmp	r3, r4
 80049ae:	db01      	blt.n	80049b4 <__sfputc_r+0x16>
 80049b0:	290a      	cmp	r1, #10
 80049b2:	d103      	bne.n	80049bc <__sfputc_r+0x1e>
 80049b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049b8:	f000 b932 	b.w	8004c20 <__swbuf_r>
 80049bc:	6813      	ldr	r3, [r2, #0]
 80049be:	1c58      	adds	r0, r3, #1
 80049c0:	6010      	str	r0, [r2, #0]
 80049c2:	7019      	strb	r1, [r3, #0]
 80049c4:	4608      	mov	r0, r1
 80049c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <__sfputs_r>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	4606      	mov	r6, r0
 80049d0:	460f      	mov	r7, r1
 80049d2:	4614      	mov	r4, r2
 80049d4:	18d5      	adds	r5, r2, r3
 80049d6:	42ac      	cmp	r4, r5
 80049d8:	d101      	bne.n	80049de <__sfputs_r+0x12>
 80049da:	2000      	movs	r0, #0
 80049dc:	e007      	b.n	80049ee <__sfputs_r+0x22>
 80049de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e2:	463a      	mov	r2, r7
 80049e4:	4630      	mov	r0, r6
 80049e6:	f7ff ffda 	bl	800499e <__sfputc_r>
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	d1f3      	bne.n	80049d6 <__sfputs_r+0xa>
 80049ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049f0 <_vfiprintf_r>:
 80049f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f4:	460d      	mov	r5, r1
 80049f6:	b09d      	sub	sp, #116	@ 0x74
 80049f8:	4614      	mov	r4, r2
 80049fa:	4698      	mov	r8, r3
 80049fc:	4606      	mov	r6, r0
 80049fe:	b118      	cbz	r0, 8004a08 <_vfiprintf_r+0x18>
 8004a00:	6a03      	ldr	r3, [r0, #32]
 8004a02:	b90b      	cbnz	r3, 8004a08 <_vfiprintf_r+0x18>
 8004a04:	f7ff f986 	bl	8003d14 <__sinit>
 8004a08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a0a:	07d9      	lsls	r1, r3, #31
 8004a0c:	d405      	bmi.n	8004a1a <_vfiprintf_r+0x2a>
 8004a0e:	89ab      	ldrh	r3, [r5, #12]
 8004a10:	059a      	lsls	r2, r3, #22
 8004a12:	d402      	bmi.n	8004a1a <_vfiprintf_r+0x2a>
 8004a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a16:	f7ff fa92 	bl	8003f3e <__retarget_lock_acquire_recursive>
 8004a1a:	89ab      	ldrh	r3, [r5, #12]
 8004a1c:	071b      	lsls	r3, r3, #28
 8004a1e:	d501      	bpl.n	8004a24 <_vfiprintf_r+0x34>
 8004a20:	692b      	ldr	r3, [r5, #16]
 8004a22:	b99b      	cbnz	r3, 8004a4c <_vfiprintf_r+0x5c>
 8004a24:	4629      	mov	r1, r5
 8004a26:	4630      	mov	r0, r6
 8004a28:	f000 f938 	bl	8004c9c <__swsetup_r>
 8004a2c:	b170      	cbz	r0, 8004a4c <_vfiprintf_r+0x5c>
 8004a2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a30:	07dc      	lsls	r4, r3, #31
 8004a32:	d504      	bpl.n	8004a3e <_vfiprintf_r+0x4e>
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295
 8004a38:	b01d      	add	sp, #116	@ 0x74
 8004a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a3e:	89ab      	ldrh	r3, [r5, #12]
 8004a40:	0598      	lsls	r0, r3, #22
 8004a42:	d4f7      	bmi.n	8004a34 <_vfiprintf_r+0x44>
 8004a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a46:	f7ff fa7b 	bl	8003f40 <__retarget_lock_release_recursive>
 8004a4a:	e7f3      	b.n	8004a34 <_vfiprintf_r+0x44>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a50:	2320      	movs	r3, #32
 8004a52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a56:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a5a:	2330      	movs	r3, #48	@ 0x30
 8004a5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004c0c <_vfiprintf_r+0x21c>
 8004a60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a64:	f04f 0901 	mov.w	r9, #1
 8004a68:	4623      	mov	r3, r4
 8004a6a:	469a      	mov	sl, r3
 8004a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a70:	b10a      	cbz	r2, 8004a76 <_vfiprintf_r+0x86>
 8004a72:	2a25      	cmp	r2, #37	@ 0x25
 8004a74:	d1f9      	bne.n	8004a6a <_vfiprintf_r+0x7a>
 8004a76:	ebba 0b04 	subs.w	fp, sl, r4
 8004a7a:	d00b      	beq.n	8004a94 <_vfiprintf_r+0xa4>
 8004a7c:	465b      	mov	r3, fp
 8004a7e:	4622      	mov	r2, r4
 8004a80:	4629      	mov	r1, r5
 8004a82:	4630      	mov	r0, r6
 8004a84:	f7ff ffa2 	bl	80049cc <__sfputs_r>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	f000 80a7 	beq.w	8004bdc <_vfiprintf_r+0x1ec>
 8004a8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a90:	445a      	add	r2, fp
 8004a92:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a94:	f89a 3000 	ldrb.w	r3, [sl]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 809f 	beq.w	8004bdc <_vfiprintf_r+0x1ec>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aa8:	f10a 0a01 	add.w	sl, sl, #1
 8004aac:	9304      	str	r3, [sp, #16]
 8004aae:	9307      	str	r3, [sp, #28]
 8004ab0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ab4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ab6:	4654      	mov	r4, sl
 8004ab8:	2205      	movs	r2, #5
 8004aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004abe:	4853      	ldr	r0, [pc, #332]	@ (8004c0c <_vfiprintf_r+0x21c>)
 8004ac0:	f7fb fbae 	bl	8000220 <memchr>
 8004ac4:	9a04      	ldr	r2, [sp, #16]
 8004ac6:	b9d8      	cbnz	r0, 8004b00 <_vfiprintf_r+0x110>
 8004ac8:	06d1      	lsls	r1, r2, #27
 8004aca:	bf44      	itt	mi
 8004acc:	2320      	movmi	r3, #32
 8004ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ad2:	0713      	lsls	r3, r2, #28
 8004ad4:	bf44      	itt	mi
 8004ad6:	232b      	movmi	r3, #43	@ 0x2b
 8004ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004adc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ae2:	d015      	beq.n	8004b10 <_vfiprintf_r+0x120>
 8004ae4:	9a07      	ldr	r2, [sp, #28]
 8004ae6:	4654      	mov	r4, sl
 8004ae8:	2000      	movs	r0, #0
 8004aea:	f04f 0c0a 	mov.w	ip, #10
 8004aee:	4621      	mov	r1, r4
 8004af0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004af4:	3b30      	subs	r3, #48	@ 0x30
 8004af6:	2b09      	cmp	r3, #9
 8004af8:	d94b      	bls.n	8004b92 <_vfiprintf_r+0x1a2>
 8004afa:	b1b0      	cbz	r0, 8004b2a <_vfiprintf_r+0x13a>
 8004afc:	9207      	str	r2, [sp, #28]
 8004afe:	e014      	b.n	8004b2a <_vfiprintf_r+0x13a>
 8004b00:	eba0 0308 	sub.w	r3, r0, r8
 8004b04:	fa09 f303 	lsl.w	r3, r9, r3
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	9304      	str	r3, [sp, #16]
 8004b0c:	46a2      	mov	sl, r4
 8004b0e:	e7d2      	b.n	8004ab6 <_vfiprintf_r+0xc6>
 8004b10:	9b03      	ldr	r3, [sp, #12]
 8004b12:	1d19      	adds	r1, r3, #4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	9103      	str	r1, [sp, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bfbb      	ittet	lt
 8004b1c:	425b      	neglt	r3, r3
 8004b1e:	f042 0202 	orrlt.w	r2, r2, #2
 8004b22:	9307      	strge	r3, [sp, #28]
 8004b24:	9307      	strlt	r3, [sp, #28]
 8004b26:	bfb8      	it	lt
 8004b28:	9204      	strlt	r2, [sp, #16]
 8004b2a:	7823      	ldrb	r3, [r4, #0]
 8004b2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b2e:	d10a      	bne.n	8004b46 <_vfiprintf_r+0x156>
 8004b30:	7863      	ldrb	r3, [r4, #1]
 8004b32:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b34:	d132      	bne.n	8004b9c <_vfiprintf_r+0x1ac>
 8004b36:	9b03      	ldr	r3, [sp, #12]
 8004b38:	1d1a      	adds	r2, r3, #4
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	9203      	str	r2, [sp, #12]
 8004b3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b42:	3402      	adds	r4, #2
 8004b44:	9305      	str	r3, [sp, #20]
 8004b46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004c1c <_vfiprintf_r+0x22c>
 8004b4a:	7821      	ldrb	r1, [r4, #0]
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	4650      	mov	r0, sl
 8004b50:	f7fb fb66 	bl	8000220 <memchr>
 8004b54:	b138      	cbz	r0, 8004b66 <_vfiprintf_r+0x176>
 8004b56:	9b04      	ldr	r3, [sp, #16]
 8004b58:	eba0 000a 	sub.w	r0, r0, sl
 8004b5c:	2240      	movs	r2, #64	@ 0x40
 8004b5e:	4082      	lsls	r2, r0
 8004b60:	4313      	orrs	r3, r2
 8004b62:	3401      	adds	r4, #1
 8004b64:	9304      	str	r3, [sp, #16]
 8004b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b6a:	4829      	ldr	r0, [pc, #164]	@ (8004c10 <_vfiprintf_r+0x220>)
 8004b6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b70:	2206      	movs	r2, #6
 8004b72:	f7fb fb55 	bl	8000220 <memchr>
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d03f      	beq.n	8004bfa <_vfiprintf_r+0x20a>
 8004b7a:	4b26      	ldr	r3, [pc, #152]	@ (8004c14 <_vfiprintf_r+0x224>)
 8004b7c:	bb1b      	cbnz	r3, 8004bc6 <_vfiprintf_r+0x1d6>
 8004b7e:	9b03      	ldr	r3, [sp, #12]
 8004b80:	3307      	adds	r3, #7
 8004b82:	f023 0307 	bic.w	r3, r3, #7
 8004b86:	3308      	adds	r3, #8
 8004b88:	9303      	str	r3, [sp, #12]
 8004b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b8c:	443b      	add	r3, r7
 8004b8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b90:	e76a      	b.n	8004a68 <_vfiprintf_r+0x78>
 8004b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b96:	460c      	mov	r4, r1
 8004b98:	2001      	movs	r0, #1
 8004b9a:	e7a8      	b.n	8004aee <_vfiprintf_r+0xfe>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	3401      	adds	r4, #1
 8004ba0:	9305      	str	r3, [sp, #20]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	f04f 0c0a 	mov.w	ip, #10
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bae:	3a30      	subs	r2, #48	@ 0x30
 8004bb0:	2a09      	cmp	r2, #9
 8004bb2:	d903      	bls.n	8004bbc <_vfiprintf_r+0x1cc>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0c6      	beq.n	8004b46 <_vfiprintf_r+0x156>
 8004bb8:	9105      	str	r1, [sp, #20]
 8004bba:	e7c4      	b.n	8004b46 <_vfiprintf_r+0x156>
 8004bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e7f0      	b.n	8004ba8 <_vfiprintf_r+0x1b8>
 8004bc6:	ab03      	add	r3, sp, #12
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	462a      	mov	r2, r5
 8004bcc:	4b12      	ldr	r3, [pc, #72]	@ (8004c18 <_vfiprintf_r+0x228>)
 8004bce:	a904      	add	r1, sp, #16
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f3af 8000 	nop.w
 8004bd6:	4607      	mov	r7, r0
 8004bd8:	1c78      	adds	r0, r7, #1
 8004bda:	d1d6      	bne.n	8004b8a <_vfiprintf_r+0x19a>
 8004bdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bde:	07d9      	lsls	r1, r3, #31
 8004be0:	d405      	bmi.n	8004bee <_vfiprintf_r+0x1fe>
 8004be2:	89ab      	ldrh	r3, [r5, #12]
 8004be4:	059a      	lsls	r2, r3, #22
 8004be6:	d402      	bmi.n	8004bee <_vfiprintf_r+0x1fe>
 8004be8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bea:	f7ff f9a9 	bl	8003f40 <__retarget_lock_release_recursive>
 8004bee:	89ab      	ldrh	r3, [r5, #12]
 8004bf0:	065b      	lsls	r3, r3, #25
 8004bf2:	f53f af1f 	bmi.w	8004a34 <_vfiprintf_r+0x44>
 8004bf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bf8:	e71e      	b.n	8004a38 <_vfiprintf_r+0x48>
 8004bfa:	ab03      	add	r3, sp, #12
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	462a      	mov	r2, r5
 8004c00:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <_vfiprintf_r+0x228>)
 8004c02:	a904      	add	r1, sp, #16
 8004c04:	4630      	mov	r0, r6
 8004c06:	f7ff fc81 	bl	800450c <_printf_i>
 8004c0a:	e7e4      	b.n	8004bd6 <_vfiprintf_r+0x1e6>
 8004c0c:	08004fdf 	.word	0x08004fdf
 8004c10:	08004fe9 	.word	0x08004fe9
 8004c14:	00000000 	.word	0x00000000
 8004c18:	080049cd 	.word	0x080049cd
 8004c1c:	08004fe5 	.word	0x08004fe5

08004c20 <__swbuf_r>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	460e      	mov	r6, r1
 8004c24:	4614      	mov	r4, r2
 8004c26:	4605      	mov	r5, r0
 8004c28:	b118      	cbz	r0, 8004c32 <__swbuf_r+0x12>
 8004c2a:	6a03      	ldr	r3, [r0, #32]
 8004c2c:	b90b      	cbnz	r3, 8004c32 <__swbuf_r+0x12>
 8004c2e:	f7ff f871 	bl	8003d14 <__sinit>
 8004c32:	69a3      	ldr	r3, [r4, #24]
 8004c34:	60a3      	str	r3, [r4, #8]
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	071a      	lsls	r2, r3, #28
 8004c3a:	d501      	bpl.n	8004c40 <__swbuf_r+0x20>
 8004c3c:	6923      	ldr	r3, [r4, #16]
 8004c3e:	b943      	cbnz	r3, 8004c52 <__swbuf_r+0x32>
 8004c40:	4621      	mov	r1, r4
 8004c42:	4628      	mov	r0, r5
 8004c44:	f000 f82a 	bl	8004c9c <__swsetup_r>
 8004c48:	b118      	cbz	r0, 8004c52 <__swbuf_r+0x32>
 8004c4a:	f04f 37ff 	mov.w	r7, #4294967295
 8004c4e:	4638      	mov	r0, r7
 8004c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	6922      	ldr	r2, [r4, #16]
 8004c56:	1a98      	subs	r0, r3, r2
 8004c58:	6963      	ldr	r3, [r4, #20]
 8004c5a:	b2f6      	uxtb	r6, r6
 8004c5c:	4283      	cmp	r3, r0
 8004c5e:	4637      	mov	r7, r6
 8004c60:	dc05      	bgt.n	8004c6e <__swbuf_r+0x4e>
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f7ff fdf3 	bl	8004850 <_fflush_r>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d1ed      	bne.n	8004c4a <__swbuf_r+0x2a>
 8004c6e:	68a3      	ldr	r3, [r4, #8]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	60a3      	str	r3, [r4, #8]
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	6022      	str	r2, [r4, #0]
 8004c7a:	701e      	strb	r6, [r3, #0]
 8004c7c:	6962      	ldr	r2, [r4, #20]
 8004c7e:	1c43      	adds	r3, r0, #1
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d004      	beq.n	8004c8e <__swbuf_r+0x6e>
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	07db      	lsls	r3, r3, #31
 8004c88:	d5e1      	bpl.n	8004c4e <__swbuf_r+0x2e>
 8004c8a:	2e0a      	cmp	r6, #10
 8004c8c:	d1df      	bne.n	8004c4e <__swbuf_r+0x2e>
 8004c8e:	4621      	mov	r1, r4
 8004c90:	4628      	mov	r0, r5
 8004c92:	f7ff fddd 	bl	8004850 <_fflush_r>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d0d9      	beq.n	8004c4e <__swbuf_r+0x2e>
 8004c9a:	e7d6      	b.n	8004c4a <__swbuf_r+0x2a>

08004c9c <__swsetup_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4b29      	ldr	r3, [pc, #164]	@ (8004d44 <__swsetup_r+0xa8>)
 8004ca0:	4605      	mov	r5, r0
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	b118      	cbz	r0, 8004cb0 <__swsetup_r+0x14>
 8004ca8:	6a03      	ldr	r3, [r0, #32]
 8004caa:	b90b      	cbnz	r3, 8004cb0 <__swsetup_r+0x14>
 8004cac:	f7ff f832 	bl	8003d14 <__sinit>
 8004cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cb4:	0719      	lsls	r1, r3, #28
 8004cb6:	d422      	bmi.n	8004cfe <__swsetup_r+0x62>
 8004cb8:	06da      	lsls	r2, r3, #27
 8004cba:	d407      	bmi.n	8004ccc <__swsetup_r+0x30>
 8004cbc:	2209      	movs	r2, #9
 8004cbe:	602a      	str	r2, [r5, #0]
 8004cc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cc4:	81a3      	strh	r3, [r4, #12]
 8004cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cca:	e033      	b.n	8004d34 <__swsetup_r+0x98>
 8004ccc:	0758      	lsls	r0, r3, #29
 8004cce:	d512      	bpl.n	8004cf6 <__swsetup_r+0x5a>
 8004cd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cd2:	b141      	cbz	r1, 8004ce6 <__swsetup_r+0x4a>
 8004cd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cd8:	4299      	cmp	r1, r3
 8004cda:	d002      	beq.n	8004ce2 <__swsetup_r+0x46>
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f7ff f94f 	bl	8003f80 <_free_r>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004cec:	81a3      	strh	r3, [r4, #12]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	6063      	str	r3, [r4, #4]
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	f043 0308 	orr.w	r3, r3, #8
 8004cfc:	81a3      	strh	r3, [r4, #12]
 8004cfe:	6923      	ldr	r3, [r4, #16]
 8004d00:	b94b      	cbnz	r3, 8004d16 <__swsetup_r+0x7a>
 8004d02:	89a3      	ldrh	r3, [r4, #12]
 8004d04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d0c:	d003      	beq.n	8004d16 <__swsetup_r+0x7a>
 8004d0e:	4621      	mov	r1, r4
 8004d10:	4628      	mov	r0, r5
 8004d12:	f000 f88b 	bl	8004e2c <__smakebuf_r>
 8004d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d1a:	f013 0201 	ands.w	r2, r3, #1
 8004d1e:	d00a      	beq.n	8004d36 <__swsetup_r+0x9a>
 8004d20:	2200      	movs	r2, #0
 8004d22:	60a2      	str	r2, [r4, #8]
 8004d24:	6962      	ldr	r2, [r4, #20]
 8004d26:	4252      	negs	r2, r2
 8004d28:	61a2      	str	r2, [r4, #24]
 8004d2a:	6922      	ldr	r2, [r4, #16]
 8004d2c:	b942      	cbnz	r2, 8004d40 <__swsetup_r+0xa4>
 8004d2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d32:	d1c5      	bne.n	8004cc0 <__swsetup_r+0x24>
 8004d34:	bd38      	pop	{r3, r4, r5, pc}
 8004d36:	0799      	lsls	r1, r3, #30
 8004d38:	bf58      	it	pl
 8004d3a:	6962      	ldrpl	r2, [r4, #20]
 8004d3c:	60a2      	str	r2, [r4, #8]
 8004d3e:	e7f4      	b.n	8004d2a <__swsetup_r+0x8e>
 8004d40:	2000      	movs	r0, #0
 8004d42:	e7f7      	b.n	8004d34 <__swsetup_r+0x98>
 8004d44:	20004020 	.word	0x20004020

08004d48 <_raise_r>:
 8004d48:	291f      	cmp	r1, #31
 8004d4a:	b538      	push	{r3, r4, r5, lr}
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	d904      	bls.n	8004d5c <_raise_r+0x14>
 8004d52:	2316      	movs	r3, #22
 8004d54:	6003      	str	r3, [r0, #0]
 8004d56:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5a:	bd38      	pop	{r3, r4, r5, pc}
 8004d5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004d5e:	b112      	cbz	r2, 8004d66 <_raise_r+0x1e>
 8004d60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d64:	b94b      	cbnz	r3, 8004d7a <_raise_r+0x32>
 8004d66:	4628      	mov	r0, r5
 8004d68:	f000 f830 	bl	8004dcc <_getpid_r>
 8004d6c:	4622      	mov	r2, r4
 8004d6e:	4601      	mov	r1, r0
 8004d70:	4628      	mov	r0, r5
 8004d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d76:	f000 b817 	b.w	8004da8 <_kill_r>
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d00a      	beq.n	8004d94 <_raise_r+0x4c>
 8004d7e:	1c59      	adds	r1, r3, #1
 8004d80:	d103      	bne.n	8004d8a <_raise_r+0x42>
 8004d82:	2316      	movs	r3, #22
 8004d84:	6003      	str	r3, [r0, #0]
 8004d86:	2001      	movs	r0, #1
 8004d88:	e7e7      	b.n	8004d5a <_raise_r+0x12>
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004d90:	4620      	mov	r0, r4
 8004d92:	4798      	blx	r3
 8004d94:	2000      	movs	r0, #0
 8004d96:	e7e0      	b.n	8004d5a <_raise_r+0x12>

08004d98 <raise>:
 8004d98:	4b02      	ldr	r3, [pc, #8]	@ (8004da4 <raise+0xc>)
 8004d9a:	4601      	mov	r1, r0
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	f7ff bfd3 	b.w	8004d48 <_raise_r>
 8004da2:	bf00      	nop
 8004da4:	20004020 	.word	0x20004020

08004da8 <_kill_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4d07      	ldr	r5, [pc, #28]	@ (8004dc8 <_kill_r+0x20>)
 8004dac:	2300      	movs	r3, #0
 8004dae:	4604      	mov	r4, r0
 8004db0:	4608      	mov	r0, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	602b      	str	r3, [r5, #0]
 8004db6:	f7fb ff40 	bl	8000c3a <_kill>
 8004dba:	1c43      	adds	r3, r0, #1
 8004dbc:	d102      	bne.n	8004dc4 <_kill_r+0x1c>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	b103      	cbz	r3, 8004dc4 <_kill_r+0x1c>
 8004dc2:	6023      	str	r3, [r4, #0]
 8004dc4:	bd38      	pop	{r3, r4, r5, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20008340 	.word	0x20008340

08004dcc <_getpid_r>:
 8004dcc:	f7fb bf2d 	b.w	8000c2a <_getpid>

08004dd0 <_malloc_usable_size_r>:
 8004dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dd4:	1f18      	subs	r0, r3, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bfbc      	itt	lt
 8004dda:	580b      	ldrlt	r3, [r1, r0]
 8004ddc:	18c0      	addlt	r0, r0, r3
 8004dde:	4770      	bx	lr

08004de0 <__swhatbuf_r>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	460c      	mov	r4, r1
 8004de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de8:	2900      	cmp	r1, #0
 8004dea:	b096      	sub	sp, #88	@ 0x58
 8004dec:	4615      	mov	r5, r2
 8004dee:	461e      	mov	r6, r3
 8004df0:	da0d      	bge.n	8004e0e <__swhatbuf_r+0x2e>
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004df8:	f04f 0100 	mov.w	r1, #0
 8004dfc:	bf14      	ite	ne
 8004dfe:	2340      	movne	r3, #64	@ 0x40
 8004e00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004e04:	2000      	movs	r0, #0
 8004e06:	6031      	str	r1, [r6, #0]
 8004e08:	602b      	str	r3, [r5, #0]
 8004e0a:	b016      	add	sp, #88	@ 0x58
 8004e0c:	bd70      	pop	{r4, r5, r6, pc}
 8004e0e:	466a      	mov	r2, sp
 8004e10:	f000 f848 	bl	8004ea4 <_fstat_r>
 8004e14:	2800      	cmp	r0, #0
 8004e16:	dbec      	blt.n	8004df2 <__swhatbuf_r+0x12>
 8004e18:	9901      	ldr	r1, [sp, #4]
 8004e1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004e1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004e22:	4259      	negs	r1, r3
 8004e24:	4159      	adcs	r1, r3
 8004e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e2a:	e7eb      	b.n	8004e04 <__swhatbuf_r+0x24>

08004e2c <__smakebuf_r>:
 8004e2c:	898b      	ldrh	r3, [r1, #12]
 8004e2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e30:	079d      	lsls	r5, r3, #30
 8004e32:	4606      	mov	r6, r0
 8004e34:	460c      	mov	r4, r1
 8004e36:	d507      	bpl.n	8004e48 <__smakebuf_r+0x1c>
 8004e38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	6123      	str	r3, [r4, #16]
 8004e40:	2301      	movs	r3, #1
 8004e42:	6163      	str	r3, [r4, #20]
 8004e44:	b003      	add	sp, #12
 8004e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e48:	ab01      	add	r3, sp, #4
 8004e4a:	466a      	mov	r2, sp
 8004e4c:	f7ff ffc8 	bl	8004de0 <__swhatbuf_r>
 8004e50:	9f00      	ldr	r7, [sp, #0]
 8004e52:	4605      	mov	r5, r0
 8004e54:	4639      	mov	r1, r7
 8004e56:	4630      	mov	r0, r6
 8004e58:	f7ff f906 	bl	8004068 <_malloc_r>
 8004e5c:	b948      	cbnz	r0, 8004e72 <__smakebuf_r+0x46>
 8004e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e62:	059a      	lsls	r2, r3, #22
 8004e64:	d4ee      	bmi.n	8004e44 <__smakebuf_r+0x18>
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	f043 0302 	orr.w	r3, r3, #2
 8004e6e:	81a3      	strh	r3, [r4, #12]
 8004e70:	e7e2      	b.n	8004e38 <__smakebuf_r+0xc>
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	6020      	str	r0, [r4, #0]
 8004e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e7a:	81a3      	strh	r3, [r4, #12]
 8004e7c:	9b01      	ldr	r3, [sp, #4]
 8004e7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004e82:	b15b      	cbz	r3, 8004e9c <__smakebuf_r+0x70>
 8004e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e88:	4630      	mov	r0, r6
 8004e8a:	f000 f81d 	bl	8004ec8 <_isatty_r>
 8004e8e:	b128      	cbz	r0, 8004e9c <__smakebuf_r+0x70>
 8004e90:	89a3      	ldrh	r3, [r4, #12]
 8004e92:	f023 0303 	bic.w	r3, r3, #3
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	81a3      	strh	r3, [r4, #12]
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	431d      	orrs	r5, r3
 8004ea0:	81a5      	strh	r5, [r4, #12]
 8004ea2:	e7cf      	b.n	8004e44 <__smakebuf_r+0x18>

08004ea4 <_fstat_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4d07      	ldr	r5, [pc, #28]	@ (8004ec4 <_fstat_r+0x20>)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	4604      	mov	r4, r0
 8004eac:	4608      	mov	r0, r1
 8004eae:	4611      	mov	r1, r2
 8004eb0:	602b      	str	r3, [r5, #0]
 8004eb2:	f7fb ff22 	bl	8000cfa <_fstat>
 8004eb6:	1c43      	adds	r3, r0, #1
 8004eb8:	d102      	bne.n	8004ec0 <_fstat_r+0x1c>
 8004eba:	682b      	ldr	r3, [r5, #0]
 8004ebc:	b103      	cbz	r3, 8004ec0 <_fstat_r+0x1c>
 8004ebe:	6023      	str	r3, [r4, #0]
 8004ec0:	bd38      	pop	{r3, r4, r5, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20008340 	.word	0x20008340

08004ec8 <_isatty_r>:
 8004ec8:	b538      	push	{r3, r4, r5, lr}
 8004eca:	4d06      	ldr	r5, [pc, #24]	@ (8004ee4 <_isatty_r+0x1c>)
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4604      	mov	r4, r0
 8004ed0:	4608      	mov	r0, r1
 8004ed2:	602b      	str	r3, [r5, #0]
 8004ed4:	f7fb ff21 	bl	8000d1a <_isatty>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d102      	bne.n	8004ee2 <_isatty_r+0x1a>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	b103      	cbz	r3, 8004ee2 <_isatty_r+0x1a>
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	20008340 	.word	0x20008340

08004ee8 <_init>:
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	bf00      	nop
 8004eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eee:	bc08      	pop	{r3}
 8004ef0:	469e      	mov	lr, r3
 8004ef2:	4770      	bx	lr

08004ef4 <_fini>:
 8004ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef6:	bf00      	nop
 8004ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efa:	bc08      	pop	{r3}
 8004efc:	469e      	mov	lr, r3
 8004efe:	4770      	bx	lr
