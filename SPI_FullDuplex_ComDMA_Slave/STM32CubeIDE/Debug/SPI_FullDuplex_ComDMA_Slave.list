
SPI_FullDuplex_ComDMA_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e3c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800501c  0800501c  0000601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005130  08005130  0000b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005130  08005130  00006130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005138  08005138  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005138  08005138  00006138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800513c  0800513c  0000613c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00004070  20000000  08005140  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042e0  20004070  080091b0  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008350  080091b0  0000b350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000b167  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000083  00000000  00000000  00016207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00009b48  00000000  00000000  0001628a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dab  00000000  00000000  0001fdd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009c8  00000000  00000000  00021b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ed3dc  00000000  00000000  00022548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000749  00000000  00000000  0010f924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00025fcf  00000000  00000000  0011006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013603c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003158  00000000  00000000  00136080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20004070 	.word	0x20004070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005004 	.word	0x08005004

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20004074 	.word	0x20004074
 800021c:	08005004 	.word	0x08005004

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c0:	480d      	ldr	r0, [pc, #52]	@ (80002f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480d      	ldr	r0, [pc, #52]	@ (80002fc <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490e      	ldr	r1, [pc, #56]	@ (8000300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000304 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	@ (8000308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0b      	ldr	r4, [pc, #44]	@ (800030c <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002ea:	f000 fe3d 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ee:	f003 fe8f 	bl	8004010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002f2:	f000 f9df 	bl	80006b4 <main>

080002f6 <LoopForever>:

LoopForever:
    b LoopForever
 80002f6:	e7fe      	b.n	80002f6 <LoopForever>
  ldr   r0, =_estack
 80002f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20004070 	.word	0x20004070
  ldr r2, =_sidata
 8000304:	08005140 	.word	0x08005140
  ldr r2, =_sbss
 8000308:	20004070 	.word	0x20004070
  ldr r4, =_ebss
 800030c:	20008350 	.word	0x20008350

08000310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC1_2_IRQHandler>

08000312 <cal_crc>:

#define SPI1_Process_DBG_PORT					GPIOB


uint16_t cal_crc(const uint8_t *pBuffer,int pSize)
{
 8000312:	b480      	push	{r7}
 8000314:	b087      	sub	sp, #28
 8000316:	af00      	add	r7, sp, #0
 8000318:	6078      	str	r0, [r7, #4]
 800031a:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF;
 800031c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000320:	82fb      	strh	r3, [r7, #22]
	uint8_t temp;
	for(int x=0;x<pSize;x++)
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
 8000326:	e00c      	b.n	8000342 <cal_crc+0x30>
	{
			temp = pBuffer[x];
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	4413      	add	r3, r2
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	73fb      	strb	r3, [r7, #15]
			crc -= temp;
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	b29b      	uxth	r3, r3
 8000336:	8afa      	ldrh	r2, [r7, #22]
 8000338:	1ad3      	subs	r3, r2, r3
 800033a:	82fb      	strh	r3, [r7, #22]
	for(int x=0;x<pSize;x++)
 800033c:	693b      	ldr	r3, [r7, #16]
 800033e:	3301      	adds	r3, #1
 8000340:	613b      	str	r3, [r7, #16]
 8000342:	693a      	ldr	r2, [r7, #16]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	429a      	cmp	r2, r3
 8000348:	dbee      	blt.n	8000328 <cal_crc+0x16>
	}

	return crc;
 800034a:	8afb      	ldrh	r3, [r7, #22]
}
 800034c:	4618      	mov	r0, r3
 800034e:	371c      	adds	r7, #28
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <Process_Buffer>:
	uint16_t crc;
}SPI_Transfer_Base_t;
#pragma pack(pop)

uint16_t Process_Buffer()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0
	// all good!
	SPI_Transfer_Status.Process.Begin_Counter++;
 800035e:	4b30      	ldr	r3, [pc, #192]	@ (8000420 <Process_Buffer+0xc8>)
 8000360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000362:	3301      	adds	r3, #1
 8000364:	4a2e      	ldr	r2, [pc, #184]	@ (8000420 <Process_Buffer+0xc8>)
 8000366:	6293      	str	r3, [r2, #40]	@ 0x28

	SPI_Transfer_Base_t *packet = (SPI_Transfer_Base_t *)aRxBuffer;
 8000368:	4b2e      	ldr	r3, [pc, #184]	@ (8000424 <Process_Buffer+0xcc>)
 800036a:	60fb      	str	r3, [r7, #12]

	uint16_t Errors=0;
 800036c:	2300      	movs	r3, #0
 800036e:	82fb      	strh	r3, [r7, #22]
	int Length_Ok=0;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
	int CRC_Ok=0;
 8000374:	2300      	movs	r3, #0
 8000376:	60bb      	str	r3, [r7, #8]

	if(packet->payload.length>sizeof(SPI_Transfer_Base_t))
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	b29b      	uxth	r3, r3
 800037e:	f640 6205 	movw	r2, #3589	@ 0xe05
 8000382:	4293      	cmp	r3, r2
 8000384:	d907      	bls.n	8000396 <Process_Buffer+0x3e>
	{
		Errors=0x0001;
 8000386:	2301      	movs	r3, #1
 8000388:	82fb      	strh	r3, [r7, #22]
		SPI_Transfer_Status.Process.Length_Max_Error++;
 800038a:	4b25      	ldr	r3, [pc, #148]	@ (8000420 <Process_Buffer+0xc8>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038e:	3301      	adds	r3, #1
 8000390:	4a23      	ldr	r2, [pc, #140]	@ (8000420 <Process_Buffer+0xc8>)
 8000392:	6313      	str	r3, [r2, #48]	@ 0x30
 8000394:	e018      	b.n	80003c8 <Process_Buffer+0x70>
	}
	else
	{
		int bytes_rx_in_DMA = SPI_TX_RX_BUFFERSIZE - hspi1.hdmarx->Instance->CNDTR;
 8000396:	4b24      	ldr	r3, [pc, #144]	@ (8000428 <Process_Buffer+0xd0>)
 8000398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	f5c3 4380 	rsb	r3, r3, #16384	@ 0x4000
 80003a2:	607b      	str	r3, [r7, #4]
		if(packet->payload.length == (bytes_rx_in_DMA)-2)
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	b29b      	uxth	r3, r3
 80003aa:	461a      	mov	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3b02      	subs	r3, #2
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d102      	bne.n	80003ba <Process_Buffer+0x62>
		{
			Length_Ok=1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	613b      	str	r3, [r7, #16]
 80003b8:	e006      	b.n	80003c8 <Process_Buffer+0x70>
		}
		else
		{
			Errors=0x0002;
 80003ba:	2302      	movs	r3, #2
 80003bc:	82fb      	strh	r3, [r7, #22]
			SPI_Transfer_Status.Process.Length_DMA_Count_Error++;
 80003be:	4b18      	ldr	r3, [pc, #96]	@ (8000420 <Process_Buffer+0xc8>)
 80003c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003c2:	3301      	adds	r3, #1
 80003c4:	4a16      	ldr	r2, [pc, #88]	@ (8000420 <Process_Buffer+0xc8>)
 80003c6:	6353      	str	r3, [r2, #52]	@ 0x34
		}
	}


	if(Length_Ok)
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d01d      	beq.n	800040a <Process_Buffer+0xb2>
	{
		// ok packet length rx'f matches the DMA counter
		uint16_t rx_crc = cal_crc((uint8_t*)&packet->payload,packet->payload.length);
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	881b      	ldrh	r3, [r3, #0]
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	4619      	mov	r1, r3
 80003d8:	4610      	mov	r0, r2
 80003da:	f7ff ff9a 	bl	8000312 <cal_crc>
 80003de:	4603      	mov	r3, r0
 80003e0:	807b      	strh	r3, [r7, #2]

		if(packet->crc == rx_crc)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	f8b3 3e03 	ldrh.w	r3, [r3, #3587]	@ 0xe03
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	887a      	ldrh	r2, [r7, #2]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d107      	bne.n	8000400 <Process_Buffer+0xa8>
		{
			CRC_Ok=1;
 80003f0:	2301      	movs	r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
			SPI_Transfer_Status.Process.CRC_OK_Counter++;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000420 <Process_Buffer+0xc8>)
 80003f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003f8:	3301      	adds	r3, #1
 80003fa:	4a09      	ldr	r2, [pc, #36]	@ (8000420 <Process_Buffer+0xc8>)
 80003fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80003fe:	e004      	b.n	800040a <Process_Buffer+0xb2>
		}
		else
		{
			SPI_Transfer_Status.Process.CRC_Error_Counter++;
 8000400:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <Process_Buffer+0xc8>)
 8000402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000404:	3301      	adds	r3, #1
 8000406:	4a06      	ldr	r2, [pc, #24]	@ (8000420 <Process_Buffer+0xc8>)
 8000408:	6393      	str	r3, [r2, #56]	@ 0x38
		}
	}

	SPI_Transfer_Status.Process.End_Counter++;
 800040a:	4b05      	ldr	r3, [pc, #20]	@ (8000420 <Process_Buffer+0xc8>)
 800040c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800040e:	3301      	adds	r3, #1
 8000410:	4a03      	ldr	r2, [pc, #12]	@ (8000420 <Process_Buffer+0xc8>)
 8000412:	62d3      	str	r3, [r2, #44]	@ 0x2c

	return Errors;
 8000414:	8afb      	ldrh	r3, [r7, #22]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200081b4 	.word	0x200081b4
 8000424:	200041b0 	.word	0x200041b0
 8000428:	2000408c 	.word	0x2000408c

0800042c <SPI1_TEST_SEND>:

HAL_StatusTypeDef SPI1_TEST_SEND(int pRandom)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	f6ad 6d24 	subw	sp, sp, #3620	@ 0xe24
 8000432:	af00      	add	r7, sp, #0
 8000434:	f507 6362 	add.w	r3, r7, #3616	@ 0xe20
 8000438:	f6a3 631c 	subw	r3, r3, #3612	@ 0xe1c
 800043c:	6018      	str	r0, [r3, #0]

	HAL_GPIO_WritePin(SPI1_Process_DBG_PORT, SPI1_Process_DBG_D1_PIN, GPIO_PIN_SET); // SPI1_TEST_SEND started
 800043e:	2201      	movs	r2, #1
 8000440:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000444:	485e      	ldr	r0, [pc, #376]	@ (80005c0 <SPI1_TEST_SEND+0x194>)
 8000446:	f001 fdbd 	bl	8001fc4 <HAL_GPIO_WritePin>
	static uint32_t tx_counter;
	//memset(aRxBuffer,0xFF,sizeof(aRxBuffer));
	//memset(aTxBuffer,0,sizeof(aTxBuffer));

	SPI_Transfer_Base_t packet = {};
 800044a:	f507 6362 	add.w	r3, r7, #3616	@ 0xe20
 800044e:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 8000452:	4618      	mov	r0, r3
 8000454:	f640 6305 	movw	r3, #3589	@ 0xe05
 8000458:	461a      	mov	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f003 fd83 	bl	8003f66 <memset>

	if(pRandom)
 8000460:	f507 6362 	add.w	r3, r7, #3616	@ 0xe20
 8000464:	f6a3 631c 	subw	r3, r3, #3612	@ 0xe1c
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d03f      	beq.n	80004ee <SPI1_TEST_SEND+0xc2>
	{
		// random payload
		packet.payload.buffer[4]=tx_counter>>0;
 800046e:	4b55      	ldr	r3, [pc, #340]	@ (80005c4 <SPI1_TEST_SEND+0x198>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	b2da      	uxtb	r2, r3
 8000474:	f507 6362 	add.w	r3, r7, #3616	@ 0xe20
 8000478:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 800047c:	71da      	strb	r2, [r3, #7]
		packet.payload.buffer[5]=tx_counter>>8;
 800047e:	4b51      	ldr	r3, [pc, #324]	@ (80005c4 <SPI1_TEST_SEND+0x198>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	b2da      	uxtb	r2, r3
 8000486:	f507 6362 	add.w	r3, r7, #3616	@ 0xe20
 800048a:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 800048e:	721a      	strb	r2, [r3, #8]
		packet.payload.buffer[6]=tx_counter>>16;
 8000490:	4b4c      	ldr	r3, [pc, #304]	@ (80005c4 <SPI1_TEST_SEND+0x198>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	0c1b      	lsrs	r3, r3, #16
 8000496:	b2da      	uxtb	r2, r3
 8000498:	f507 6362 	add.w	r3, r7, #3616	@ 0xe20
 800049c:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 80004a0:	725a      	strb	r2, [r3, #9]
		packet.payload.buffer[7]=tx_counter>>24;
 80004a2:	4b48      	ldr	r3, [pc, #288]	@ (80005c4 <SPI1_TEST_SEND+0x198>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	0e1b      	lsrs	r3, r3, #24
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	f507 6362 	add.w	r3, r7, #3616	@ 0xe20
 80004ae:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 80004b2:	729a      	strb	r2, [r3, #10]

		for(int x=8;x<sizeof(packet.payload.buffer);x++)
 80004b4:	2308      	movs	r3, #8
 80004b6:	f8c7 3e1c 	str.w	r3, [r7, #3612]	@ 0xe1c
 80004ba:	e012      	b.n	80004e2 <SPI1_TEST_SEND+0xb6>
		{
			packet.payload.buffer[x]=rand();
 80004bc:	f003 fbee 	bl	8003c9c <rand>
 80004c0:	4603      	mov	r3, r0
 80004c2:	b2d9      	uxtb	r1, r3
 80004c4:	f507 6362 	add.w	r3, r7, #3616	@ 0xe20
 80004c8:	f6a3 6214 	subw	r2, r3, #3604	@ 0xe14
 80004cc:	f8d7 3e1c 	ldr.w	r3, [r7, #3612]	@ 0xe1c
 80004d0:	4413      	add	r3, r2
 80004d2:	3303      	adds	r3, #3
 80004d4:	460a      	mov	r2, r1
 80004d6:	701a      	strb	r2, [r3, #0]
		for(int x=8;x<sizeof(packet.payload.buffer);x++)
 80004d8:	f8d7 3e1c 	ldr.w	r3, [r7, #3612]	@ 0xe1c
 80004dc:	3301      	adds	r3, #1
 80004de:	f8c7 3e1c 	str.w	r3, [r7, #3612]	@ 0xe1c
 80004e2:	f8d7 3e1c 	ldr.w	r3, [r7, #3612]	@ 0xe1c
 80004e6:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80004ea:	d3e7      	bcc.n	80004bc <SPI1_TEST_SEND+0x90>
 80004ec:	e00c      	b.n	8000508 <SPI1_TEST_SEND+0xdc>
		}
	}
	else
	{
		sprintf((char *)packet.payload.buffer, "Reply Message Blah Blah,%09ld,%09ld",tx_counter,HAL_GetTick());
 80004ee:	4b35      	ldr	r3, [pc, #212]	@ (80005c4 <SPI1_TEST_SEND+0x198>)
 80004f0:	681c      	ldr	r4, [r3, #0]
 80004f2:	f000 fdb3 	bl	800105c <HAL_GetTick>
 80004f6:	4602      	mov	r2, r0
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	1cd8      	adds	r0, r3, #3
 80004fe:	4613      	mov	r3, r2
 8000500:	4622      	mov	r2, r4
 8000502:	4931      	ldr	r1, [pc, #196]	@ (80005c8 <SPI1_TEST_SEND+0x19c>)
 8000504:	f003 fcca 	bl	8003e9c <siprintf>
	}

	packet.payload.length = sizeof(packet)-2;
 8000508:	f507 6362 	add.w	r3, r7, #3616	@ 0xe20
 800050c:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 8000510:	f640 6203 	movw	r2, #3587	@ 0xe03
 8000514:	801a      	strh	r2, [r3, #0]
	packet.crc = cal_crc((const uint8_t *)&packet.payload, packet.payload.length);
 8000516:	f507 6362 	add.w	r3, r7, #3616	@ 0xe20
 800051a:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	4611      	mov	r1, r2
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff fef2 	bl	8000312 <cal_crc>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	f507 6362 	add.w	r3, r7, #3616	@ 0xe20
 8000536:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 800053a:	f8a3 2e03 	strh.w	r2, [r3, #3587]	@ 0xe03

	tx_counter++;
 800053e:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <SPI1_TEST_SEND+0x198>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a1f      	ldr	r2, [pc, #124]	@ (80005c4 <SPI1_TEST_SEND+0x198>)
 8000546:	6013      	str	r3, [r2, #0]

	uint8_t* byte_ptr=(uint8_t*)&packet;
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14

	for(int x=0;x<sizeof(packet);x++)
 8000550:	2300      	movs	r3, #0
 8000552:	f8c7 3e18 	str.w	r3, [r7, #3608]	@ 0xe18
 8000556:	e010      	b.n	800057a <SPI1_TEST_SEND+0x14e>
	{
		aTxBuffer[x]=byte_ptr[x];
 8000558:	f8d7 3e18 	ldr.w	r3, [r7, #3608]	@ 0xe18
 800055c:	f8d7 2e14 	ldr.w	r2, [r7, #3604]	@ 0xe14
 8000560:	4413      	add	r3, r2
 8000562:	7819      	ldrb	r1, [r3, #0]
 8000564:	4a19      	ldr	r2, [pc, #100]	@ (80005cc <SPI1_TEST_SEND+0x1a0>)
 8000566:	f8d7 3e18 	ldr.w	r3, [r7, #3608]	@ 0xe18
 800056a:	4413      	add	r3, r2
 800056c:	460a      	mov	r2, r1
 800056e:	701a      	strb	r2, [r3, #0]
	for(int x=0;x<sizeof(packet);x++)
 8000570:	f8d7 3e18 	ldr.w	r3, [r7, #3608]	@ 0xe18
 8000574:	3301      	adds	r3, #1
 8000576:	f8c7 3e18 	str.w	r3, [r7, #3608]	@ 0xe18
 800057a:	f8d7 3e18 	ldr.w	r3, [r7, #3608]	@ 0xe18
 800057e:	f640 6204 	movw	r2, #3588	@ 0xe04
 8000582:	4293      	cmp	r3, r2
 8000584:	d9e8      	bls.n	8000558 <SPI1_TEST_SEND+0x12c>
	}

	HAL_StatusTypeDef res =  HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, SPI_TX_RX_BUFFERSIZE);
 8000586:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800058a:	4a11      	ldr	r2, [pc, #68]	@ (80005d0 <SPI1_TEST_SEND+0x1a4>)
 800058c:	490f      	ldr	r1, [pc, #60]	@ (80005cc <SPI1_TEST_SEND+0x1a0>)
 800058e:	4811      	ldr	r0, [pc, #68]	@ (80005d4 <SPI1_TEST_SEND+0x1a8>)
 8000590:	f002 fbc6 	bl	8002d20 <HAL_SPI_TransmitReceive_DMA>
 8000594:	4603      	mov	r3, r0
 8000596:	f887 3e13 	strb.w	r3, [r7, #3603]	@ 0xe13

	HAL_GPIO_WritePin(SPI1_Process_DBG_PORT, SPI1_Process_DBG_D1_PIN, GPIO_PIN_RESET); // SPI1_TEST_SEND done
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005a0:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <SPI1_TEST_SEND+0x194>)
 80005a2:	f001 fd0f 	bl	8001fc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SPI1_Process_DBG_PORT, SPI1_Process_DBG_D2_PIN, GPIO_PIN_SET); // ready to RX!
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <SPI1_TEST_SEND+0x194>)
 80005ae:	f001 fd09 	bl	8001fc4 <HAL_GPIO_WritePin>

	return res;
 80005b2:	f897 3e13 	ldrb.w	r3, [r7, #3603]	@ 0xe13
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	f607 6724 	addw	r7, r7, #3620	@ 0xe24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd90      	pop	{r4, r7, pc}
 80005c0:	48000400 	.word	0x48000400
 80005c4:	200081f4 	.word	0x200081f4
 80005c8:	0800501c 	.word	0x0800501c
 80005cc:	20000000 	.word	0x20000000
 80005d0:	200041b0 	.word	0x200041b0
 80005d4:	2000408c 	.word	0x2000408c

080005d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_4)
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	2b10      	cmp	r3, #16
 80005e6:	d12b      	bne.n	8000640 <HAL_GPIO_EXTI_Callback+0x68>
	{
		if(SPI1_Get_CS())
 80005e8:	f000 f836 	bl	8000658 <SPI1_Get_CS>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d020      	beq.n	8000634 <HAL_GPIO_EXTI_Callback+0x5c>
		{
			SPI_Transfer_Status.CS_End.Interrupt_Counter++;
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x70>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	3301      	adds	r3, #1
 80005f8:	4a13      	ldr	r2, [pc, #76]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x70>)
 80005fa:	6053      	str	r3, [r2, #4]

			HAL_StatusTypeDef state_res = HAL_SPI_GetState(&hspi1);
 80005fc:	4813      	ldr	r0, [pc, #76]	@ (800064c <HAL_GPIO_EXTI_Callback+0x74>)
 80005fe:	f002 ff93 	bl	8003528 <HAL_SPI_GetState>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
			if(state_res<=(HAL_StatusTypeDef)HAL_SPI_STATE_ABORT)
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b07      	cmp	r3, #7
 800060a:	d809      	bhi.n	8000620 <HAL_GPIO_EXTI_Callback+0x48>
			{
				SPI_Transfer_Status.CS_End.States[state_res]++;
 800060c:	7bfa      	ldrb	r2, [r7, #15]
 800060e:	490e      	ldr	r1, [pc, #56]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x70>)
 8000610:	0093      	lsls	r3, r2, #2
 8000612:	440b      	add	r3, r1
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	1c59      	adds	r1, r3, #1
 8000618:	480b      	ldr	r0, [pc, #44]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x70>)
 800061a:	0093      	lsls	r3, r2, #2
 800061c:	4403      	add	r3, r0
 800061e:	6099      	str	r1, [r3, #8]
			}

			// just make this state - even if no bytes!
			wTransferState = TRANSFER_COMPLETE;
 8000620:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <HAL_GPIO_EXTI_Callback+0x78>)
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(SPI1_Process_DBG_PORT, SPI1_Process_DBG_D0_PIN, GPIO_PIN_SET); // Signal Main loop sees transfer complete
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800062c:	4809      	ldr	r0, [pc, #36]	@ (8000654 <HAL_GPIO_EXTI_Callback+0x7c>)
 800062e:	f001 fcc9 	bl	8001fc4 <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(SPI1_Process_DBG_PORT, SPI1_Process_DBG_D2_PIN, GPIO_PIN_RESET); // RX started with CS low
		}
	}
}
 8000632:	e005      	b.n	8000640 <HAL_GPIO_EXTI_Callback+0x68>
			HAL_GPIO_WritePin(SPI1_Process_DBG_PORT, SPI1_Process_DBG_D2_PIN, GPIO_PIN_RESET); // RX started with CS low
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800063a:	4806      	ldr	r0, [pc, #24]	@ (8000654 <HAL_GPIO_EXTI_Callback+0x7c>)
 800063c:	f001 fcc2 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200081b4 	.word	0x200081b4
 800064c:	2000408c 	.word	0x2000408c
 8000650:	200081b0 	.word	0x200081b0
 8000654:	48000400 	.word	0x48000400

08000658 <SPI1_Get_CS>:

int SPI1_Get_CS()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(SPI1_CS_PORT, SPI1_CS_PIN);
 800065c:	2110      	movs	r1, #16
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f001 fc97 	bl	8001f94 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
}
 8000668:	4618      	mov	r0, r3
 800066a:	bd80      	pop	{r7, pc}

0800066c <SPI1_PA4_EN_Intterrupt>:

void SPI1_PA4_EN_Intterrupt()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8000680:	2310      	movs	r3, #16
 8000682:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000684:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000688:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SPI1_CS_PORT, &GPIO_InitStruct);
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4619      	mov	r1, r3
 8000692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000696:	f001 fa19 	bl	8001acc <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(SPI1_CS_EXTI_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	200a      	movs	r0, #10
 80006a0:	f000 fe09 	bl	80012b6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(SPI1_CS_EXTI_IRQn);
 80006a4:	200a      	movs	r0, #10
 80006a6:	f000 fe20 	bl	80012ea <HAL_NVIC_EnableIRQ>
}
 80006aa:	bf00      	nop
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fc6b 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f897 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 f94b 	bl	800095c <MX_GPIO_Init>
  MX_DMA_Init();
 80006c6:	f000 f917 	bl	80008f8 <MX_DMA_Init>
  MX_SPI1_Init();
 80006ca:	f000 f8dd 	bl	8000888 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED2);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 fbe8 	bl	8000ea4 <BSP_LED_Init>
  SPI1_PA4_EN_Intterrupt();
 80006d4:	f7ff ffca 	bl	800066c <SPI1_PA4_EN_Intterrupt>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_StatusTypeDef state_res = HAL_SPI_GetState(&hspi1);
 80006d8:	483f      	ldr	r0, [pc, #252]	@ (80007d8 <main+0x124>)
 80006da:	f002 ff25 	bl	8003528 <HAL_SPI_GetState>
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]

	  if(Transfer_Init)
 80006e2:	4b3e      	ldr	r3, [pc, #248]	@ (80007dc <main+0x128>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d00c      	beq.n	8000704 <main+0x50>
	  {
		  HAL_StatusTypeDef res = SPI1_TEST_SEND(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff fe9e 	bl	800042c <SPI1_TEST_SEND>
 80006f0:	4603      	mov	r3, r0
 80006f2:	71bb      	strb	r3, [r7, #6]
		  if ( res != HAL_OK)
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <main+0x4a>
		  {
		    /* Transfer error in transmission process */
		    Error_Handler();
 80006fa:	f000 f991 	bl	8000a20 <Error_Handler>
		  }
		  Transfer_Init=0;
 80006fe:	4b37      	ldr	r3, [pc, #220]	@ (80007dc <main+0x128>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
	  }

	  while (wTransferState == TRANSFER_WAIT)
 8000704:	bf00      	nop
 8000706:	4b36      	ldr	r3, [pc, #216]	@ (80007e0 <main+0x12c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d0fb      	beq.n	8000706 <main+0x52>
	  {
	  }

	  switch (wTransferState)
 800070e:	4b34      	ldr	r3, [pc, #208]	@ (80007e0 <main+0x12c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d002      	beq.n	800071c <main+0x68>
 8000716:	2b02      	cmp	r3, #2
 8000718:	d03b      	beq.n	8000792 <main+0xde>
 800071a:	e05c      	b.n	80007d6 <main+0x122>
	  {
	    case TRANSFER_COMPLETE :
			HAL_GPIO_WritePin(SPI1_Process_DBG_PORT, SPI1_Process_DBG_D0_PIN, GPIO_PIN_RESET); // Main loop sees transfer complete
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000722:	4830      	ldr	r0, [pc, #192]	@ (80007e4 <main+0x130>)
 8000724:	f001 fc4e 	bl	8001fc4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(SPI1_Process_DBG_PORT, SPI1_Process_DBG_D3_PIN, GPIO_PIN_SET); // Process Buffer Start
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800072e:	482d      	ldr	r0, [pc, #180]	@ (80007e4 <main+0x130>)
 8000730:	f001 fc48 	bl	8001fc4 <HAL_GPIO_WritePin>
	    	Process_Buffer();
 8000734:	f7ff fe10 	bl	8000358 <Process_Buffer>
	    	HAL_GPIO_WritePin(SPI1_Process_DBG_PORT, SPI1_Process_DBG_D3_PIN, GPIO_PIN_RESET); // Process Buffer Done
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800073e:	4829      	ldr	r0, [pc, #164]	@ (80007e4 <main+0x130>)
 8000740:	f001 fc40 	bl	8001fc4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(SPI1_Process_DBG_PORT, SPI1_Process_DBG_D4_PIN, GPIO_PIN_SET); // SPI config for next packet start
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800074a:	4826      	ldr	r0, [pc, #152]	@ (80007e4 <main+0x130>)
 800074c:	f001 fc3a 	bl	8001fc4 <HAL_GPIO_WritePin>
	    	HAL_SPI_DMAStop(&hspi1);
 8000750:	4821      	ldr	r0, [pc, #132]	@ (80007d8 <main+0x124>)
 8000752:	f002 fd8b 	bl	800326c <HAL_SPI_DMAStop>
			HAL_SPI_Abort(&hspi1);
 8000756:	4820      	ldr	r0, [pc, #128]	@ (80007d8 <main+0x124>)
 8000758:	f002 fc68 	bl	800302c <HAL_SPI_Abort>
			__HAL_RCC_SPI1_FORCE_RESET();
 800075c:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <main+0x134>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	4a21      	ldr	r2, [pc, #132]	@ (80007e8 <main+0x134>)
 8000762:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000766:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_RCC_SPI1_RELEASE_RESET();
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <main+0x134>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	4a1e      	ldr	r2, [pc, #120]	@ (80007e8 <main+0x134>)
 800076e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000772:	6413      	str	r3, [r2, #64]	@ 0x40
			HAL_GPIO_WritePin(SPI1_Process_DBG_PORT, SPI1_Process_DBG_D4_PIN, GPIO_PIN_RESET); // SPI config for next packet start
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800077a:	481a      	ldr	r0, [pc, #104]	@ (80007e4 <main+0x130>)
 800077c:	f001 fc22 	bl	8001fc4 <HAL_GPIO_WritePin>

			HAL_StatusTypeDef res = SPI1_TEST_SEND(1);
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff fe53 	bl	800042c <SPI1_TEST_SEND>
 8000786:	4603      	mov	r3, r0
 8000788:	717b      	strb	r3, [r7, #5]

			wTransferState = TRANSFER_PROCESSED;
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <main+0x12c>)
 800078c:	2203      	movs	r2, #3
 800078e:	601a      	str	r2, [r3, #0]
	      break;
 8000790:	e021      	b.n	80007d6 <main+0x122>

	    case TRANSFER_ERROR:
	    	SPI_Transfer_Status.HAL_Error_Counter++;
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <main+0x138>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	4a14      	ldr	r2, [pc, #80]	@ (80007ec <main+0x138>)
 800079a:	6013      	str	r3, [r2, #0]
			wTransferState = TRANSFER_PROCESSED;
 800079c:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <main+0x12c>)
 800079e:	2203      	movs	r2, #3
 80007a0:	601a      	str	r2, [r3, #0]

			// https://community.st.com/t5/stm32-mcus-products/restart-spi-dma-transmission/td-p/637909
			HAL_SPI_DMAStop(&hspi1);
 80007a2:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <main+0x124>)
 80007a4:	f002 fd62 	bl	800326c <HAL_SPI_DMAStop>
			__HAL_RCC_SPI1_FORCE_RESET();
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <main+0x134>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	4a0e      	ldr	r2, [pc, #56]	@ (80007e8 <main+0x134>)
 80007ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b2:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_RCC_SPI1_RELEASE_RESET();
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <main+0x134>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	4a0b      	ldr	r2, [pc, #44]	@ (80007e8 <main+0x134>)
 80007ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
			HAL_SPI_DeInit(&hspi1);
 80007c0:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <main+0x124>)
 80007c2:	f002 fa84 	bl	8002cce <HAL_SPI_DeInit>
			MX_SPI1_Init();
 80007c6:	f000 f85f 	bl	8000888 <MX_SPI1_Init>
			SPI1_PA4_EN_Intterrupt();
 80007ca:	f7ff ff4f 	bl	800066c <SPI1_PA4_EN_Intterrupt>

			Transfer_Init=1;
 80007ce:	4b03      	ldr	r3, [pc, #12]	@ (80007dc <main+0x128>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	601a      	str	r2, [r3, #0]
	      break;
 80007d4:	bf00      	nop
  {
 80007d6:	e77f      	b.n	80006d8 <main+0x24>
 80007d8:	2000408c 	.word	0x2000408c
 80007dc:	20004000 	.word	0x20004000
 80007e0:	200081b0 	.word	0x200081b0
 80007e4:	48000400 	.word	0x48000400
 80007e8:	40021000 	.word	0x40021000
 80007ec:	200081b4 	.word	0x200081b4

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	@ 0x50
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2238      	movs	r2, #56	@ 0x38
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 fbb1 	bl	8003f66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000812:	2000      	movs	r0, #0
 8000814:	f001 fc06 	bl	8002024 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000818:	2302      	movs	r3, #2
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000820:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000822:	2340      	movs	r3, #64	@ 0x40
 8000824:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082a:	2302      	movs	r3, #2
 800082c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800082e:	2304      	movs	r3, #4
 8000830:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000832:	2355      	movs	r3, #85	@ 0x55
 8000834:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000836:	2302      	movs	r3, #2
 8000838:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800083a:	2302      	movs	r3, #2
 800083c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800083e:	2302      	movs	r3, #2
 8000840:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fca0 	bl	800218c <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000852:	f000 f8e5 	bl	8000a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2303      	movs	r3, #3
 800085c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2104      	movs	r1, #4
 800086e:	4618      	mov	r0, r3
 8000870:	f001 ff9e 	bl	80027b0 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800087a:	f000 f8d1 	bl	8000a20 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3750      	adds	r7, #80	@ 0x50
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800088c:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <MX_SPI1_Init+0x68>)
 800088e:	4a19      	ldr	r2, [pc, #100]	@ (80008f4 <MX_SPI1_Init+0x6c>)
 8000890:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000892:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <MX_SPI1_Init+0x68>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000898:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <MX_SPI1_Init+0x68>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800089e:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_SPI1_Init+0x68>)
 80008a0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a6:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <MX_SPI1_Init+0x68>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ac:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_SPI1_Init+0x68>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_SPI1_Init+0x68>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <MX_SPI1_Init+0x68>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_SPI1_Init+0x68>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <MX_SPI1_Init+0x68>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_SPI1_Init+0x68>)
 80008cc:	2207      	movs	r2, #7
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <MX_SPI1_Init+0x68>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_SPI1_Init+0x68>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_SPI1_Init+0x68>)
 80008de:	f002 f94b 	bl	8002b78 <HAL_SPI_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80008e8:	f000 f89a 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000408c 	.word	0x2000408c
 80008f4:	40013000 	.word	0x40013000

080008f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_DMA_Init+0x60>)
 8000900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000902:	4a15      	ldr	r2, [pc, #84]	@ (8000958 <MX_DMA_Init+0x60>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6493      	str	r3, [r2, #72]	@ 0x48
 800090a:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <MX_DMA_Init+0x60>)
 800090c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <MX_DMA_Init+0x60>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800091a:	4a0f      	ldr	r2, [pc, #60]	@ (8000958 <MX_DMA_Init+0x60>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6493      	str	r3, [r2, #72]	@ 0x48
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <MX_DMA_Init+0x60>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	200c      	movs	r0, #12
 8000934:	f000 fcbf 	bl	80012b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000938:	200c      	movs	r0, #12
 800093a:	f000 fcd6 	bl	80012ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	200d      	movs	r0, #13
 8000944:	f000 fcb7 	bl	80012b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000948:	200d      	movs	r0, #13
 800094a:	f000 fcce 	bl	80012ea <HAL_NVIC_EnableIRQ>

}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_GPIO_Init+0x78>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	4a17      	ldr	r2, [pc, #92]	@ (80009d4 <MX_GPIO_Init+0x78>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_GPIO_Init+0x78>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_GPIO_Init+0x78>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a11      	ldr	r2, [pc, #68]	@ (80009d4 <MX_GPIO_Init+0x78>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_GPIO_Init+0x78>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_SPI_DBG_D0_Pin|GPIO_SPI_DBG_D1_Pin|GPIO_SPI_DBG_D2_Pin|GPIO_SPI_DBG_D3_Pin
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80009a8:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <MX_GPIO_Init+0x7c>)
 80009aa:	f001 fb0b 	bl	8001fc4 <HAL_GPIO_WritePin>
                          |GPIO_SPI_DBG_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GPIO_SPI_DBG_D0_Pin GPIO_SPI_DBG_D1_Pin GPIO_SPI_DBG_D2_Pin GPIO_SPI_DBG_D3_Pin
                           GPIO_SPI_DBG_D4_Pin */
  GPIO_InitStruct.Pin = GPIO_SPI_DBG_D0_Pin|GPIO_SPI_DBG_D1_Pin|GPIO_SPI_DBG_D2_Pin|GPIO_SPI_DBG_D3_Pin
 80009ae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80009b2:	60fb      	str	r3, [r7, #12]
                          |GPIO_SPI_DBG_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_GPIO_Init+0x7c>)
 80009c8:	f001 f880 	bl	8001acc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000400 	.word	0x48000400

080009dc <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  static int callbacks;
  /* Turn LED2 on: Transfer in transmission/reception process is complete */


  callbacks++;
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <HAL_SPI_TxRxCpltCallback+0x20>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <HAL_SPI_TxRxCpltCallback+0x20>)
 80009ec:	6013      	str	r3, [r2, #0]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	200081f8 	.word	0x200081f8

08000a00 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <HAL_SPI_ErrorCallback+0x1c>)
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	601a      	str	r2, [r3, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	200081b0 	.word	0x200081b0

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_Off(LED2);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 fa89 	bl	8000f3c <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 fa86 	bl	8000f3c <BSP_LED_Off>
  while (1)
  {
    /* Toggle LED2 for error */
	BSP_LED_On(LED2);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f000 fa6d 	bl	8000f10 <BSP_LED_On>
    HAL_Delay(1000);
 8000a36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a3a:	f000 fb1b 	bl	8001074 <HAL_Delay>
	BSP_LED_On(LED2);
 8000a3e:	bf00      	nop
 8000a40:	e7f6      	b.n	8000a30 <Error_Handler+0x10>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a66:	4a08      	ldr	r2, [pc, #32]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a7a:	f001 fb77 	bl	800216c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	@ 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a53      	ldr	r2, [pc, #332]	@ (8000bf8 <HAL_SPI_MspInit+0x16c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	f040 80a0 	bne.w	8000bf0 <HAL_SPI_MspInit+0x164>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ab0:	4b52      	ldr	r3, [pc, #328]	@ (8000bfc <HAL_SPI_MspInit+0x170>)
 8000ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab4:	4a51      	ldr	r2, [pc, #324]	@ (8000bfc <HAL_SPI_MspInit+0x170>)
 8000ab6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000aba:	6613      	str	r3, [r2, #96]	@ 0x60
 8000abc:	4b4f      	ldr	r3, [pc, #316]	@ (8000bfc <HAL_SPI_MspInit+0x170>)
 8000abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8000bfc <HAL_SPI_MspInit+0x170>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	4a4b      	ldr	r2, [pc, #300]	@ (8000bfc <HAL_SPI_MspInit+0x170>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad4:	4b49      	ldr	r3, [pc, #292]	@ (8000bfc <HAL_SPI_MspInit+0x170>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b46      	ldr	r3, [pc, #280]	@ (8000bfc <HAL_SPI_MspInit+0x170>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae4:	4a45      	ldr	r2, [pc, #276]	@ (8000bfc <HAL_SPI_MspInit+0x170>)
 8000ae6:	f043 0302 	orr.w	r3, r3, #2
 8000aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aec:	4b43      	ldr	r3, [pc, #268]	@ (8000bfc <HAL_SPI_MspInit+0x170>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000af8:	2310      	movs	r3, #16
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b08:	2305      	movs	r3, #5
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b16:	f000 ffd9 	bl	8001acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000b1a:	2338      	movs	r3, #56	@ 0x38
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4832      	ldr	r0, [pc, #200]	@ (8000c00 <HAL_SPI_MspInit+0x174>)
 8000b36:	f000 ffc9 	bl	8001acc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000b3a:	4b32      	ldr	r3, [pc, #200]	@ (8000c04 <HAL_SPI_MspInit+0x178>)
 8000b3c:	4a32      	ldr	r2, [pc, #200]	@ (8000c08 <HAL_SPI_MspInit+0x17c>)
 8000b3e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000b40:	4b30      	ldr	r3, [pc, #192]	@ (8000c04 <HAL_SPI_MspInit+0x178>)
 8000b42:	220b      	movs	r2, #11
 8000b44:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b46:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <HAL_SPI_MspInit+0x178>)
 8000b48:	2210      	movs	r2, #16
 8000b4a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c04 <HAL_SPI_MspInit+0x178>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b52:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <HAL_SPI_MspInit+0x178>)
 8000b54:	2280      	movs	r2, #128	@ 0x80
 8000b56:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b58:	4b2a      	ldr	r3, [pc, #168]	@ (8000c04 <HAL_SPI_MspInit+0x178>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b5e:	4b29      	ldr	r3, [pc, #164]	@ (8000c04 <HAL_SPI_MspInit+0x178>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000b64:	4b27      	ldr	r3, [pc, #156]	@ (8000c04 <HAL_SPI_MspInit+0x178>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b6a:	4b26      	ldr	r3, [pc, #152]	@ (8000c04 <HAL_SPI_MspInit+0x178>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000b70:	4824      	ldr	r0, [pc, #144]	@ (8000c04 <HAL_SPI_MspInit+0x178>)
 8000b72:	f000 fbe3 	bl	800133c <HAL_DMA_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 8000b7c:	f7ff ff50 	bl	8000a20 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a20      	ldr	r2, [pc, #128]	@ (8000c04 <HAL_SPI_MspInit+0x178>)
 8000b84:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b86:	4a1f      	ldr	r2, [pc, #124]	@ (8000c04 <HAL_SPI_MspInit+0x178>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <HAL_SPI_MspInit+0x180>)
 8000b8e:	4a20      	ldr	r2, [pc, #128]	@ (8000c10 <HAL_SPI_MspInit+0x184>)
 8000b90:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <HAL_SPI_MspInit+0x180>)
 8000b94:	220a      	movs	r2, #10
 8000b96:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <HAL_SPI_MspInit+0x180>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <HAL_SPI_MspInit+0x180>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ba4:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <HAL_SPI_MspInit+0x180>)
 8000ba6:	2280      	movs	r2, #128	@ 0x80
 8000ba8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000baa:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <HAL_SPI_MspInit+0x180>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <HAL_SPI_MspInit+0x180>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <HAL_SPI_MspInit+0x180>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <HAL_SPI_MspInit+0x180>)
 8000bbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000bc4:	4811      	ldr	r0, [pc, #68]	@ (8000c0c <HAL_SPI_MspInit+0x180>)
 8000bc6:	f000 fbb9 	bl	800133c <HAL_DMA_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8000bd0:	f7ff ff26 	bl	8000a20 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <HAL_SPI_MspInit+0x180>)
 8000bd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8000bda:	4a0c      	ldr	r2, [pc, #48]	@ (8000c0c <HAL_SPI_MspInit+0x180>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2023      	movs	r0, #35	@ 0x23
 8000be6:	f000 fb66 	bl	80012b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000bea:	2023      	movs	r0, #35	@ 0x23
 8000bec:	f000 fb7d 	bl	80012ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	@ 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40013000 	.word	0x40013000
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	48000400 	.word	0x48000400
 8000c04:	200040f0 	.word	0x200040f0
 8000c08:	40020030 	.word	0x40020030
 8000c0c:	20004150 	.word	0x20004150
 8000c10:	4002001c 	.word	0x4002001c

08000c14 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a17      	ldr	r2, [pc, #92]	@ (8000c80 <HAL_SPI_MspDeInit+0x6c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d127      	bne.n	8000c76 <HAL_SPI_MspDeInit+0x62>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */
    /* Reset peripherals */
    __HAL_RCC_SPI1_FORCE_RESET();
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <HAL_SPI_MspDeInit+0x70>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	4a16      	ldr	r2, [pc, #88]	@ (8000c84 <HAL_SPI_MspDeInit+0x70>)
 8000c2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c30:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_RCC_SPI1_RELEASE_RESET();
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_SPI_MspDeInit+0x70>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a13      	ldr	r2, [pc, #76]	@ (8000c84 <HAL_SPI_MspDeInit+0x70>)
 8000c38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <HAL_SPI_MspDeInit+0x70>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c42:	4a10      	ldr	r2, [pc, #64]	@ (8000c84 <HAL_SPI_MspDeInit+0x70>)
 8000c44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c48:	6613      	str	r3, [r2, #96]	@ 0x60
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c50:	f001 f8be 	bl	8001dd0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8000c54:	2138      	movs	r1, #56	@ 0x38
 8000c56:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <HAL_SPI_MspDeInit+0x74>)
 8000c58:	f001 f8ba 	bl	8001dd0 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmatx);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fc13 	bl	800148c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fc0e 	bl	800148c <HAL_DMA_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8000c70:	2023      	movs	r0, #35	@ 0x23
 8000c72:	f000 fb48 	bl	8001306 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN SPI1_MspDeInit 1 */

    /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40013000 	.word	0x40013000
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000400 	.word	0x48000400

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	bf00      	nop
 8000ca0:	e7fd      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc2:	f000 f9b9 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <DMA1_Channel2_IRQHandler+0x10>)
 8000cd2:	f000 fdac 	bl	800182e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20004150 	.word	0x20004150

08000ce0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <DMA1_Channel3_IRQHandler+0x10>)
 8000ce6:	f000 fda2 	bl	800182e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200040f0 	.word	0x200040f0

08000cf4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <SPI1_IRQHandler+0x10>)
 8000cfa:	f002 faf7 	bl	80032ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000408c 	.word	0x2000408c

08000d08 <EXTI4_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI4_IRQHandler(void)   // <----- The ISR Function We're Looking For!
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000d0c:	2010      	movs	r0, #16
 8000d0e:	f001 f971 	bl	8001ff4 <HAL_GPIO_EXTI_IRQHandler>
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  return 1;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_kill>:

int _kill(int pid, int sig)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d30:	f003 f968 	bl	8004004 <__errno>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2216      	movs	r2, #22
 8000d38:	601a      	str	r2, [r3, #0]
  return -1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <_exit>:

void _exit (int status)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffe7 	bl	8000d26 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <_exit+0x12>

08000d5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e00a      	b.n	8000d84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d6e:	f3af 8000 	nop.w
 8000d72:	4601      	mov	r1, r0
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	60ba      	str	r2, [r7, #8]
 8000d7a:	b2ca      	uxtb	r2, r1
 8000d7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf0      	blt.n	8000d6e <_read+0x12>
  }

  return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e009      	b.n	8000dbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	60ba      	str	r2, [r7, #8]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf1      	blt.n	8000da8 <_write+0x12>
  }
  return len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_close>:

int _close(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000df6:	605a      	str	r2, [r3, #4]
  return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <_isatty>:

int _isatty(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e40:	4a14      	ldr	r2, [pc, #80]	@ (8000e94 <_sbrk+0x5c>)
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <_sbrk+0x60>)
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e4c:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <_sbrk+0x64>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <_sbrk+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d207      	bcs.n	8000e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e68:	f003 f8cc 	bl	8004004 <__errno>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	220c      	movs	r2, #12
 8000e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	e009      	b.n	8000e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <_sbrk+0x64>)
 8000e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20020000 	.word	0x20020000
 8000e98:	00000400 	.word	0x00000400
 8000e9c:	200081fc 	.word	0x200081fc
 8000ea0:	20008350 	.word	0x20008350

08000ea4 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000eae:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <BSP_LED_Init+0x64>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	4a15      	ldr	r2, [pc, #84]	@ (8000f08 <BSP_LED_Init+0x64>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eba:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <BSP_LED_Init+0x64>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000ec6:	2320      	movs	r3, #32
 8000ec8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8000f0c <BSP_LED_Init+0x68>)
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	f107 020c 	add.w	r2, r7, #12
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fdf1 	bl	8001acc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4a07      	ldr	r2, [pc, #28]	@ (8000f0c <BSP_LED_Init+0x68>)
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 f864 	bl	8001fc4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	20004004 	.word	0x20004004

08000f10 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	4a06      	ldr	r2, [pc, #24]	@ (8000f38 <BSP_LED_On+0x28>)
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	2120      	movs	r1, #32
 8000f24:	2201      	movs	r2, #1
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 f84c 	bl	8001fc4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20004004 	.word	0x20004004

08000f3c <BSP_LED_Off>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	4a06      	ldr	r2, [pc, #24]	@ (8000f64 <BSP_LED_Off+0x28>)
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	2120      	movs	r1, #32
 8000f50:	2200      	movs	r2, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 f836 	bl	8001fc4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20004004 	.word	0x20004004

08000f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <SystemInit+0x28>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f72:	4a07      	ldr	r2, [pc, #28]	@ (8000f90 <SystemInit+0x28>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <SystemInit+0x28>)
 8000f7e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f82:	609a      	str	r2, [r3, #8]
#endif
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f000 f97e 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 f80d 	bl	8000fc4 <HAL_InitTick>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	e001      	b.n	8000fba <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb6:	f7ff fd45 	bl	8000a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fba:	79fb      	ldrb	r3, [r7, #7]

}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <HAL_InitTick+0x68>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d022      	beq.n	800101e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <HAL_InitTick+0x6c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b13      	ldr	r3, [pc, #76]	@ (800102c <HAL_InitTick+0x68>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f998 	bl	8001322 <HAL_SYSTICK_Config>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10f      	bne.n	8001018 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	d809      	bhi.n	8001012 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffe:	2200      	movs	r2, #0
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	f04f 30ff 	mov.w	r0, #4294967295
 8001006:	f000 f956 	bl	80012b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <HAL_InitTick+0x70>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	e007      	b.n	8001022 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e004      	b.n	8001022 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e001      	b.n	8001022 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20004010 	.word	0x20004010
 8001030:	20004008 	.word	0x20004008
 8001034:	2000400c 	.word	0x2000400c

08001038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <HAL_IncTick+0x1c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_IncTick+0x20>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4413      	add	r3, r2
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <HAL_IncTick+0x1c>)
 8001048:	6013      	str	r3, [r2, #0]
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	20008200 	.word	0x20008200
 8001058:	20004010 	.word	0x20004010

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	@ (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20008200 	.word	0x20008200

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d004      	beq.n	8001098 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <HAL_Delay+0x40>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	4413      	add	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001098:	bf00      	nop
 800109a:	f7ff ffdf 	bl	800105c <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d8f7      	bhi.n	800109a <HAL_Delay+0x26>
  {
  }
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20004010 	.word	0x20004010

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	@ (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db12      	blt.n	8001190 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	490a      	ldr	r1, [pc, #40]	@ (800119c <__NVIC_DisableIRQ+0x44>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	3320      	adds	r3, #32
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001184:	f3bf 8f4f 	dsb	sy
}
 8001188:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800118a:	f3bf 8f6f 	isb	sy
}
 800118e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	@ (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	@ (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	@ 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	@ 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f7ff ff8e 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	@ (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff05 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012c4:	f7ff ff1c 	bl	8001100 <__NVIC_GetPriorityGrouping>
 80012c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f7ff ff90 	bl	80011f4 <NVIC_EncodePriority>
 80012d4:	4602      	mov	r2, r0
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff5f 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff0f 	bl	800111c <__NVIC_EnableIRQ>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff1f 	bl	8001158 <__NVIC_DisableIRQ>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ff96 	bl	800125c <SysTick_Config>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e08d      	b.n	800146a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	4b47      	ldr	r3, [pc, #284]	@ (8001474 <HAL_DMA_Init+0x138>)
 8001356:	429a      	cmp	r2, r3
 8001358:	d80f      	bhi.n	800137a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	4b45      	ldr	r3, [pc, #276]	@ (8001478 <HAL_DMA_Init+0x13c>)
 8001362:	4413      	add	r3, r2
 8001364:	4a45      	ldr	r2, [pc, #276]	@ (800147c <HAL_DMA_Init+0x140>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	009a      	lsls	r2, r3, #2
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a42      	ldr	r2, [pc, #264]	@ (8001480 <HAL_DMA_Init+0x144>)
 8001376:	641a      	str	r2, [r3, #64]	@ 0x40
 8001378:	e00e      	b.n	8001398 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b40      	ldr	r3, [pc, #256]	@ (8001484 <HAL_DMA_Init+0x148>)
 8001382:	4413      	add	r3, r2
 8001384:	4a3d      	ldr	r2, [pc, #244]	@ (800147c <HAL_DMA_Init+0x140>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	009a      	lsls	r2, r3, #2
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a3c      	ldr	r2, [pc, #240]	@ (8001488 <HAL_DMA_Init+0x14c>)
 8001396:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2202      	movs	r2, #2
 800139c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80013ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 fb0c 	bl	8001a08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80013f8:	d102      	bne.n	8001400 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001414:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d010      	beq.n	8001440 <HAL_DMA_Init+0x104>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b04      	cmp	r3, #4
 8001424:	d80c      	bhi.n	8001440 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 fb2c 	bl	8001a84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	e008      	b.n	8001452 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40020407 	.word	0x40020407
 8001478:	bffdfff8 	.word	0xbffdfff8
 800147c:	cccccccd 	.word	0xcccccccd
 8001480:	40020000 	.word	0x40020000
 8001484:	bffdfbf8 	.word	0xbffdfbf8
 8001488:	40020400 	.word	0x40020400

0800148c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e07b      	b.n	8001596 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0201 	bic.w	r2, r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b3a      	ldr	r3, [pc, #232]	@ (80015a0 <HAL_DMA_DeInit+0x114>)
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d80f      	bhi.n	80014da <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	4b38      	ldr	r3, [pc, #224]	@ (80015a4 <HAL_DMA_DeInit+0x118>)
 80014c2:	4413      	add	r3, r2
 80014c4:	4a38      	ldr	r2, [pc, #224]	@ (80015a8 <HAL_DMA_DeInit+0x11c>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	009a      	lsls	r2, r3, #2
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a35      	ldr	r2, [pc, #212]	@ (80015ac <HAL_DMA_DeInit+0x120>)
 80014d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80014d8:	e00e      	b.n	80014f8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b33      	ldr	r3, [pc, #204]	@ (80015b0 <HAL_DMA_DeInit+0x124>)
 80014e2:	4413      	add	r3, r2
 80014e4:	4a30      	ldr	r2, [pc, #192]	@ (80015a8 <HAL_DMA_DeInit+0x11c>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	009a      	lsls	r2, r3, #2
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a2f      	ldr	r2, [pc, #188]	@ (80015b4 <HAL_DMA_DeInit+0x128>)
 80014f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	2101      	movs	r1, #1
 800150e:	fa01 f202 	lsl.w	r2, r1, r2
 8001512:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fa77 	bl	8001a08 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800152a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00f      	beq.n	8001554 <HAL_DMA_DeInit+0xc8>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b04      	cmp	r3, #4
 800153a:	d80b      	bhi.n	8001554 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 faa1 	bl	8001a84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001552:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40020407 	.word	0x40020407
 80015a4:	bffdfff8 	.word	0xbffdfff8
 80015a8:	cccccccd 	.word	0xcccccccd
 80015ac:	40020000 	.word	0x40020000
 80015b0:	bffdfbf8 	.word	0xbffdfbf8
 80015b4:	40020400 	.word	0x40020400

080015b8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_DMA_Start_IT+0x20>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e066      	b.n	80016a6 <HAL_DMA_Start_IT+0xee>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d155      	bne.n	8001698 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0201 	bic.w	r2, r2, #1
 8001608:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 f9bb 	bl	800198c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 020e 	orr.w	r2, r2, #14
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e00f      	b.n	8001650 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0204 	bic.w	r2, r2, #4
 800163e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 020a 	orr.w	r2, r2, #10
 800164e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800166c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001680:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001684:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0201 	orr.w	r2, r2, #1
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e005      	b.n	80016a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016a0:	2302      	movs	r3, #2
 80016a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d005      	beq.n	80016d2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2204      	movs	r2, #4
 80016ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e037      	b.n	8001742 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 020e 	bic.w	r2, r2, #14
 80016e0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016f0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0201 	bic.w	r2, r2, #1
 8001700:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	f003 021f 	and.w	r2, r3, #31
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	2101      	movs	r1, #1
 8001710:	fa01 f202 	lsl.w	r2, r1, r2
 8001714:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800171e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00c      	beq.n	8001742 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001732:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001736:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001740:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d00d      	beq.n	8001794 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2204      	movs	r2, #4
 800177c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	73fb      	strb	r3, [r7, #15]
 8001792:	e047      	b.n	8001824 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 020e 	bic.w	r2, r2, #14
 80017a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	2101      	movs	r1, #1
 80017d2:	fa01 f202 	lsl.w	r2, r1, r2
 80017d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00c      	beq.n	8001804 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001802:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	4798      	blx	r3
    }
  }
  return status;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	2204      	movs	r2, #4
 8001850:	409a      	lsls	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d026      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x7a>
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d021      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	2b00      	cmp	r3, #0
 8001870:	d107      	bne.n	8001882 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0204 	bic.w	r2, r2, #4
 8001880:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	f003 021f 	and.w	r2, r3, #31
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	2104      	movs	r1, #4
 8001890:	fa01 f202 	lsl.w	r2, r1, r2
 8001894:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	2b00      	cmp	r3, #0
 800189c:	d071      	beq.n	8001982 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80018a6:	e06c      	b.n	8001982 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ac:	f003 031f 	and.w	r3, r3, #31
 80018b0:	2202      	movs	r2, #2
 80018b2:	409a      	lsls	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d02e      	beq.n	800191a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d029      	beq.n	800191a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0320 	and.w	r3, r3, #32
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10b      	bne.n	80018ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 020a 	bic.w	r2, r2, #10
 80018e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	2102      	movs	r1, #2
 80018fa:	fa01 f202 	lsl.w	r2, r1, r2
 80018fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d038      	beq.n	8001982 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001918:	e033      	b.n	8001982 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	2208      	movs	r2, #8
 8001924:	409a      	lsls	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d02a      	beq.n	8001984 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d025      	beq.n	8001984 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 020e 	bic.w	r2, r2, #14
 8001946:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f202 	lsl.w	r2, r1, r2
 800195a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001982:	bf00      	nop
 8001984:	bf00      	nop
}
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f003 021f 	and.w	r2, r3, #31
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	2101      	movs	r1, #1
 80019c4:	fa01 f202 	lsl.w	r2, r1, r2
 80019c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b10      	cmp	r3, #16
 80019d8:	d108      	bne.n	80019ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019ea:	e007      	b.n	80019fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	60da      	str	r2, [r3, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d802      	bhi.n	8001a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e001      	b.n	8001a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001a24:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	3b08      	subs	r3, #8
 8001a32:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001a34:	fba2 2303 	umull	r2, r3, r2, r3
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	009a      	lsls	r2, r3, #2
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4413      	add	r3, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a0b      	ldr	r2, [pc, #44]	@ (8001a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001a52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40020407 	.word	0x40020407
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020820 	.word	0x40020820
 8001a7c:	cccccccd 	.word	0xcccccccd
 8001a80:	40020880 	.word	0x40020880

08001a84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a08      	ldr	r2, [pc, #32]	@ (8001ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001aa6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	1000823f 	.word	0x1000823f
 8001ac8:	40020940 	.word	0x40020940

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ada:	e15a      	b.n	8001d92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 814c 	beq.w	8001d8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d005      	beq.n	8001b0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d130      	bne.n	8001b6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b42:	2201      	movs	r2, #1
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	f003 0201 	and.w	r2, r3, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d017      	beq.n	8001baa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d123      	bne.n	8001bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	6939      	ldr	r1, [r7, #16]
 8001bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0203 	and.w	r2, r3, #3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80a6 	beq.w	8001d8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c40:	4b5b      	ldr	r3, [pc, #364]	@ (8001db0 <HAL_GPIO_Init+0x2e4>)
 8001c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c44:	4a5a      	ldr	r2, [pc, #360]	@ (8001db0 <HAL_GPIO_Init+0x2e4>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c4c:	4b58      	ldr	r3, [pc, #352]	@ (8001db0 <HAL_GPIO_Init+0x2e4>)
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c58:	4a56      	ldr	r2, [pc, #344]	@ (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c82:	d01f      	beq.n	8001cc4 <HAL_GPIO_Init+0x1f8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a4c      	ldr	r2, [pc, #304]	@ (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d019      	beq.n	8001cc0 <HAL_GPIO_Init+0x1f4>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a4b      	ldr	r2, [pc, #300]	@ (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d013      	beq.n	8001cbc <HAL_GPIO_Init+0x1f0>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a4a      	ldr	r2, [pc, #296]	@ (8001dc0 <HAL_GPIO_Init+0x2f4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_GPIO_Init+0x1ec>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a49      	ldr	r2, [pc, #292]	@ (8001dc4 <HAL_GPIO_Init+0x2f8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d007      	beq.n	8001cb4 <HAL_GPIO_Init+0x1e8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a48      	ldr	r2, [pc, #288]	@ (8001dc8 <HAL_GPIO_Init+0x2fc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d101      	bne.n	8001cb0 <HAL_GPIO_Init+0x1e4>
 8001cac:	2305      	movs	r3, #5
 8001cae:	e00a      	b.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001cb0:	2306      	movs	r3, #6
 8001cb2:	e008      	b.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	e006      	b.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e004      	b.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e002      	b.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	f002 0203 	and.w	r2, r2, #3
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	4093      	lsls	r3, r2
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd6:	4937      	ldr	r1, [pc, #220]	@ (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce4:	4b39      	ldr	r3, [pc, #228]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d08:	4a30      	ldr	r2, [pc, #192]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d32:	4a26      	ldr	r2, [pc, #152]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d38:	4b24      	ldr	r3, [pc, #144]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d86:	4a11      	ldr	r2, [pc, #68]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f47f ae9d 	bne.w	8001adc <HAL_GPIO_Init+0x10>
  }
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010000 	.word	0x40010000
 8001db8:	48000400 	.word	0x48000400
 8001dbc:	48000800 	.word	0x48000800
 8001dc0:	48000c00 	.word	0x48000c00
 8001dc4:	48001000 	.word	0x48001000
 8001dc8:	48001400 	.word	0x48001400
 8001dcc:	40010400 	.word	0x40010400

08001dd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8001dde:	e0bd      	b.n	8001f5c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8001de0:	2201      	movs	r2, #1
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80b0 	beq.w	8001f56 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8001df6:	4a60      	ldr	r2, [pc, #384]	@ (8001f78 <HAL_GPIO_DeInit+0x1a8>)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4013      	ands	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e1e:	d01f      	beq.n	8001e60 <HAL_GPIO_DeInit+0x90>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a56      	ldr	r2, [pc, #344]	@ (8001f7c <HAL_GPIO_DeInit+0x1ac>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d019      	beq.n	8001e5c <HAL_GPIO_DeInit+0x8c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a55      	ldr	r2, [pc, #340]	@ (8001f80 <HAL_GPIO_DeInit+0x1b0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d013      	beq.n	8001e58 <HAL_GPIO_DeInit+0x88>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a54      	ldr	r2, [pc, #336]	@ (8001f84 <HAL_GPIO_DeInit+0x1b4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00d      	beq.n	8001e54 <HAL_GPIO_DeInit+0x84>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a53      	ldr	r2, [pc, #332]	@ (8001f88 <HAL_GPIO_DeInit+0x1b8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d007      	beq.n	8001e50 <HAL_GPIO_DeInit+0x80>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a52      	ldr	r2, [pc, #328]	@ (8001f8c <HAL_GPIO_DeInit+0x1bc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d101      	bne.n	8001e4c <HAL_GPIO_DeInit+0x7c>
 8001e48:	2305      	movs	r3, #5
 8001e4a:	e00a      	b.n	8001e62 <HAL_GPIO_DeInit+0x92>
 8001e4c:	2306      	movs	r3, #6
 8001e4e:	e008      	b.n	8001e62 <HAL_GPIO_DeInit+0x92>
 8001e50:	2304      	movs	r3, #4
 8001e52:	e006      	b.n	8001e62 <HAL_GPIO_DeInit+0x92>
 8001e54:	2303      	movs	r3, #3
 8001e56:	e004      	b.n	8001e62 <HAL_GPIO_DeInit+0x92>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_DeInit+0x92>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_GPIO_DeInit+0x92>
 8001e60:	2300      	movs	r3, #0
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	f002 0203 	and.w	r2, r2, #3
 8001e68:	0092      	lsls	r2, r2, #2
 8001e6a:	4093      	lsls	r3, r2
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d132      	bne.n	8001ed8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001e72:	4b47      	ldr	r3, [pc, #284]	@ (8001f90 <HAL_GPIO_DeInit+0x1c0>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4945      	ldr	r1, [pc, #276]	@ (8001f90 <HAL_GPIO_DeInit+0x1c0>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001e80:	4b43      	ldr	r3, [pc, #268]	@ (8001f90 <HAL_GPIO_DeInit+0x1c0>)
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	4941      	ldr	r1, [pc, #260]	@ (8001f90 <HAL_GPIO_DeInit+0x1c0>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001e8e:	4b40      	ldr	r3, [pc, #256]	@ (8001f90 <HAL_GPIO_DeInit+0x1c0>)
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	493e      	ldr	r1, [pc, #248]	@ (8001f90 <HAL_GPIO_DeInit+0x1c0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001e9c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f90 <HAL_GPIO_DeInit+0x1c0>)
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	493a      	ldr	r1, [pc, #232]	@ (8001f90 <HAL_GPIO_DeInit+0x1c0>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001eba:	4a2f      	ldr	r2, [pc, #188]	@ (8001f78 <HAL_GPIO_DeInit+0x1a8>)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	482b      	ldr	r0, [pc, #172]	@ (8001f78 <HAL_GPIO_DeInit+0x1a8>)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2103      	movs	r1, #3
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	08d2      	lsrs	r2, r2, #3
 8001f0c:	4019      	ands	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2103      	movs	r1, #3
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	401a      	ands	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	2101      	movs	r1, #1
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2103      	movs	r1, #3
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	401a      	ands	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f47f af3b 	bne.w	8001de0 <HAL_GPIO_DeInit+0x10>
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	48000400 	.word	0x48000400
 8001f80:	48000800 	.word	0x48000800
 8001f84:	48000c00 	.word	0x48000c00
 8001f88:	48001000 	.word	0x48001000
 8001f8c:	48001400 	.word	0x48001400
 8001f90:	40010400 	.word	0x40010400

08001f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e001      	b.n	8001fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800200a:	4a05      	ldr	r2, [pc, #20]	@ (8002020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fae0 	bl	80005d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40010400 	.word	0x40010400

08002024 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d141      	bne.n	80020b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002032:	4b4b      	ldr	r3, [pc, #300]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203e:	d131      	bne.n	80020a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002040:	4b47      	ldr	r3, [pc, #284]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002046:	4a46      	ldr	r2, [pc, #280]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800204c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002050:	4b43      	ldr	r3, [pc, #268]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002058:	4a41      	ldr	r2, [pc, #260]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800205e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002060:	4b40      	ldr	r3, [pc, #256]	@ (8002164 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2232      	movs	r2, #50	@ 0x32
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	4a3f      	ldr	r2, [pc, #252]	@ (8002168 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	0c9b      	lsrs	r3, r3, #18
 8002072:	3301      	adds	r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002076:	e002      	b.n	800207e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3b01      	subs	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800207e:	4b38      	ldr	r3, [pc, #224]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800208a:	d102      	bne.n	8002092 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f2      	bne.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002092:	4b33      	ldr	r3, [pc, #204]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800209e:	d158      	bne.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e057      	b.n	8002154 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020b4:	e04d      	b.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020bc:	d141      	bne.n	8002142 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020be:	4b28      	ldr	r3, [pc, #160]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ca:	d131      	bne.n	8002130 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020cc:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020d2:	4a23      	ldr	r2, [pc, #140]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020dc:	4b20      	ldr	r3, [pc, #128]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2232      	movs	r2, #50	@ 0x32
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002168 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	0c9b      	lsrs	r3, r3, #18
 80020fe:	3301      	adds	r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002102:	e002      	b.n	800210a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3b01      	subs	r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002116:	d102      	bne.n	800211e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f2      	bne.n	8002104 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800211e:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800212a:	d112      	bne.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e011      	b.n	8002154 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002130:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002136:	4a0a      	ldr	r2, [pc, #40]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002140:	e007      	b.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002142:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800214a:	4a05      	ldr	r2, [pc, #20]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002150:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40007000 	.word	0x40007000
 8002164:	20004008 	.word	0x20004008
 8002168:	431bde83 	.word	0x431bde83

0800216c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4a04      	ldr	r2, [pc, #16]	@ (8002188 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002176:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800217a:	6093      	str	r3, [r2, #8]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40007000 	.word	0x40007000

0800218c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e2fe      	b.n	800279c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d075      	beq.n	8002296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021aa:	4b97      	ldr	r3, [pc, #604]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b4:	4b94      	ldr	r3, [pc, #592]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	d102      	bne.n	80021ca <HAL_RCC_OscConfig+0x3e>
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d002      	beq.n	80021d0 <HAL_RCC_OscConfig+0x44>
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d10b      	bne.n	80021e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d05b      	beq.n	8002294 <HAL_RCC_OscConfig+0x108>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d157      	bne.n	8002294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e2d9      	b.n	800279c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f0:	d106      	bne.n	8002200 <HAL_RCC_OscConfig+0x74>
 80021f2:	4b85      	ldr	r3, [pc, #532]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a84      	ldr	r2, [pc, #528]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e01d      	b.n	800223c <HAL_RCC_OscConfig+0xb0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x98>
 800220a:	4b7f      	ldr	r3, [pc, #508]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a7e      	ldr	r2, [pc, #504]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 8002210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b7c      	ldr	r3, [pc, #496]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a7b      	ldr	r2, [pc, #492]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 800221c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e00b      	b.n	800223c <HAL_RCC_OscConfig+0xb0>
 8002224:	4b78      	ldr	r3, [pc, #480]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a77      	ldr	r2, [pc, #476]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 800222a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b75      	ldr	r3, [pc, #468]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a74      	ldr	r2, [pc, #464]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 8002236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800223a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d013      	beq.n	800226c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe ff0a 	bl	800105c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7fe ff06 	bl	800105c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	@ 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e29e      	b.n	800279c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800225e:	4b6a      	ldr	r3, [pc, #424]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0xc0>
 800226a:	e014      	b.n	8002296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7fe fef6 	bl	800105c <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002274:	f7fe fef2 	bl	800105c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	@ 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e28a      	b.n	800279c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002286:	4b60      	ldr	r3, [pc, #384]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0xe8>
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d075      	beq.n	800238e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a2:	4b59      	ldr	r3, [pc, #356]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ac:	4b56      	ldr	r3, [pc, #344]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	d102      	bne.n	80022c2 <HAL_RCC_OscConfig+0x136>
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d002      	beq.n	80022c8 <HAL_RCC_OscConfig+0x13c>
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d11f      	bne.n	8002308 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_OscConfig+0x154>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e25d      	b.n	800279c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e0:	4b49      	ldr	r3, [pc, #292]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	4946      	ldr	r1, [pc, #280]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022f4:	4b45      	ldr	r3, [pc, #276]	@ (800240c <HAL_RCC_OscConfig+0x280>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fe63 	bl	8000fc4 <HAL_InitTick>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d043      	beq.n	800238c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e249      	b.n	800279c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d023      	beq.n	8002358 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002310:	4b3d      	ldr	r3, [pc, #244]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a3c      	ldr	r2, [pc, #240]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 8002316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fe9e 	bl	800105c <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002324:	f7fe fe9a 	bl	800105c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e232      	b.n	800279c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002336:	4b34      	ldr	r3, [pc, #208]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b31      	ldr	r3, [pc, #196]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	061b      	lsls	r3, r3, #24
 8002350:	492d      	ldr	r1, [pc, #180]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
 8002356:	e01a      	b.n	800238e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002358:	4b2b      	ldr	r3, [pc, #172]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a2a      	ldr	r2, [pc, #168]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 800235e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe fe7a 	bl	800105c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236c:	f7fe fe76 	bl	800105c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e20e      	b.n	800279c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800237e:	4b22      	ldr	r3, [pc, #136]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x1e0>
 800238a:	e000      	b.n	800238e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800238c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d041      	beq.n	800241e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01c      	beq.n	80023dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a2:	4b19      	ldr	r3, [pc, #100]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80023a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a8:	4a17      	ldr	r2, [pc, #92]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7fe fe53 	bl	800105c <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ba:	f7fe fe4f 	bl	800105c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e1e7      	b.n	800279c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80023ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0ef      	beq.n	80023ba <HAL_RCC_OscConfig+0x22e>
 80023da:	e020      	b.n	800241e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80023de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023e2:	4a09      	ldr	r2, [pc, #36]	@ (8002408 <HAL_RCC_OscConfig+0x27c>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7fe fe36 	bl	800105c <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023f2:	e00d      	b.n	8002410 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f4:	f7fe fe32 	bl	800105c <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d906      	bls.n	8002410 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e1ca      	b.n	800279c <HAL_RCC_OscConfig+0x610>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	2000400c 	.word	0x2000400c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002410:	4b8c      	ldr	r3, [pc, #560]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 8002412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1ea      	bne.n	80023f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80a6 	beq.w	8002578 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002430:	4b84      	ldr	r3, [pc, #528]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_OscConfig+0x2b4>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x2b6>
 8002440:	2300      	movs	r3, #0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00d      	beq.n	8002462 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	4b7f      	ldr	r3, [pc, #508]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 8002448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244a:	4a7e      	ldr	r2, [pc, #504]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002450:	6593      	str	r3, [r2, #88]	@ 0x58
 8002452:	4b7c      	ldr	r3, [pc, #496]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800245e:	2301      	movs	r3, #1
 8002460:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002462:	4b79      	ldr	r3, [pc, #484]	@ (8002648 <HAL_RCC_OscConfig+0x4bc>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d118      	bne.n	80024a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800246e:	4b76      	ldr	r3, [pc, #472]	@ (8002648 <HAL_RCC_OscConfig+0x4bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a75      	ldr	r2, [pc, #468]	@ (8002648 <HAL_RCC_OscConfig+0x4bc>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247a:	f7fe fdef 	bl	800105c <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002482:	f7fe fdeb 	bl	800105c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e183      	b.n	800279c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002494:	4b6c      	ldr	r3, [pc, #432]	@ (8002648 <HAL_RCC_OscConfig+0x4bc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d108      	bne.n	80024ba <HAL_RCC_OscConfig+0x32e>
 80024a8:	4b66      	ldr	r3, [pc, #408]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ae:	4a65      	ldr	r2, [pc, #404]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024b8:	e024      	b.n	8002504 <HAL_RCC_OscConfig+0x378>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b05      	cmp	r3, #5
 80024c0:	d110      	bne.n	80024e4 <HAL_RCC_OscConfig+0x358>
 80024c2:	4b60      	ldr	r3, [pc, #384]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c8:	4a5e      	ldr	r2, [pc, #376]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024e2:	e00f      	b.n	8002504 <HAL_RCC_OscConfig+0x378>
 80024e4:	4b57      	ldr	r3, [pc, #348]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ea:	4a56      	ldr	r2, [pc, #344]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024f4:	4b53      	ldr	r3, [pc, #332]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fa:	4a52      	ldr	r2, [pc, #328]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d016      	beq.n	800253a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7fe fda6 	bl	800105c <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002512:	e00a      	b.n	800252a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe fda2 	bl	800105c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e138      	b.n	800279c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252a:	4b46      	ldr	r3, [pc, #280]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ed      	beq.n	8002514 <HAL_RCC_OscConfig+0x388>
 8002538:	e015      	b.n	8002566 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7fe fd8f 	bl	800105c <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe fd8b 	bl	800105c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e121      	b.n	800279c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002558:	4b3a      	ldr	r3, [pc, #232]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1ed      	bne.n	8002542 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002566:	7ffb      	ldrb	r3, [r7, #31]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d105      	bne.n	8002578 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256c:	4b35      	ldr	r3, [pc, #212]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002570:	4a34      	ldr	r2, [pc, #208]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 8002572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002576:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d03c      	beq.n	80025fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01c      	beq.n	80025c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800258c:	4b2d      	ldr	r3, [pc, #180]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 800258e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002592:	4a2c      	ldr	r2, [pc, #176]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7fe fd5e 	bl	800105c <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a4:	f7fe fd5a 	bl	800105c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e0f2      	b.n	800279c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025b6:	4b23      	ldr	r3, [pc, #140]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80025b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ef      	beq.n	80025a4 <HAL_RCC_OscConfig+0x418>
 80025c4:	e01b      	b.n	80025fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80025c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7fe fd41 	bl	800105c <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025de:	f7fe fd3d 	bl	800105c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e0d5      	b.n	800279c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025f0:	4b14      	ldr	r3, [pc, #80]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 80025f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1ef      	bne.n	80025de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80c9 	beq.w	800279a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002608:	4b0e      	ldr	r3, [pc, #56]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b0c      	cmp	r3, #12
 8002612:	f000 8083 	beq.w	800271c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d15e      	bne.n	80026dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261e:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a08      	ldr	r2, [pc, #32]	@ (8002644 <HAL_RCC_OscConfig+0x4b8>)
 8002624:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7fe fd17 	bl	800105c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002630:	e00c      	b.n	800264c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002632:	f7fe fd13 	bl	800105c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d905      	bls.n	800264c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e0ab      	b.n	800279c <HAL_RCC_OscConfig+0x610>
 8002644:	40021000 	.word	0x40021000
 8002648:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264c:	4b55      	ldr	r3, [pc, #340]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ec      	bne.n	8002632 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002658:	4b52      	ldr	r3, [pc, #328]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	4b52      	ldr	r3, [pc, #328]	@ (80027a8 <HAL_RCC_OscConfig+0x61c>)
 800265e:	4013      	ands	r3, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6a11      	ldr	r1, [r2, #32]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002668:	3a01      	subs	r2, #1
 800266a:	0112      	lsls	r2, r2, #4
 800266c:	4311      	orrs	r1, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002672:	0212      	lsls	r2, r2, #8
 8002674:	4311      	orrs	r1, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800267a:	0852      	lsrs	r2, r2, #1
 800267c:	3a01      	subs	r2, #1
 800267e:	0552      	lsls	r2, r2, #21
 8002680:	4311      	orrs	r1, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002686:	0852      	lsrs	r2, r2, #1
 8002688:	3a01      	subs	r2, #1
 800268a:	0652      	lsls	r2, r2, #25
 800268c:	4311      	orrs	r1, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002692:	06d2      	lsls	r2, r2, #27
 8002694:	430a      	orrs	r2, r1
 8002696:	4943      	ldr	r1, [pc, #268]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 8002698:	4313      	orrs	r3, r2
 800269a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800269c:	4b41      	ldr	r3, [pc, #260]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a40      	ldr	r2, [pc, #256]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 80026a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026a8:	4b3e      	ldr	r3, [pc, #248]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a3d      	ldr	r2, [pc, #244]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 80026ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fcd2 	bl	800105c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe fcce 	bl	800105c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e066      	b.n	800279c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ce:	4b35      	ldr	r3, [pc, #212]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x530>
 80026da:	e05e      	b.n	800279a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026dc:	4b31      	ldr	r3, [pc, #196]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a30      	ldr	r2, [pc, #192]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 80026e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fcb8 	bl	800105c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe fcb4 	bl	800105c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e04c      	b.n	800279c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002702:	4b28      	ldr	r3, [pc, #160]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800270e:	4b25      	ldr	r3, [pc, #148]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	4924      	ldr	r1, [pc, #144]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 8002714:	4b25      	ldr	r3, [pc, #148]	@ (80027ac <HAL_RCC_OscConfig+0x620>)
 8002716:	4013      	ands	r3, r2
 8002718:	60cb      	str	r3, [r1, #12]
 800271a:	e03e      	b.n	800279a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e039      	b.n	800279c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002728:	4b1e      	ldr	r3, [pc, #120]	@ (80027a4 <HAL_RCC_OscConfig+0x618>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f003 0203 	and.w	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	429a      	cmp	r2, r3
 800273a:	d12c      	bne.n	8002796 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	3b01      	subs	r3, #1
 8002748:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d123      	bne.n	8002796 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d11b      	bne.n	8002796 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d113      	bne.n	8002796 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	085b      	lsrs	r3, r3, #1
 800277a:	3b01      	subs	r3, #1
 800277c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d109      	bne.n	8002796 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800278c:	085b      	lsrs	r3, r3, #1
 800278e:	3b01      	subs	r3, #1
 8002790:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002792:	429a      	cmp	r2, r3
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	019f800c 	.word	0x019f800c
 80027ac:	feeefffc 	.word	0xfeeefffc

080027b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e11e      	b.n	8002a06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c8:	4b91      	ldr	r3, [pc, #580]	@ (8002a10 <HAL_RCC_ClockConfig+0x260>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d910      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b8e      	ldr	r3, [pc, #568]	@ (8002a10 <HAL_RCC_ClockConfig+0x260>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 020f 	bic.w	r2, r3, #15
 80027de:	498c      	ldr	r1, [pc, #560]	@ (8002a10 <HAL_RCC_ClockConfig+0x260>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b8a      	ldr	r3, [pc, #552]	@ (8002a10 <HAL_RCC_ClockConfig+0x260>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e106      	b.n	8002a06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d073      	beq.n	80028ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d129      	bne.n	8002860 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280c:	4b81      	ldr	r3, [pc, #516]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0f4      	b.n	8002a06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800281c:	f000 f966 	bl	8002aec <RCC_GetSysClockFreqFromPLLSource>
 8002820:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4a7c      	ldr	r2, [pc, #496]	@ (8002a18 <HAL_RCC_ClockConfig+0x268>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d93f      	bls.n	80028aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800282a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800283e:	2b00      	cmp	r3, #0
 8002840:	d033      	beq.n	80028aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002846:	2b00      	cmp	r3, #0
 8002848:	d12f      	bne.n	80028aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800284a:	4b72      	ldr	r3, [pc, #456]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002852:	4a70      	ldr	r2, [pc, #448]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 8002854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002858:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e024      	b.n	80028aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d107      	bne.n	8002878 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002868:	4b6a      	ldr	r3, [pc, #424]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0c6      	b.n	8002a06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002878:	4b66      	ldr	r3, [pc, #408]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0be      	b.n	8002a06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002888:	f000 f8ce 	bl	8002a28 <HAL_RCC_GetSysClockFreq>
 800288c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4a61      	ldr	r2, [pc, #388]	@ (8002a18 <HAL_RCC_ClockConfig+0x268>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d909      	bls.n	80028aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002896:	4b5f      	ldr	r3, [pc, #380]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800289e:	4a5d      	ldr	r2, [pc, #372]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 80028a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028a6:	2380      	movs	r3, #128	@ 0x80
 80028a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f023 0203 	bic.w	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4957      	ldr	r1, [pc, #348]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028bc:	f7fe fbce 	bl	800105c <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c2:	e00a      	b.n	80028da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c4:	f7fe fbca 	bl	800105c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e095      	b.n	8002a06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	4b4e      	ldr	r3, [pc, #312]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 020c 	and.w	r2, r3, #12
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d1eb      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d023      	beq.n	8002940 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002904:	4b43      	ldr	r3, [pc, #268]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a42      	ldr	r2, [pc, #264]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 800290a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800290e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800291c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002924:	4a3b      	ldr	r2, [pc, #236]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 8002926:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800292a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800292c:	4b39      	ldr	r3, [pc, #228]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4936      	ldr	r1, [pc, #216]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
 800293e:	e008      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b80      	cmp	r3, #128	@ 0x80
 8002944:	d105      	bne.n	8002952 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002946:	4b33      	ldr	r3, [pc, #204]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	4a32      	ldr	r2, [pc, #200]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 800294c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002950:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002952:	4b2f      	ldr	r3, [pc, #188]	@ (8002a10 <HAL_RCC_ClockConfig+0x260>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d21d      	bcs.n	800299c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002960:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <HAL_RCC_ClockConfig+0x260>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 020f 	bic.w	r2, r3, #15
 8002968:	4929      	ldr	r1, [pc, #164]	@ (8002a10 <HAL_RCC_ClockConfig+0x260>)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002970:	f7fe fb74 	bl	800105c <HAL_GetTick>
 8002974:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	e00a      	b.n	800298e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002978:	f7fe fb70 	bl	800105c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e03b      	b.n	8002a06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b20      	ldr	r3, [pc, #128]	@ (8002a10 <HAL_RCC_ClockConfig+0x260>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d1ed      	bne.n	8002978 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4917      	ldr	r1, [pc, #92]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c6:	4b13      	ldr	r3, [pc, #76]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	490f      	ldr	r1, [pc, #60]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029da:	f000 f825 	bl	8002a28 <HAL_RCC_GetSysClockFreq>
 80029de:	4602      	mov	r2, r0
 80029e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a14 <HAL_RCC_ClockConfig+0x264>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	490c      	ldr	r1, [pc, #48]	@ (8002a1c <HAL_RCC_ClockConfig+0x26c>)
 80029ec:	5ccb      	ldrb	r3, [r1, r3]
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a20 <HAL_RCC_ClockConfig+0x270>)
 80029f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <HAL_RCC_ClockConfig+0x274>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe fae0 	bl	8000fc4 <HAL_InitTick>
 8002a04:	4603      	mov	r3, r0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40022000 	.word	0x40022000
 8002a14:	40021000 	.word	0x40021000
 8002a18:	04c4b400 	.word	0x04c4b400
 8002a1c:	08005040 	.word	0x08005040
 8002a20:	20004008 	.word	0x20004008
 8002a24:	2000400c 	.word	0x2000400c

08002a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d102      	bne.n	8002a40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	e047      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a40:	4b27      	ldr	r3, [pc, #156]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d102      	bne.n	8002a52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a4c:	4b26      	ldr	r3, [pc, #152]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	e03e      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a52:	4b23      	ldr	r3, [pc, #140]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d136      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	3301      	adds	r3, #1
 8002a74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d10c      	bne.n	8002a96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	4a16      	ldr	r2, [pc, #88]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a86:	68d2      	ldr	r2, [r2, #12]
 8002a88:	0a12      	lsrs	r2, r2, #8
 8002a8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	617b      	str	r3, [r7, #20]
      break;
 8002a94:	e00c      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a96:	4a13      	ldr	r2, [pc, #76]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9e:	4a10      	ldr	r2, [pc, #64]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa0:	68d2      	ldr	r2, [r2, #12]
 8002aa2:	0a12      	lsrs	r2, r2, #8
 8002aa4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002aa8:	fb02 f303 	mul.w	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
      break;
 8002aae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	0e5b      	lsrs	r3, r3, #25
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	3301      	adds	r3, #1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	e001      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ad0:	693b      	ldr	r3, [r7, #16]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	00f42400 	.word	0x00f42400
 8002ae8:	016e3600 	.word	0x016e3600

08002aec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002af2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3301      	adds	r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d10c      	bne.n	8002b2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b10:	4a17      	ldr	r2, [pc, #92]	@ (8002b70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	4a14      	ldr	r2, [pc, #80]	@ (8002b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b1a:	68d2      	ldr	r2, [r2, #12]
 8002b1c:	0a12      	lsrs	r2, r2, #8
 8002b1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	617b      	str	r3, [r7, #20]
    break;
 8002b28:	e00c      	b.n	8002b44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b2a:	4a12      	ldr	r2, [pc, #72]	@ (8002b74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b32:	4a0e      	ldr	r2, [pc, #56]	@ (8002b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b34:	68d2      	ldr	r2, [r2, #12]
 8002b36:	0a12      	lsrs	r2, r2, #8
 8002b38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
    break;
 8002b42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b44:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	0e5b      	lsrs	r3, r3, #25
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b5e:	687b      	ldr	r3, [r7, #4]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	016e3600 	.word	0x016e3600
 8002b74:	00f42400 	.word	0x00f42400

08002b78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e09d      	b.n	8002cc6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d108      	bne.n	8002ba4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b9a:	d009      	beq.n	8002bb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
 8002ba2:	e005      	b.n	8002bb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fd ff5e 	bl	8000a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002be6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002bf0:	d902      	bls.n	8002bf8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e002      	b.n	8002bfe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c06:	d007      	beq.n	8002c18 <HAL_SPI_Init+0xa0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c10:	d002      	beq.n	8002c18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5a:	ea42 0103 	orr.w	r1, r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c62:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	0c1b      	lsrs	r3, r3, #16
 8002c74:	f003 0204 	and.w	r2, r3, #4
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002c94:	ea42 0103 	orr.w	r1, r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69da      	ldr	r2, [r3, #28]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e01a      	b.n	8002d16 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cf6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7fd ff8b 	bl	8000c14 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d34:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d00c      	beq.n	8002d5c <HAL_SPI_TransmitReceive_DMA+0x3c>
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d48:	d106      	bne.n	8002d58 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <HAL_SPI_TransmitReceive_DMA+0x38>
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d001      	beq.n	8002d5c <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e158      	b.n	800300e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e14d      	b.n	800300e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_SPI_TransmitReceive_DMA+0x60>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e146      	b.n	800300e <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d003      	beq.n	8002d9c <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2205      	movs	r2, #5
 8002d98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	887a      	ldrh	r2, [r7, #2]
 8002db2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	887a      	ldrh	r2, [r7, #2]
 8002dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	887a      	ldrh	r2, [r7, #2]
 8002dc6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8002de4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dee:	d908      	bls.n	8002e02 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	e06f      	b.n	8002ee2 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e10:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e1c:	d126      	bne.n	8002e6c <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e38:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e48:	e010      	b.n	8002e6c <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e58:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3301      	adds	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e76:	d134      	bne.n	8002ee2 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e86:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d111      	bne.n	8002ebc <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ea6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002eba:	e012      	b.n	8002ee2 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002eca:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3301      	adds	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d108      	bne.n	8002f00 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef2:	4a49      	ldr	r2, [pc, #292]	@ (8003018 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8002ef4:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	4a48      	ldr	r2, [pc, #288]	@ (800301c <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8002efc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002efe:	e007      	b.n	8002f10 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	4a46      	ldr	r2, [pc, #280]	@ (8003020 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8002f06:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0c:	4a45      	ldr	r2, [pc, #276]	@ (8003024 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8002f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f14:	4a44      	ldr	r2, [pc, #272]	@ (8003028 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8002f16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f38:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002f3a:	f7fe fb3d 	bl	80015b8 <HAL_DMA_Start_IT>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f48:	f043 0210 	orr.w	r2, r3, #16
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e058      	b.n	800300e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f78:	2200      	movs	r2, #0
 8002f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f80:	2200      	movs	r2, #0
 8002f82:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f88:	2200      	movs	r2, #0
 8002f8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f94:	4619      	mov	r1, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	330c      	adds	r3, #12
 8002f9c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002fa4:	f7fe fb08 	bl	80015b8 <HAL_DMA_Start_IT>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb2:	f043 0210 	orr.w	r2, r3, #16
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e023      	b.n	800300e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd0:	2b40      	cmp	r3, #64	@ 0x40
 8002fd2:	d007      	beq.n	8002fe4 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fe2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0220 	orr.w	r2, r2, #32
 8002ffa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0202 	orr.w	r2, r2, #2
 800300a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	0800367d 	.word	0x0800367d
 800301c:	08003545 	.word	0x08003545
 8003020:	08003699 	.word	0x08003699
 8003024:	080035ed 	.word	0x080035ed
 8003028:	080036b5 	.word	0x080036b5

0800302c <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	@ 0x28
 8003030:	af02      	add	r7, sp, #8
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003038:	4b88      	ldr	r3, [pc, #544]	@ (800325c <HAL_SPI_Abort+0x230>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a88      	ldr	r2, [pc, #544]	@ (8003260 <HAL_SPI_Abort+0x234>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0a5b      	lsrs	r3, r3, #9
 8003044:	2264      	movs	r2, #100	@ 0x64
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	617b      	str	r3, [r7, #20]
  count = resetcount;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0220 	bic.w	r2, r2, #32
 800305e:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306a:	2b80      	cmp	r3, #128	@ 0x80
 800306c:	d117      	bne.n	800309e <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a7c      	ldr	r2, [pc, #496]	@ (8003264 <HAL_SPI_Abort+0x238>)
 8003072:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003086:	e008      	b.n	800309a <HAL_SPI_Abort+0x6e>
      }
      count--;
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	3b01      	subs	r3, #1
 800308c:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b07      	cmp	r3, #7
 8003098:	d1ec      	bne.n	8003074 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a8:	2b40      	cmp	r3, #64	@ 0x40
 80030aa:	d117      	bne.n	80030dc <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003268 <HAL_SPI_Abort+0x23c>)
 80030b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d106      	bne.n	80030c6 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80030c4:	e008      	b.n	80030d8 <HAL_SPI_Abort+0xac>
      }
      count--;
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b07      	cmp	r3, #7
 80030d6:	d1ec      	bne.n	80030b2 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d141      	bne.n	800316e <HAL_SPI_Abort+0x142>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d03d      	beq.n	800316e <HAL_SPI_Abort+0x142>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f6:	2200      	movs	r2, #0
 80030f8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fad5 	bl	80016ae <HAL_DMA_Abort>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2240      	movs	r2, #64	@ 0x40
 800310e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0202 	bic.w	r2, r2, #2
 800311e:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003120:	f7fd ff9c 	bl	800105c <HAL_GetTick>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	2164      	movs	r1, #100	@ 0x64
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fc6e 	bl	8003a0c <SPI_EndRxTxTransaction>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_SPI_Abort+0x110>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2240      	movs	r2, #64	@ 0x40
 800313a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800314a:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800314c:	f7fd ff86 	bl	800105c <HAL_GetTick>
 8003150:	4603      	mov	r3, r0
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2364      	movs	r3, #100	@ 0x64
 8003156:	2200      	movs	r2, #0
 8003158:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fb67 	bl	8003830 <SPI_WaitFifoStateUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_SPI_Abort+0x142>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2240      	movs	r2, #64	@ 0x40
 800316c:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d143      	bne.n	8003204 <HAL_SPI_Abort+0x1d8>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003180:	2b00      	cmp	r3, #0
 8003182:	d03f      	beq.n	8003204 <HAL_SPI_Abort+0x1d8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	2200      	movs	r2, #0
 800318a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe fa8c 	bl	80016ae <HAL_DMA_Abort>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_SPI_Abort+0x176>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2240      	movs	r2, #64	@ 0x40
 80031a0:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031b0:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80031b2:	f7fd ff53 	bl	800105c <HAL_GetTick>
 80031b6:	4603      	mov	r3, r0
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2364      	movs	r3, #100	@ 0x64
 80031bc:	2200      	movs	r2, #0
 80031be:	2180      	movs	r1, #128	@ 0x80
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 faad 	bl	8003720 <SPI_WaitFlagStateUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_SPI_Abort+0x1a6>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2240      	movs	r2, #64	@ 0x40
 80031d0:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 80031d2:	f7fd ff43 	bl	800105c <HAL_GetTick>
 80031d6:	4603      	mov	r3, r0
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2364      	movs	r3, #100	@ 0x64
 80031dc:	2200      	movs	r2, #0
 80031de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fb24 	bl	8003830 <SPI_WaitFifoStateUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_SPI_Abort+0x1c8>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2240      	movs	r2, #64	@ 0x40
 80031f2:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003216:	2b40      	cmp	r3, #64	@ 0x40
 8003218:	d102      	bne.n	8003220 <HAL_SPI_Abort+0x1f4>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	77fb      	strb	r3, [r7, #31]
 800321e:	e002      	b.n	8003226 <HAL_SPI_Abort+0x1fa>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return errorcode;
 8003252:	7ffb      	ldrb	r3, [r7, #31]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20004008 	.word	0x20004008
 8003260:	057619f1 	.word	0x057619f1
 8003264:	08003b59 	.word	0x08003b59
 8003268:	08003a99 	.word	0x08003a99

0800326c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00f      	beq.n	80032a0 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe fa12 	bl	80016ae <HAL_DMA_Abort>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003294:	f043 0210 	orr.w	r2, r3, #16
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00f      	beq.n	80032c8 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe f9fe 	bl	80016ae <HAL_DMA_Abort>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032bc:	f043 0210 	orr.w	r2, r3, #16
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0203 	bic.w	r2, r2, #3
 80032d6:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	099b      	lsrs	r3, r3, #6
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10f      	bne.n	8003330 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	099b      	lsrs	r3, r3, #6
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d004      	beq.n	8003330 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
    return;
 800332e:	e0d7      	b.n	80034e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_SPI_IRQHandler+0x66>
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	09db      	lsrs	r3, r3, #7
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4798      	blx	r3
    return;
 8003350:	e0c6      	b.n	80034e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10c      	bne.n	8003378 <HAL_SPI_IRQHandler+0x8c>
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	099b      	lsrs	r3, r3, #6
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80b4 	beq.w	80034e0 <HAL_SPI_IRQHandler+0x1f4>
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80ad 	beq.w	80034e0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	099b      	lsrs	r3, r3, #6
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d023      	beq.n	80033da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b03      	cmp	r3, #3
 800339c:	d011      	beq.n	80033c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a2:	f043 0204 	orr.w	r2, r3, #4
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	e00b      	b.n	80033da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	693b      	ldr	r3, [r7, #16]
        return;
 80033d8:	e082      	b.n	80034e0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d014      	beq.n	8003410 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ea:	f043 0201 	orr.w	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00c      	beq.n	8003436 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003420:	f043 0208 	orr.w	r2, r3, #8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003428:	2300      	movs	r3, #0
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343a:	2b00      	cmp	r3, #0
 800343c:	d04f      	beq.n	80034de <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800344c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <HAL_SPI_IRQHandler+0x17e>
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d034      	beq.n	80034d4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0203 	bic.w	r2, r2, #3
 8003478:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347e:	2b00      	cmp	r3, #0
 8003480:	d011      	beq.n	80034a6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003486:	4a18      	ldr	r2, [pc, #96]	@ (80034e8 <HAL_SPI_IRQHandler+0x1fc>)
 8003488:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe f966 	bl	8001760 <HAL_DMA_Abort_IT>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800349e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d016      	beq.n	80034dc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b2:	4a0d      	ldr	r2, [pc, #52]	@ (80034e8 <HAL_SPI_IRQHandler+0x1fc>)
 80034b4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe f950 	bl	8001760 <HAL_DMA_Abort_IT>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80034d2:	e003      	b.n	80034dc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7fd fa93 	bl	8000a00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80034da:	e000      	b.n	80034de <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80034dc:	bf00      	nop
    return;
 80034de:	bf00      	nop
  }
}
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	080036f5 	.word	0x080036f5

080034ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003536:	b2db      	uxtb	r3, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003552:	f7fd fd83 	bl	800105c <HAL_GetTick>
 8003556:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b20      	cmp	r3, #32
 8003564:	d03c      	beq.n	80035e0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0220 	bic.w	r2, r2, #32
 8003574:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10d      	bne.n	800359a <SPI_DMAReceiveCplt+0x56>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003586:	d108      	bne.n	800359a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0203 	bic.w	r2, r2, #3
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	e007      	b.n	80035aa <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	2164      	movs	r1, #100	@ 0x64
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f9d4 	bl	800395c <SPI_EndRxTransaction>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f7fd fa11 	bl	8000a00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80035de:	e002      	b.n	80035e6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff ff83 	bl	80034ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035fa:	f7fd fd2f 	bl	800105c <HAL_GetTick>
 80035fe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b20      	cmp	r3, #32
 800360c:	d030      	beq.n	8003670 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0220 	bic.w	r2, r2, #32
 800361c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	2164      	movs	r1, #100	@ 0x64
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f9f2 	bl	8003a0c <SPI_EndRxTxTransaction>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003632:	f043 0220 	orr.w	r2, r3, #32
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0203 	bic.w	r2, r2, #3
 8003648:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7fd f9c9 	bl	8000a00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800366e:	e002      	b.n	8003676 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7fd f9b3 	bl	80009dc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f7ff ff38 	bl	8003500 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7ff ff34 	bl	8003514 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0203 	bic.w	r2, r2, #3
 80036d0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	f043 0210 	orr.w	r2, r3, #16
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7fd f98a 	bl	8000a00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f7fd f975 	bl	8000a00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003730:	f7fd fc94 	bl	800105c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	4413      	add	r3, r2
 800373e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003740:	f7fd fc8c 	bl	800105c <HAL_GetTick>
 8003744:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003746:	4b39      	ldr	r3, [pc, #228]	@ (800382c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	015b      	lsls	r3, r3, #5
 800374c:	0d1b      	lsrs	r3, r3, #20
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	fb02 f303 	mul.w	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003756:	e054      	b.n	8003802 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d050      	beq.n	8003802 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003760:	f7fd fc7c 	bl	800105c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	429a      	cmp	r2, r3
 800376e:	d902      	bls.n	8003776 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d13d      	bne.n	80037f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003784:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800378e:	d111      	bne.n	80037b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003798:	d004      	beq.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a2:	d107      	bne.n	80037b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037bc:	d10f      	bne.n	80037de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e017      	b.n	8003822 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	3b01      	subs	r3, #1
 8003800:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4013      	ands	r3, r2
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	429a      	cmp	r2, r3
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	429a      	cmp	r2, r3
 800381e:	d19b      	bne.n	8003758 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20004008 	.word	0x20004008

08003830 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	@ 0x28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003842:	f7fd fc0b 	bl	800105c <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	4413      	add	r3, r2
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003852:	f7fd fc03 	bl	800105c <HAL_GetTick>
 8003856:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	330c      	adds	r3, #12
 800385e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003860:	4b3d      	ldr	r3, [pc, #244]	@ (8003958 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	00da      	lsls	r2, r3, #3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	0d1b      	lsrs	r3, r3, #20
 8003870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003878:	e060      	b.n	800393c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003880:	d107      	bne.n	8003892 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003890:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d050      	beq.n	800393c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800389a:	f7fd fbdf 	bl	800105c <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d902      	bls.n	80038b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d13d      	bne.n	800392c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038c8:	d111      	bne.n	80038ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038d2:	d004      	beq.n	80038de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038dc:	d107      	bne.n	80038ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038f6:	d10f      	bne.n	8003918 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003916:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e010      	b.n	800394e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	3b01      	subs	r3, #1
 800393a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4013      	ands	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d196      	bne.n	800387a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3728      	adds	r7, #40	@ 0x28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20004008 	.word	0x20004008

0800395c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003970:	d111      	bne.n	8003996 <SPI_EndRxTransaction+0x3a>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800397a:	d004      	beq.n	8003986 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003984:	d107      	bne.n	8003996 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003994:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2200      	movs	r2, #0
 800399e:	2180      	movs	r1, #128	@ 0x80
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7ff febd 	bl	8003720 <SPI_WaitFlagStateUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e023      	b.n	8003a04 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039c4:	d11d      	bne.n	8003a02 <SPI_EndRxTransaction+0xa6>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039ce:	d004      	beq.n	80039da <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d8:	d113      	bne.n	8003a02 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f7ff ff22 	bl	8003830 <SPI_WaitFifoStateUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f6:	f043 0220 	orr.w	r2, r3, #32
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e000      	b.n	8003a04 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f7ff ff03 	bl	8003830 <SPI_WaitFifoStateUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e027      	b.n	8003a90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2200      	movs	r2, #0
 8003a48:	2180      	movs	r1, #128	@ 0x80
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f7ff fe68 	bl	8003720 <SPI_WaitFlagStateUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5a:	f043 0220 	orr.w	r2, r3, #32
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e014      	b.n	8003a90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f7ff fedc 	bl	8003830 <SPI_WaitFifoStateUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a82:	f043 0220 	orr.w	r2, r3, #32
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e000      	b.n	8003a90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aae:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003ab0:	4b27      	ldr	r3, [pc, #156]	@ (8003b50 <SPI_AbortRx_ISR+0xb8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a27      	ldr	r2, [pc, #156]	@ (8003b54 <SPI_AbortRx_ISR+0xbc>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	0a5b      	lsrs	r3, r3, #9
 8003abc:	2264      	movs	r2, #100	@ 0x64
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ad2:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ade:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8003ae6:	e009      	b.n	8003afc <SPI_AbortRx_ISR+0x64>
    }
    count--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af8:	2b40      	cmp	r3, #64	@ 0x40
 8003afa:	d0eb      	beq.n	8003ad4 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003afc:	f7fd faae 	bl	800105c <HAL_GetTick>
 8003b00:	4603      	mov	r3, r0
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	2364      	movs	r3, #100	@ 0x64
 8003b06:	2200      	movs	r2, #0
 8003b08:	2180      	movs	r1, #128	@ 0x80
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fe08 	bl	8003720 <SPI_WaitFlagStateUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2240      	movs	r2, #64	@ 0x40
 8003b1a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003b1c:	f7fd fa9e 	bl	800105c <HAL_GetTick>
 8003b20:	4603      	mov	r3, r0
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2364      	movs	r3, #100	@ 0x64
 8003b26:	2200      	movs	r2, #0
 8003b28:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fe7f 	bl	8003830 <SPI_WaitFifoStateUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2240      	movs	r2, #64	@ 0x40
 8003b3c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2207      	movs	r2, #7
 8003b42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20004008 	.word	0x20004008
 8003b54:	057619f1 	.word	0x057619f1

08003b58 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003b60:	4b4c      	ldr	r3, [pc, #304]	@ (8003c94 <SPI_AbortTx_ISR+0x13c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a4c      	ldr	r2, [pc, #304]	@ (8003c98 <SPI_AbortTx_ISR+0x140>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	0a5b      	lsrs	r3, r3, #9
 8003b6c:	2264      	movs	r2, #100	@ 0x64
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b82:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8003b96:	e009      	b.n	8003bac <SPI_AbortTx_ISR+0x54>
    }
    count--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba8:	2b80      	cmp	r3, #128	@ 0x80
 8003baa:	d0eb      	beq.n	8003b84 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003bac:	f7fd fa56 	bl	800105c <HAL_GetTick>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2164      	movs	r1, #100	@ 0x64
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff ff28 	bl	8003a0c <SPI_EndRxTxTransaction>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2240      	movs	r2, #64	@ 0x40
 8003bc6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003bd8:	f7fd fa40 	bl	800105c <HAL_GetTick>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2364      	movs	r3, #100	@ 0x64
 8003be2:	2200      	movs	r2, #0
 8003be4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff fe21 	bl	8003830 <SPI_WaitFifoStateUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2240      	movs	r2, #64	@ 0x40
 8003bf8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c04:	2b40      	cmp	r3, #64	@ 0x40
 8003c06:	d13c      	bne.n	8003c82 <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c16:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003c2a:	e009      	b.n	8003c40 <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3c:	2b40      	cmp	r3, #64	@ 0x40
 8003c3e:	d0eb      	beq.n	8003c18 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003c40:	f7fd fa0c 	bl	800105c <HAL_GetTick>
 8003c44:	4603      	mov	r3, r0
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	2364      	movs	r3, #100	@ 0x64
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2180      	movs	r1, #128	@ 0x80
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fd66 	bl	8003720 <SPI_WaitFlagStateUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2240      	movs	r2, #64	@ 0x40
 8003c5e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8003c60:	f7fd f9fc 	bl	800105c <HAL_GetTick>
 8003c64:	4603      	mov	r3, r0
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	2364      	movs	r3, #100	@ 0x64
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff fddd 	bl	8003830 <SPI_WaitFifoStateUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2240      	movs	r2, #64	@ 0x40
 8003c80:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2207      	movs	r2, #7
 8003c86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20004008 	.word	0x20004008
 8003c98:	057619f1 	.word	0x057619f1

08003c9c <rand>:
 8003c9c:	4b16      	ldr	r3, [pc, #88]	@ (8003cf8 <rand+0x5c>)
 8003c9e:	b510      	push	{r4, lr}
 8003ca0:	681c      	ldr	r4, [r3, #0]
 8003ca2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003ca4:	b9b3      	cbnz	r3, 8003cd4 <rand+0x38>
 8003ca6:	2018      	movs	r0, #24
 8003ca8:	f000 fa42 	bl	8004130 <malloc>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6320      	str	r0, [r4, #48]	@ 0x30
 8003cb0:	b920      	cbnz	r0, 8003cbc <rand+0x20>
 8003cb2:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <rand+0x60>)
 8003cb4:	4812      	ldr	r0, [pc, #72]	@ (8003d00 <rand+0x64>)
 8003cb6:	2152      	movs	r1, #82	@ 0x52
 8003cb8:	f000 f9d2 	bl	8004060 <__assert_func>
 8003cbc:	4911      	ldr	r1, [pc, #68]	@ (8003d04 <rand+0x68>)
 8003cbe:	4b12      	ldr	r3, [pc, #72]	@ (8003d08 <rand+0x6c>)
 8003cc0:	e9c0 1300 	strd	r1, r3, [r0]
 8003cc4:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <rand+0x70>)
 8003cc6:	6083      	str	r3, [r0, #8]
 8003cc8:	230b      	movs	r3, #11
 8003cca:	8183      	strh	r3, [r0, #12]
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2001      	movs	r0, #1
 8003cd0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003cd4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003cd6:	480e      	ldr	r0, [pc, #56]	@ (8003d10 <rand+0x74>)
 8003cd8:	690b      	ldr	r3, [r1, #16]
 8003cda:	694c      	ldr	r4, [r1, #20]
 8003cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8003d14 <rand+0x78>)
 8003cde:	4358      	muls	r0, r3
 8003ce0:	fb02 0004 	mla	r0, r2, r4, r0
 8003ce4:	fba3 3202 	umull	r3, r2, r3, r2
 8003ce8:	3301      	adds	r3, #1
 8003cea:	eb40 0002 	adc.w	r0, r0, r2
 8003cee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003cf2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003cf6:	bd10      	pop	{r4, pc}
 8003cf8:	20004020 	.word	0x20004020
 8003cfc:	08005050 	.word	0x08005050
 8003d00:	08005067 	.word	0x08005067
 8003d04:	abcd330e 	.word	0xabcd330e
 8003d08:	e66d1234 	.word	0xe66d1234
 8003d0c:	0005deec 	.word	0x0005deec
 8003d10:	5851f42d 	.word	0x5851f42d
 8003d14:	4c957f2d 	.word	0x4c957f2d

08003d18 <std>:
 8003d18:	2300      	movs	r3, #0
 8003d1a:	b510      	push	{r4, lr}
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d26:	6083      	str	r3, [r0, #8]
 8003d28:	8181      	strh	r1, [r0, #12]
 8003d2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d2c:	81c2      	strh	r2, [r0, #14]
 8003d2e:	6183      	str	r3, [r0, #24]
 8003d30:	4619      	mov	r1, r3
 8003d32:	2208      	movs	r2, #8
 8003d34:	305c      	adds	r0, #92	@ 0x5c
 8003d36:	f000 f916 	bl	8003f66 <memset>
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <std+0x58>)
 8003d3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <std+0x5c>)
 8003d40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d42:	4b0d      	ldr	r3, [pc, #52]	@ (8003d78 <std+0x60>)
 8003d44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d46:	4b0d      	ldr	r3, [pc, #52]	@ (8003d7c <std+0x64>)
 8003d48:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d80 <std+0x68>)
 8003d4c:	6224      	str	r4, [r4, #32]
 8003d4e:	429c      	cmp	r4, r3
 8003d50:	d006      	beq.n	8003d60 <std+0x48>
 8003d52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d56:	4294      	cmp	r4, r2
 8003d58:	d002      	beq.n	8003d60 <std+0x48>
 8003d5a:	33d0      	adds	r3, #208	@ 0xd0
 8003d5c:	429c      	cmp	r4, r3
 8003d5e:	d105      	bne.n	8003d6c <std+0x54>
 8003d60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d68:	f000 b976 	b.w	8004058 <__retarget_lock_init_recursive>
 8003d6c:	bd10      	pop	{r4, pc}
 8003d6e:	bf00      	nop
 8003d70:	08003ee1 	.word	0x08003ee1
 8003d74:	08003f03 	.word	0x08003f03
 8003d78:	08003f3b 	.word	0x08003f3b
 8003d7c:	08003f5f 	.word	0x08003f5f
 8003d80:	20008204 	.word	0x20008204

08003d84 <stdio_exit_handler>:
 8003d84:	4a02      	ldr	r2, [pc, #8]	@ (8003d90 <stdio_exit_handler+0xc>)
 8003d86:	4903      	ldr	r1, [pc, #12]	@ (8003d94 <stdio_exit_handler+0x10>)
 8003d88:	4803      	ldr	r0, [pc, #12]	@ (8003d98 <stdio_exit_handler+0x14>)
 8003d8a:	f000 b869 	b.w	8003e60 <_fwalk_sglue>
 8003d8e:	bf00      	nop
 8003d90:	20004014 	.word	0x20004014
 8003d94:	0800496d 	.word	0x0800496d
 8003d98:	20004024 	.word	0x20004024

08003d9c <cleanup_stdio>:
 8003d9c:	6841      	ldr	r1, [r0, #4]
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <cleanup_stdio+0x34>)
 8003da0:	4299      	cmp	r1, r3
 8003da2:	b510      	push	{r4, lr}
 8003da4:	4604      	mov	r4, r0
 8003da6:	d001      	beq.n	8003dac <cleanup_stdio+0x10>
 8003da8:	f000 fde0 	bl	800496c <_fflush_r>
 8003dac:	68a1      	ldr	r1, [r4, #8]
 8003dae:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <cleanup_stdio+0x38>)
 8003db0:	4299      	cmp	r1, r3
 8003db2:	d002      	beq.n	8003dba <cleanup_stdio+0x1e>
 8003db4:	4620      	mov	r0, r4
 8003db6:	f000 fdd9 	bl	800496c <_fflush_r>
 8003dba:	68e1      	ldr	r1, [r4, #12]
 8003dbc:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <cleanup_stdio+0x3c>)
 8003dbe:	4299      	cmp	r1, r3
 8003dc0:	d004      	beq.n	8003dcc <cleanup_stdio+0x30>
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc8:	f000 bdd0 	b.w	800496c <_fflush_r>
 8003dcc:	bd10      	pop	{r4, pc}
 8003dce:	bf00      	nop
 8003dd0:	20008204 	.word	0x20008204
 8003dd4:	2000826c 	.word	0x2000826c
 8003dd8:	200082d4 	.word	0x200082d4

08003ddc <global_stdio_init.part.0>:
 8003ddc:	b510      	push	{r4, lr}
 8003dde:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <global_stdio_init.part.0+0x30>)
 8003de0:	4c0b      	ldr	r4, [pc, #44]	@ (8003e10 <global_stdio_init.part.0+0x34>)
 8003de2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e14 <global_stdio_init.part.0+0x38>)
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	4620      	mov	r0, r4
 8003de8:	2200      	movs	r2, #0
 8003dea:	2104      	movs	r1, #4
 8003dec:	f7ff ff94 	bl	8003d18 <std>
 8003df0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003df4:	2201      	movs	r2, #1
 8003df6:	2109      	movs	r1, #9
 8003df8:	f7ff ff8e 	bl	8003d18 <std>
 8003dfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e00:	2202      	movs	r2, #2
 8003e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e06:	2112      	movs	r1, #18
 8003e08:	f7ff bf86 	b.w	8003d18 <std>
 8003e0c:	2000833c 	.word	0x2000833c
 8003e10:	20008204 	.word	0x20008204
 8003e14:	08003d85 	.word	0x08003d85

08003e18 <__sfp_lock_acquire>:
 8003e18:	4801      	ldr	r0, [pc, #4]	@ (8003e20 <__sfp_lock_acquire+0x8>)
 8003e1a:	f000 b91e 	b.w	800405a <__retarget_lock_acquire_recursive>
 8003e1e:	bf00      	nop
 8003e20:	20008345 	.word	0x20008345

08003e24 <__sfp_lock_release>:
 8003e24:	4801      	ldr	r0, [pc, #4]	@ (8003e2c <__sfp_lock_release+0x8>)
 8003e26:	f000 b919 	b.w	800405c <__retarget_lock_release_recursive>
 8003e2a:	bf00      	nop
 8003e2c:	20008345 	.word	0x20008345

08003e30 <__sinit>:
 8003e30:	b510      	push	{r4, lr}
 8003e32:	4604      	mov	r4, r0
 8003e34:	f7ff fff0 	bl	8003e18 <__sfp_lock_acquire>
 8003e38:	6a23      	ldr	r3, [r4, #32]
 8003e3a:	b11b      	cbz	r3, 8003e44 <__sinit+0x14>
 8003e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e40:	f7ff bff0 	b.w	8003e24 <__sfp_lock_release>
 8003e44:	4b04      	ldr	r3, [pc, #16]	@ (8003e58 <__sinit+0x28>)
 8003e46:	6223      	str	r3, [r4, #32]
 8003e48:	4b04      	ldr	r3, [pc, #16]	@ (8003e5c <__sinit+0x2c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f5      	bne.n	8003e3c <__sinit+0xc>
 8003e50:	f7ff ffc4 	bl	8003ddc <global_stdio_init.part.0>
 8003e54:	e7f2      	b.n	8003e3c <__sinit+0xc>
 8003e56:	bf00      	nop
 8003e58:	08003d9d 	.word	0x08003d9d
 8003e5c:	2000833c 	.word	0x2000833c

08003e60 <_fwalk_sglue>:
 8003e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e64:	4607      	mov	r7, r0
 8003e66:	4688      	mov	r8, r1
 8003e68:	4614      	mov	r4, r2
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e70:	f1b9 0901 	subs.w	r9, r9, #1
 8003e74:	d505      	bpl.n	8003e82 <_fwalk_sglue+0x22>
 8003e76:	6824      	ldr	r4, [r4, #0]
 8003e78:	2c00      	cmp	r4, #0
 8003e7a:	d1f7      	bne.n	8003e6c <_fwalk_sglue+0xc>
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e82:	89ab      	ldrh	r3, [r5, #12]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d907      	bls.n	8003e98 <_fwalk_sglue+0x38>
 8003e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	d003      	beq.n	8003e98 <_fwalk_sglue+0x38>
 8003e90:	4629      	mov	r1, r5
 8003e92:	4638      	mov	r0, r7
 8003e94:	47c0      	blx	r8
 8003e96:	4306      	orrs	r6, r0
 8003e98:	3568      	adds	r5, #104	@ 0x68
 8003e9a:	e7e9      	b.n	8003e70 <_fwalk_sglue+0x10>

08003e9c <siprintf>:
 8003e9c:	b40e      	push	{r1, r2, r3}
 8003e9e:	b510      	push	{r4, lr}
 8003ea0:	b09d      	sub	sp, #116	@ 0x74
 8003ea2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003ea4:	9002      	str	r0, [sp, #8]
 8003ea6:	9006      	str	r0, [sp, #24]
 8003ea8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003eac:	480a      	ldr	r0, [pc, #40]	@ (8003ed8 <siprintf+0x3c>)
 8003eae:	9107      	str	r1, [sp, #28]
 8003eb0:	9104      	str	r1, [sp, #16]
 8003eb2:	490a      	ldr	r1, [pc, #40]	@ (8003edc <siprintf+0x40>)
 8003eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eb8:	9105      	str	r1, [sp, #20]
 8003eba:	2400      	movs	r4, #0
 8003ebc:	a902      	add	r1, sp, #8
 8003ebe:	6800      	ldr	r0, [r0, #0]
 8003ec0:	9301      	str	r3, [sp, #4]
 8003ec2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003ec4:	f000 fa46 	bl	8004354 <_svfiprintf_r>
 8003ec8:	9b02      	ldr	r3, [sp, #8]
 8003eca:	701c      	strb	r4, [r3, #0]
 8003ecc:	b01d      	add	sp, #116	@ 0x74
 8003ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed2:	b003      	add	sp, #12
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20004020 	.word	0x20004020
 8003edc:	ffff0208 	.word	0xffff0208

08003ee0 <__sread>:
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee8:	f000 f868 	bl	8003fbc <_read_r>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	bfab      	itete	ge
 8003ef0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ef4:	181b      	addge	r3, r3, r0
 8003ef6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003efa:	bfac      	ite	ge
 8003efc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003efe:	81a3      	strhlt	r3, [r4, #12]
 8003f00:	bd10      	pop	{r4, pc}

08003f02 <__swrite>:
 8003f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f06:	461f      	mov	r7, r3
 8003f08:	898b      	ldrh	r3, [r1, #12]
 8003f0a:	05db      	lsls	r3, r3, #23
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	4616      	mov	r6, r2
 8003f12:	d505      	bpl.n	8003f20 <__swrite+0x1e>
 8003f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f18:	2302      	movs	r3, #2
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f000 f83c 	bl	8003f98 <_lseek_r>
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f2a:	81a3      	strh	r3, [r4, #12]
 8003f2c:	4632      	mov	r2, r6
 8003f2e:	463b      	mov	r3, r7
 8003f30:	4628      	mov	r0, r5
 8003f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f36:	f000 b853 	b.w	8003fe0 <_write_r>

08003f3a <__sseek>:
 8003f3a:	b510      	push	{r4, lr}
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f42:	f000 f829 	bl	8003f98 <_lseek_r>
 8003f46:	1c43      	adds	r3, r0, #1
 8003f48:	89a3      	ldrh	r3, [r4, #12]
 8003f4a:	bf15      	itete	ne
 8003f4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f56:	81a3      	strheq	r3, [r4, #12]
 8003f58:	bf18      	it	ne
 8003f5a:	81a3      	strhne	r3, [r4, #12]
 8003f5c:	bd10      	pop	{r4, pc}

08003f5e <__sclose>:
 8003f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f62:	f000 b809 	b.w	8003f78 <_close_r>

08003f66 <memset>:
 8003f66:	4402      	add	r2, r0
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d100      	bne.n	8003f70 <memset+0xa>
 8003f6e:	4770      	bx	lr
 8003f70:	f803 1b01 	strb.w	r1, [r3], #1
 8003f74:	e7f9      	b.n	8003f6a <memset+0x4>
	...

08003f78 <_close_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	4d06      	ldr	r5, [pc, #24]	@ (8003f94 <_close_r+0x1c>)
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	4604      	mov	r4, r0
 8003f80:	4608      	mov	r0, r1
 8003f82:	602b      	str	r3, [r5, #0]
 8003f84:	f7fc ff23 	bl	8000dce <_close>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_close_r+0x1a>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_close_r+0x1a>
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	20008340 	.word	0x20008340

08003f98 <_lseek_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	4d07      	ldr	r5, [pc, #28]	@ (8003fb8 <_lseek_r+0x20>)
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	4608      	mov	r0, r1
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	602a      	str	r2, [r5, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f7fc ff38 	bl	8000e1c <_lseek>
 8003fac:	1c43      	adds	r3, r0, #1
 8003fae:	d102      	bne.n	8003fb6 <_lseek_r+0x1e>
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	b103      	cbz	r3, 8003fb6 <_lseek_r+0x1e>
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	bd38      	pop	{r3, r4, r5, pc}
 8003fb8:	20008340 	.word	0x20008340

08003fbc <_read_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	4d07      	ldr	r5, [pc, #28]	@ (8003fdc <_read_r+0x20>)
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	4608      	mov	r0, r1
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	602a      	str	r2, [r5, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f7fc fec6 	bl	8000d5c <_read>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d102      	bne.n	8003fda <_read_r+0x1e>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	b103      	cbz	r3, 8003fda <_read_r+0x1e>
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	20008340 	.word	0x20008340

08003fe0 <_write_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4d07      	ldr	r5, [pc, #28]	@ (8004000 <_write_r+0x20>)
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	4608      	mov	r0, r1
 8003fe8:	4611      	mov	r1, r2
 8003fea:	2200      	movs	r2, #0
 8003fec:	602a      	str	r2, [r5, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f7fc fed1 	bl	8000d96 <_write>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	d102      	bne.n	8003ffe <_write_r+0x1e>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	b103      	cbz	r3, 8003ffe <_write_r+0x1e>
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	20008340 	.word	0x20008340

08004004 <__errno>:
 8004004:	4b01      	ldr	r3, [pc, #4]	@ (800400c <__errno+0x8>)
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20004020 	.word	0x20004020

08004010 <__libc_init_array>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	4d0d      	ldr	r5, [pc, #52]	@ (8004048 <__libc_init_array+0x38>)
 8004014:	4c0d      	ldr	r4, [pc, #52]	@ (800404c <__libc_init_array+0x3c>)
 8004016:	1b64      	subs	r4, r4, r5
 8004018:	10a4      	asrs	r4, r4, #2
 800401a:	2600      	movs	r6, #0
 800401c:	42a6      	cmp	r6, r4
 800401e:	d109      	bne.n	8004034 <__libc_init_array+0x24>
 8004020:	4d0b      	ldr	r5, [pc, #44]	@ (8004050 <__libc_init_array+0x40>)
 8004022:	4c0c      	ldr	r4, [pc, #48]	@ (8004054 <__libc_init_array+0x44>)
 8004024:	f000 ffee 	bl	8005004 <_init>
 8004028:	1b64      	subs	r4, r4, r5
 800402a:	10a4      	asrs	r4, r4, #2
 800402c:	2600      	movs	r6, #0
 800402e:	42a6      	cmp	r6, r4
 8004030:	d105      	bne.n	800403e <__libc_init_array+0x2e>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	f855 3b04 	ldr.w	r3, [r5], #4
 8004038:	4798      	blx	r3
 800403a:	3601      	adds	r6, #1
 800403c:	e7ee      	b.n	800401c <__libc_init_array+0xc>
 800403e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004042:	4798      	blx	r3
 8004044:	3601      	adds	r6, #1
 8004046:	e7f2      	b.n	800402e <__libc_init_array+0x1e>
 8004048:	08005138 	.word	0x08005138
 800404c:	08005138 	.word	0x08005138
 8004050:	08005138 	.word	0x08005138
 8004054:	0800513c 	.word	0x0800513c

08004058 <__retarget_lock_init_recursive>:
 8004058:	4770      	bx	lr

0800405a <__retarget_lock_acquire_recursive>:
 800405a:	4770      	bx	lr

0800405c <__retarget_lock_release_recursive>:
 800405c:	4770      	bx	lr
	...

08004060 <__assert_func>:
 8004060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004062:	4614      	mov	r4, r2
 8004064:	461a      	mov	r2, r3
 8004066:	4b09      	ldr	r3, [pc, #36]	@ (800408c <__assert_func+0x2c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4605      	mov	r5, r0
 800406c:	68d8      	ldr	r0, [r3, #12]
 800406e:	b14c      	cbz	r4, 8004084 <__assert_func+0x24>
 8004070:	4b07      	ldr	r3, [pc, #28]	@ (8004090 <__assert_func+0x30>)
 8004072:	9100      	str	r1, [sp, #0]
 8004074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004078:	4906      	ldr	r1, [pc, #24]	@ (8004094 <__assert_func+0x34>)
 800407a:	462b      	mov	r3, r5
 800407c:	f000 fc9e 	bl	80049bc <fiprintf>
 8004080:	f000 fce6 	bl	8004a50 <abort>
 8004084:	4b04      	ldr	r3, [pc, #16]	@ (8004098 <__assert_func+0x38>)
 8004086:	461c      	mov	r4, r3
 8004088:	e7f3      	b.n	8004072 <__assert_func+0x12>
 800408a:	bf00      	nop
 800408c:	20004020 	.word	0x20004020
 8004090:	080050bf 	.word	0x080050bf
 8004094:	080050cc 	.word	0x080050cc
 8004098:	080050fa 	.word	0x080050fa

0800409c <_free_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4605      	mov	r5, r0
 80040a0:	2900      	cmp	r1, #0
 80040a2:	d041      	beq.n	8004128 <_free_r+0x8c>
 80040a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a8:	1f0c      	subs	r4, r1, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bfb8      	it	lt
 80040ae:	18e4      	addlt	r4, r4, r3
 80040b0:	f000 f8e8 	bl	8004284 <__malloc_lock>
 80040b4:	4a1d      	ldr	r2, [pc, #116]	@ (800412c <_free_r+0x90>)
 80040b6:	6813      	ldr	r3, [r2, #0]
 80040b8:	b933      	cbnz	r3, 80040c8 <_free_r+0x2c>
 80040ba:	6063      	str	r3, [r4, #4]
 80040bc:	6014      	str	r4, [r2, #0]
 80040be:	4628      	mov	r0, r5
 80040c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040c4:	f000 b8e4 	b.w	8004290 <__malloc_unlock>
 80040c8:	42a3      	cmp	r3, r4
 80040ca:	d908      	bls.n	80040de <_free_r+0x42>
 80040cc:	6820      	ldr	r0, [r4, #0]
 80040ce:	1821      	adds	r1, r4, r0
 80040d0:	428b      	cmp	r3, r1
 80040d2:	bf01      	itttt	eq
 80040d4:	6819      	ldreq	r1, [r3, #0]
 80040d6:	685b      	ldreq	r3, [r3, #4]
 80040d8:	1809      	addeq	r1, r1, r0
 80040da:	6021      	streq	r1, [r4, #0]
 80040dc:	e7ed      	b.n	80040ba <_free_r+0x1e>
 80040de:	461a      	mov	r2, r3
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	b10b      	cbz	r3, 80040e8 <_free_r+0x4c>
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	d9fa      	bls.n	80040de <_free_r+0x42>
 80040e8:	6811      	ldr	r1, [r2, #0]
 80040ea:	1850      	adds	r0, r2, r1
 80040ec:	42a0      	cmp	r0, r4
 80040ee:	d10b      	bne.n	8004108 <_free_r+0x6c>
 80040f0:	6820      	ldr	r0, [r4, #0]
 80040f2:	4401      	add	r1, r0
 80040f4:	1850      	adds	r0, r2, r1
 80040f6:	4283      	cmp	r3, r0
 80040f8:	6011      	str	r1, [r2, #0]
 80040fa:	d1e0      	bne.n	80040be <_free_r+0x22>
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	6053      	str	r3, [r2, #4]
 8004102:	4408      	add	r0, r1
 8004104:	6010      	str	r0, [r2, #0]
 8004106:	e7da      	b.n	80040be <_free_r+0x22>
 8004108:	d902      	bls.n	8004110 <_free_r+0x74>
 800410a:	230c      	movs	r3, #12
 800410c:	602b      	str	r3, [r5, #0]
 800410e:	e7d6      	b.n	80040be <_free_r+0x22>
 8004110:	6820      	ldr	r0, [r4, #0]
 8004112:	1821      	adds	r1, r4, r0
 8004114:	428b      	cmp	r3, r1
 8004116:	bf04      	itt	eq
 8004118:	6819      	ldreq	r1, [r3, #0]
 800411a:	685b      	ldreq	r3, [r3, #4]
 800411c:	6063      	str	r3, [r4, #4]
 800411e:	bf04      	itt	eq
 8004120:	1809      	addeq	r1, r1, r0
 8004122:	6021      	streq	r1, [r4, #0]
 8004124:	6054      	str	r4, [r2, #4]
 8004126:	e7ca      	b.n	80040be <_free_r+0x22>
 8004128:	bd38      	pop	{r3, r4, r5, pc}
 800412a:	bf00      	nop
 800412c:	2000834c 	.word	0x2000834c

08004130 <malloc>:
 8004130:	4b02      	ldr	r3, [pc, #8]	@ (800413c <malloc+0xc>)
 8004132:	4601      	mov	r1, r0
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	f000 b825 	b.w	8004184 <_malloc_r>
 800413a:	bf00      	nop
 800413c:	20004020 	.word	0x20004020

08004140 <sbrk_aligned>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	4e0f      	ldr	r6, [pc, #60]	@ (8004180 <sbrk_aligned+0x40>)
 8004144:	460c      	mov	r4, r1
 8004146:	6831      	ldr	r1, [r6, #0]
 8004148:	4605      	mov	r5, r0
 800414a:	b911      	cbnz	r1, 8004152 <sbrk_aligned+0x12>
 800414c:	f000 fc62 	bl	8004a14 <_sbrk_r>
 8004150:	6030      	str	r0, [r6, #0]
 8004152:	4621      	mov	r1, r4
 8004154:	4628      	mov	r0, r5
 8004156:	f000 fc5d 	bl	8004a14 <_sbrk_r>
 800415a:	1c43      	adds	r3, r0, #1
 800415c:	d103      	bne.n	8004166 <sbrk_aligned+0x26>
 800415e:	f04f 34ff 	mov.w	r4, #4294967295
 8004162:	4620      	mov	r0, r4
 8004164:	bd70      	pop	{r4, r5, r6, pc}
 8004166:	1cc4      	adds	r4, r0, #3
 8004168:	f024 0403 	bic.w	r4, r4, #3
 800416c:	42a0      	cmp	r0, r4
 800416e:	d0f8      	beq.n	8004162 <sbrk_aligned+0x22>
 8004170:	1a21      	subs	r1, r4, r0
 8004172:	4628      	mov	r0, r5
 8004174:	f000 fc4e 	bl	8004a14 <_sbrk_r>
 8004178:	3001      	adds	r0, #1
 800417a:	d1f2      	bne.n	8004162 <sbrk_aligned+0x22>
 800417c:	e7ef      	b.n	800415e <sbrk_aligned+0x1e>
 800417e:	bf00      	nop
 8004180:	20008348 	.word	0x20008348

08004184 <_malloc_r>:
 8004184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004188:	1ccd      	adds	r5, r1, #3
 800418a:	f025 0503 	bic.w	r5, r5, #3
 800418e:	3508      	adds	r5, #8
 8004190:	2d0c      	cmp	r5, #12
 8004192:	bf38      	it	cc
 8004194:	250c      	movcc	r5, #12
 8004196:	2d00      	cmp	r5, #0
 8004198:	4606      	mov	r6, r0
 800419a:	db01      	blt.n	80041a0 <_malloc_r+0x1c>
 800419c:	42a9      	cmp	r1, r5
 800419e:	d904      	bls.n	80041aa <_malloc_r+0x26>
 80041a0:	230c      	movs	r3, #12
 80041a2:	6033      	str	r3, [r6, #0]
 80041a4:	2000      	movs	r0, #0
 80041a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004280 <_malloc_r+0xfc>
 80041ae:	f000 f869 	bl	8004284 <__malloc_lock>
 80041b2:	f8d8 3000 	ldr.w	r3, [r8]
 80041b6:	461c      	mov	r4, r3
 80041b8:	bb44      	cbnz	r4, 800420c <_malloc_r+0x88>
 80041ba:	4629      	mov	r1, r5
 80041bc:	4630      	mov	r0, r6
 80041be:	f7ff ffbf 	bl	8004140 <sbrk_aligned>
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	4604      	mov	r4, r0
 80041c6:	d158      	bne.n	800427a <_malloc_r+0xf6>
 80041c8:	f8d8 4000 	ldr.w	r4, [r8]
 80041cc:	4627      	mov	r7, r4
 80041ce:	2f00      	cmp	r7, #0
 80041d0:	d143      	bne.n	800425a <_malloc_r+0xd6>
 80041d2:	2c00      	cmp	r4, #0
 80041d4:	d04b      	beq.n	800426e <_malloc_r+0xea>
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	4639      	mov	r1, r7
 80041da:	4630      	mov	r0, r6
 80041dc:	eb04 0903 	add.w	r9, r4, r3
 80041e0:	f000 fc18 	bl	8004a14 <_sbrk_r>
 80041e4:	4581      	cmp	r9, r0
 80041e6:	d142      	bne.n	800426e <_malloc_r+0xea>
 80041e8:	6821      	ldr	r1, [r4, #0]
 80041ea:	1a6d      	subs	r5, r5, r1
 80041ec:	4629      	mov	r1, r5
 80041ee:	4630      	mov	r0, r6
 80041f0:	f7ff ffa6 	bl	8004140 <sbrk_aligned>
 80041f4:	3001      	adds	r0, #1
 80041f6:	d03a      	beq.n	800426e <_malloc_r+0xea>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	442b      	add	r3, r5
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	bb62      	cbnz	r2, 8004260 <_malloc_r+0xdc>
 8004206:	f8c8 7000 	str.w	r7, [r8]
 800420a:	e00f      	b.n	800422c <_malloc_r+0xa8>
 800420c:	6822      	ldr	r2, [r4, #0]
 800420e:	1b52      	subs	r2, r2, r5
 8004210:	d420      	bmi.n	8004254 <_malloc_r+0xd0>
 8004212:	2a0b      	cmp	r2, #11
 8004214:	d917      	bls.n	8004246 <_malloc_r+0xc2>
 8004216:	1961      	adds	r1, r4, r5
 8004218:	42a3      	cmp	r3, r4
 800421a:	6025      	str	r5, [r4, #0]
 800421c:	bf18      	it	ne
 800421e:	6059      	strne	r1, [r3, #4]
 8004220:	6863      	ldr	r3, [r4, #4]
 8004222:	bf08      	it	eq
 8004224:	f8c8 1000 	streq.w	r1, [r8]
 8004228:	5162      	str	r2, [r4, r5]
 800422a:	604b      	str	r3, [r1, #4]
 800422c:	4630      	mov	r0, r6
 800422e:	f000 f82f 	bl	8004290 <__malloc_unlock>
 8004232:	f104 000b 	add.w	r0, r4, #11
 8004236:	1d23      	adds	r3, r4, #4
 8004238:	f020 0007 	bic.w	r0, r0, #7
 800423c:	1ac2      	subs	r2, r0, r3
 800423e:	bf1c      	itt	ne
 8004240:	1a1b      	subne	r3, r3, r0
 8004242:	50a3      	strne	r3, [r4, r2]
 8004244:	e7af      	b.n	80041a6 <_malloc_r+0x22>
 8004246:	6862      	ldr	r2, [r4, #4]
 8004248:	42a3      	cmp	r3, r4
 800424a:	bf0c      	ite	eq
 800424c:	f8c8 2000 	streq.w	r2, [r8]
 8004250:	605a      	strne	r2, [r3, #4]
 8004252:	e7eb      	b.n	800422c <_malloc_r+0xa8>
 8004254:	4623      	mov	r3, r4
 8004256:	6864      	ldr	r4, [r4, #4]
 8004258:	e7ae      	b.n	80041b8 <_malloc_r+0x34>
 800425a:	463c      	mov	r4, r7
 800425c:	687f      	ldr	r7, [r7, #4]
 800425e:	e7b6      	b.n	80041ce <_malloc_r+0x4a>
 8004260:	461a      	mov	r2, r3
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	42a3      	cmp	r3, r4
 8004266:	d1fb      	bne.n	8004260 <_malloc_r+0xdc>
 8004268:	2300      	movs	r3, #0
 800426a:	6053      	str	r3, [r2, #4]
 800426c:	e7de      	b.n	800422c <_malloc_r+0xa8>
 800426e:	230c      	movs	r3, #12
 8004270:	6033      	str	r3, [r6, #0]
 8004272:	4630      	mov	r0, r6
 8004274:	f000 f80c 	bl	8004290 <__malloc_unlock>
 8004278:	e794      	b.n	80041a4 <_malloc_r+0x20>
 800427a:	6005      	str	r5, [r0, #0]
 800427c:	e7d6      	b.n	800422c <_malloc_r+0xa8>
 800427e:	bf00      	nop
 8004280:	2000834c 	.word	0x2000834c

08004284 <__malloc_lock>:
 8004284:	4801      	ldr	r0, [pc, #4]	@ (800428c <__malloc_lock+0x8>)
 8004286:	f7ff bee8 	b.w	800405a <__retarget_lock_acquire_recursive>
 800428a:	bf00      	nop
 800428c:	20008344 	.word	0x20008344

08004290 <__malloc_unlock>:
 8004290:	4801      	ldr	r0, [pc, #4]	@ (8004298 <__malloc_unlock+0x8>)
 8004292:	f7ff bee3 	b.w	800405c <__retarget_lock_release_recursive>
 8004296:	bf00      	nop
 8004298:	20008344 	.word	0x20008344

0800429c <__ssputs_r>:
 800429c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a0:	688e      	ldr	r6, [r1, #8]
 80042a2:	461f      	mov	r7, r3
 80042a4:	42be      	cmp	r6, r7
 80042a6:	680b      	ldr	r3, [r1, #0]
 80042a8:	4682      	mov	sl, r0
 80042aa:	460c      	mov	r4, r1
 80042ac:	4690      	mov	r8, r2
 80042ae:	d82d      	bhi.n	800430c <__ssputs_r+0x70>
 80042b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042b8:	d026      	beq.n	8004308 <__ssputs_r+0x6c>
 80042ba:	6965      	ldr	r5, [r4, #20]
 80042bc:	6909      	ldr	r1, [r1, #16]
 80042be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042c2:	eba3 0901 	sub.w	r9, r3, r1
 80042c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042ca:	1c7b      	adds	r3, r7, #1
 80042cc:	444b      	add	r3, r9
 80042ce:	106d      	asrs	r5, r5, #1
 80042d0:	429d      	cmp	r5, r3
 80042d2:	bf38      	it	cc
 80042d4:	461d      	movcc	r5, r3
 80042d6:	0553      	lsls	r3, r2, #21
 80042d8:	d527      	bpl.n	800432a <__ssputs_r+0x8e>
 80042da:	4629      	mov	r1, r5
 80042dc:	f7ff ff52 	bl	8004184 <_malloc_r>
 80042e0:	4606      	mov	r6, r0
 80042e2:	b360      	cbz	r0, 800433e <__ssputs_r+0xa2>
 80042e4:	6921      	ldr	r1, [r4, #16]
 80042e6:	464a      	mov	r2, r9
 80042e8:	f000 fba4 	bl	8004a34 <memcpy>
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042f6:	81a3      	strh	r3, [r4, #12]
 80042f8:	6126      	str	r6, [r4, #16]
 80042fa:	6165      	str	r5, [r4, #20]
 80042fc:	444e      	add	r6, r9
 80042fe:	eba5 0509 	sub.w	r5, r5, r9
 8004302:	6026      	str	r6, [r4, #0]
 8004304:	60a5      	str	r5, [r4, #8]
 8004306:	463e      	mov	r6, r7
 8004308:	42be      	cmp	r6, r7
 800430a:	d900      	bls.n	800430e <__ssputs_r+0x72>
 800430c:	463e      	mov	r6, r7
 800430e:	6820      	ldr	r0, [r4, #0]
 8004310:	4632      	mov	r2, r6
 8004312:	4641      	mov	r1, r8
 8004314:	f000 fb64 	bl	80049e0 <memmove>
 8004318:	68a3      	ldr	r3, [r4, #8]
 800431a:	1b9b      	subs	r3, r3, r6
 800431c:	60a3      	str	r3, [r4, #8]
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	4433      	add	r3, r6
 8004322:	6023      	str	r3, [r4, #0]
 8004324:	2000      	movs	r0, #0
 8004326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432a:	462a      	mov	r2, r5
 800432c:	f000 fb97 	bl	8004a5e <_realloc_r>
 8004330:	4606      	mov	r6, r0
 8004332:	2800      	cmp	r0, #0
 8004334:	d1e0      	bne.n	80042f8 <__ssputs_r+0x5c>
 8004336:	6921      	ldr	r1, [r4, #16]
 8004338:	4650      	mov	r0, sl
 800433a:	f7ff feaf 	bl	800409c <_free_r>
 800433e:	230c      	movs	r3, #12
 8004340:	f8ca 3000 	str.w	r3, [sl]
 8004344:	89a3      	ldrh	r3, [r4, #12]
 8004346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800434a:	81a3      	strh	r3, [r4, #12]
 800434c:	f04f 30ff 	mov.w	r0, #4294967295
 8004350:	e7e9      	b.n	8004326 <__ssputs_r+0x8a>
	...

08004354 <_svfiprintf_r>:
 8004354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004358:	4698      	mov	r8, r3
 800435a:	898b      	ldrh	r3, [r1, #12]
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	b09d      	sub	sp, #116	@ 0x74
 8004360:	4607      	mov	r7, r0
 8004362:	460d      	mov	r5, r1
 8004364:	4614      	mov	r4, r2
 8004366:	d510      	bpl.n	800438a <_svfiprintf_r+0x36>
 8004368:	690b      	ldr	r3, [r1, #16]
 800436a:	b973      	cbnz	r3, 800438a <_svfiprintf_r+0x36>
 800436c:	2140      	movs	r1, #64	@ 0x40
 800436e:	f7ff ff09 	bl	8004184 <_malloc_r>
 8004372:	6028      	str	r0, [r5, #0]
 8004374:	6128      	str	r0, [r5, #16]
 8004376:	b930      	cbnz	r0, 8004386 <_svfiprintf_r+0x32>
 8004378:	230c      	movs	r3, #12
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	b01d      	add	sp, #116	@ 0x74
 8004382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004386:	2340      	movs	r3, #64	@ 0x40
 8004388:	616b      	str	r3, [r5, #20]
 800438a:	2300      	movs	r3, #0
 800438c:	9309      	str	r3, [sp, #36]	@ 0x24
 800438e:	2320      	movs	r3, #32
 8004390:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004394:	f8cd 800c 	str.w	r8, [sp, #12]
 8004398:	2330      	movs	r3, #48	@ 0x30
 800439a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004538 <_svfiprintf_r+0x1e4>
 800439e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043a2:	f04f 0901 	mov.w	r9, #1
 80043a6:	4623      	mov	r3, r4
 80043a8:	469a      	mov	sl, r3
 80043aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043ae:	b10a      	cbz	r2, 80043b4 <_svfiprintf_r+0x60>
 80043b0:	2a25      	cmp	r2, #37	@ 0x25
 80043b2:	d1f9      	bne.n	80043a8 <_svfiprintf_r+0x54>
 80043b4:	ebba 0b04 	subs.w	fp, sl, r4
 80043b8:	d00b      	beq.n	80043d2 <_svfiprintf_r+0x7e>
 80043ba:	465b      	mov	r3, fp
 80043bc:	4622      	mov	r2, r4
 80043be:	4629      	mov	r1, r5
 80043c0:	4638      	mov	r0, r7
 80043c2:	f7ff ff6b 	bl	800429c <__ssputs_r>
 80043c6:	3001      	adds	r0, #1
 80043c8:	f000 80a7 	beq.w	800451a <_svfiprintf_r+0x1c6>
 80043cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043ce:	445a      	add	r2, fp
 80043d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80043d2:	f89a 3000 	ldrb.w	r3, [sl]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 809f 	beq.w	800451a <_svfiprintf_r+0x1c6>
 80043dc:	2300      	movs	r3, #0
 80043de:	f04f 32ff 	mov.w	r2, #4294967295
 80043e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043e6:	f10a 0a01 	add.w	sl, sl, #1
 80043ea:	9304      	str	r3, [sp, #16]
 80043ec:	9307      	str	r3, [sp, #28]
 80043ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80043f4:	4654      	mov	r4, sl
 80043f6:	2205      	movs	r2, #5
 80043f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043fc:	484e      	ldr	r0, [pc, #312]	@ (8004538 <_svfiprintf_r+0x1e4>)
 80043fe:	f7fb ff0f 	bl	8000220 <memchr>
 8004402:	9a04      	ldr	r2, [sp, #16]
 8004404:	b9d8      	cbnz	r0, 800443e <_svfiprintf_r+0xea>
 8004406:	06d0      	lsls	r0, r2, #27
 8004408:	bf44      	itt	mi
 800440a:	2320      	movmi	r3, #32
 800440c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004410:	0711      	lsls	r1, r2, #28
 8004412:	bf44      	itt	mi
 8004414:	232b      	movmi	r3, #43	@ 0x2b
 8004416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800441a:	f89a 3000 	ldrb.w	r3, [sl]
 800441e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004420:	d015      	beq.n	800444e <_svfiprintf_r+0xfa>
 8004422:	9a07      	ldr	r2, [sp, #28]
 8004424:	4654      	mov	r4, sl
 8004426:	2000      	movs	r0, #0
 8004428:	f04f 0c0a 	mov.w	ip, #10
 800442c:	4621      	mov	r1, r4
 800442e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004432:	3b30      	subs	r3, #48	@ 0x30
 8004434:	2b09      	cmp	r3, #9
 8004436:	d94b      	bls.n	80044d0 <_svfiprintf_r+0x17c>
 8004438:	b1b0      	cbz	r0, 8004468 <_svfiprintf_r+0x114>
 800443a:	9207      	str	r2, [sp, #28]
 800443c:	e014      	b.n	8004468 <_svfiprintf_r+0x114>
 800443e:	eba0 0308 	sub.w	r3, r0, r8
 8004442:	fa09 f303 	lsl.w	r3, r9, r3
 8004446:	4313      	orrs	r3, r2
 8004448:	9304      	str	r3, [sp, #16]
 800444a:	46a2      	mov	sl, r4
 800444c:	e7d2      	b.n	80043f4 <_svfiprintf_r+0xa0>
 800444e:	9b03      	ldr	r3, [sp, #12]
 8004450:	1d19      	adds	r1, r3, #4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	9103      	str	r1, [sp, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	bfbb      	ittet	lt
 800445a:	425b      	neglt	r3, r3
 800445c:	f042 0202 	orrlt.w	r2, r2, #2
 8004460:	9307      	strge	r3, [sp, #28]
 8004462:	9307      	strlt	r3, [sp, #28]
 8004464:	bfb8      	it	lt
 8004466:	9204      	strlt	r2, [sp, #16]
 8004468:	7823      	ldrb	r3, [r4, #0]
 800446a:	2b2e      	cmp	r3, #46	@ 0x2e
 800446c:	d10a      	bne.n	8004484 <_svfiprintf_r+0x130>
 800446e:	7863      	ldrb	r3, [r4, #1]
 8004470:	2b2a      	cmp	r3, #42	@ 0x2a
 8004472:	d132      	bne.n	80044da <_svfiprintf_r+0x186>
 8004474:	9b03      	ldr	r3, [sp, #12]
 8004476:	1d1a      	adds	r2, r3, #4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	9203      	str	r2, [sp, #12]
 800447c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004480:	3402      	adds	r4, #2
 8004482:	9305      	str	r3, [sp, #20]
 8004484:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004548 <_svfiprintf_r+0x1f4>
 8004488:	7821      	ldrb	r1, [r4, #0]
 800448a:	2203      	movs	r2, #3
 800448c:	4650      	mov	r0, sl
 800448e:	f7fb fec7 	bl	8000220 <memchr>
 8004492:	b138      	cbz	r0, 80044a4 <_svfiprintf_r+0x150>
 8004494:	9b04      	ldr	r3, [sp, #16]
 8004496:	eba0 000a 	sub.w	r0, r0, sl
 800449a:	2240      	movs	r2, #64	@ 0x40
 800449c:	4082      	lsls	r2, r0
 800449e:	4313      	orrs	r3, r2
 80044a0:	3401      	adds	r4, #1
 80044a2:	9304      	str	r3, [sp, #16]
 80044a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a8:	4824      	ldr	r0, [pc, #144]	@ (800453c <_svfiprintf_r+0x1e8>)
 80044aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044ae:	2206      	movs	r2, #6
 80044b0:	f7fb feb6 	bl	8000220 <memchr>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d036      	beq.n	8004526 <_svfiprintf_r+0x1d2>
 80044b8:	4b21      	ldr	r3, [pc, #132]	@ (8004540 <_svfiprintf_r+0x1ec>)
 80044ba:	bb1b      	cbnz	r3, 8004504 <_svfiprintf_r+0x1b0>
 80044bc:	9b03      	ldr	r3, [sp, #12]
 80044be:	3307      	adds	r3, #7
 80044c0:	f023 0307 	bic.w	r3, r3, #7
 80044c4:	3308      	adds	r3, #8
 80044c6:	9303      	str	r3, [sp, #12]
 80044c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044ca:	4433      	add	r3, r6
 80044cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80044ce:	e76a      	b.n	80043a6 <_svfiprintf_r+0x52>
 80044d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80044d4:	460c      	mov	r4, r1
 80044d6:	2001      	movs	r0, #1
 80044d8:	e7a8      	b.n	800442c <_svfiprintf_r+0xd8>
 80044da:	2300      	movs	r3, #0
 80044dc:	3401      	adds	r4, #1
 80044de:	9305      	str	r3, [sp, #20]
 80044e0:	4619      	mov	r1, r3
 80044e2:	f04f 0c0a 	mov.w	ip, #10
 80044e6:	4620      	mov	r0, r4
 80044e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044ec:	3a30      	subs	r2, #48	@ 0x30
 80044ee:	2a09      	cmp	r2, #9
 80044f0:	d903      	bls.n	80044fa <_svfiprintf_r+0x1a6>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0c6      	beq.n	8004484 <_svfiprintf_r+0x130>
 80044f6:	9105      	str	r1, [sp, #20]
 80044f8:	e7c4      	b.n	8004484 <_svfiprintf_r+0x130>
 80044fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80044fe:	4604      	mov	r4, r0
 8004500:	2301      	movs	r3, #1
 8004502:	e7f0      	b.n	80044e6 <_svfiprintf_r+0x192>
 8004504:	ab03      	add	r3, sp, #12
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	462a      	mov	r2, r5
 800450a:	4b0e      	ldr	r3, [pc, #56]	@ (8004544 <_svfiprintf_r+0x1f0>)
 800450c:	a904      	add	r1, sp, #16
 800450e:	4638      	mov	r0, r7
 8004510:	f3af 8000 	nop.w
 8004514:	1c42      	adds	r2, r0, #1
 8004516:	4606      	mov	r6, r0
 8004518:	d1d6      	bne.n	80044c8 <_svfiprintf_r+0x174>
 800451a:	89ab      	ldrh	r3, [r5, #12]
 800451c:	065b      	lsls	r3, r3, #25
 800451e:	f53f af2d 	bmi.w	800437c <_svfiprintf_r+0x28>
 8004522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004524:	e72c      	b.n	8004380 <_svfiprintf_r+0x2c>
 8004526:	ab03      	add	r3, sp, #12
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	462a      	mov	r2, r5
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <_svfiprintf_r+0x1f0>)
 800452e:	a904      	add	r1, sp, #16
 8004530:	4638      	mov	r0, r7
 8004532:	f000 f879 	bl	8004628 <_printf_i>
 8004536:	e7ed      	b.n	8004514 <_svfiprintf_r+0x1c0>
 8004538:	080050fb 	.word	0x080050fb
 800453c:	08005105 	.word	0x08005105
 8004540:	00000000 	.word	0x00000000
 8004544:	0800429d 	.word	0x0800429d
 8004548:	08005101 	.word	0x08005101

0800454c <_printf_common>:
 800454c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004550:	4616      	mov	r6, r2
 8004552:	4698      	mov	r8, r3
 8004554:	688a      	ldr	r2, [r1, #8]
 8004556:	690b      	ldr	r3, [r1, #16]
 8004558:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800455c:	4293      	cmp	r3, r2
 800455e:	bfb8      	it	lt
 8004560:	4613      	movlt	r3, r2
 8004562:	6033      	str	r3, [r6, #0]
 8004564:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004568:	4607      	mov	r7, r0
 800456a:	460c      	mov	r4, r1
 800456c:	b10a      	cbz	r2, 8004572 <_printf_common+0x26>
 800456e:	3301      	adds	r3, #1
 8004570:	6033      	str	r3, [r6, #0]
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	0699      	lsls	r1, r3, #26
 8004576:	bf42      	ittt	mi
 8004578:	6833      	ldrmi	r3, [r6, #0]
 800457a:	3302      	addmi	r3, #2
 800457c:	6033      	strmi	r3, [r6, #0]
 800457e:	6825      	ldr	r5, [r4, #0]
 8004580:	f015 0506 	ands.w	r5, r5, #6
 8004584:	d106      	bne.n	8004594 <_printf_common+0x48>
 8004586:	f104 0a19 	add.w	sl, r4, #25
 800458a:	68e3      	ldr	r3, [r4, #12]
 800458c:	6832      	ldr	r2, [r6, #0]
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	42ab      	cmp	r3, r5
 8004592:	dc26      	bgt.n	80045e2 <_printf_common+0x96>
 8004594:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004598:	6822      	ldr	r2, [r4, #0]
 800459a:	3b00      	subs	r3, #0
 800459c:	bf18      	it	ne
 800459e:	2301      	movne	r3, #1
 80045a0:	0692      	lsls	r2, r2, #26
 80045a2:	d42b      	bmi.n	80045fc <_printf_common+0xb0>
 80045a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045a8:	4641      	mov	r1, r8
 80045aa:	4638      	mov	r0, r7
 80045ac:	47c8      	blx	r9
 80045ae:	3001      	adds	r0, #1
 80045b0:	d01e      	beq.n	80045f0 <_printf_common+0xa4>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	6922      	ldr	r2, [r4, #16]
 80045b6:	f003 0306 	and.w	r3, r3, #6
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	bf02      	ittt	eq
 80045be:	68e5      	ldreq	r5, [r4, #12]
 80045c0:	6833      	ldreq	r3, [r6, #0]
 80045c2:	1aed      	subeq	r5, r5, r3
 80045c4:	68a3      	ldr	r3, [r4, #8]
 80045c6:	bf0c      	ite	eq
 80045c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045cc:	2500      	movne	r5, #0
 80045ce:	4293      	cmp	r3, r2
 80045d0:	bfc4      	itt	gt
 80045d2:	1a9b      	subgt	r3, r3, r2
 80045d4:	18ed      	addgt	r5, r5, r3
 80045d6:	2600      	movs	r6, #0
 80045d8:	341a      	adds	r4, #26
 80045da:	42b5      	cmp	r5, r6
 80045dc:	d11a      	bne.n	8004614 <_printf_common+0xc8>
 80045de:	2000      	movs	r0, #0
 80045e0:	e008      	b.n	80045f4 <_printf_common+0xa8>
 80045e2:	2301      	movs	r3, #1
 80045e4:	4652      	mov	r2, sl
 80045e6:	4641      	mov	r1, r8
 80045e8:	4638      	mov	r0, r7
 80045ea:	47c8      	blx	r9
 80045ec:	3001      	adds	r0, #1
 80045ee:	d103      	bne.n	80045f8 <_printf_common+0xac>
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295
 80045f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f8:	3501      	adds	r5, #1
 80045fa:	e7c6      	b.n	800458a <_printf_common+0x3e>
 80045fc:	18e1      	adds	r1, r4, r3
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	2030      	movs	r0, #48	@ 0x30
 8004602:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004606:	4422      	add	r2, r4
 8004608:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800460c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004610:	3302      	adds	r3, #2
 8004612:	e7c7      	b.n	80045a4 <_printf_common+0x58>
 8004614:	2301      	movs	r3, #1
 8004616:	4622      	mov	r2, r4
 8004618:	4641      	mov	r1, r8
 800461a:	4638      	mov	r0, r7
 800461c:	47c8      	blx	r9
 800461e:	3001      	adds	r0, #1
 8004620:	d0e6      	beq.n	80045f0 <_printf_common+0xa4>
 8004622:	3601      	adds	r6, #1
 8004624:	e7d9      	b.n	80045da <_printf_common+0x8e>
	...

08004628 <_printf_i>:
 8004628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800462c:	7e0f      	ldrb	r7, [r1, #24]
 800462e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004630:	2f78      	cmp	r7, #120	@ 0x78
 8004632:	4691      	mov	r9, r2
 8004634:	4680      	mov	r8, r0
 8004636:	460c      	mov	r4, r1
 8004638:	469a      	mov	sl, r3
 800463a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800463e:	d807      	bhi.n	8004650 <_printf_i+0x28>
 8004640:	2f62      	cmp	r7, #98	@ 0x62
 8004642:	d80a      	bhi.n	800465a <_printf_i+0x32>
 8004644:	2f00      	cmp	r7, #0
 8004646:	f000 80d1 	beq.w	80047ec <_printf_i+0x1c4>
 800464a:	2f58      	cmp	r7, #88	@ 0x58
 800464c:	f000 80b8 	beq.w	80047c0 <_printf_i+0x198>
 8004650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004654:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004658:	e03a      	b.n	80046d0 <_printf_i+0xa8>
 800465a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800465e:	2b15      	cmp	r3, #21
 8004660:	d8f6      	bhi.n	8004650 <_printf_i+0x28>
 8004662:	a101      	add	r1, pc, #4	@ (adr r1, 8004668 <_printf_i+0x40>)
 8004664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004668:	080046c1 	.word	0x080046c1
 800466c:	080046d5 	.word	0x080046d5
 8004670:	08004651 	.word	0x08004651
 8004674:	08004651 	.word	0x08004651
 8004678:	08004651 	.word	0x08004651
 800467c:	08004651 	.word	0x08004651
 8004680:	080046d5 	.word	0x080046d5
 8004684:	08004651 	.word	0x08004651
 8004688:	08004651 	.word	0x08004651
 800468c:	08004651 	.word	0x08004651
 8004690:	08004651 	.word	0x08004651
 8004694:	080047d3 	.word	0x080047d3
 8004698:	080046ff 	.word	0x080046ff
 800469c:	0800478d 	.word	0x0800478d
 80046a0:	08004651 	.word	0x08004651
 80046a4:	08004651 	.word	0x08004651
 80046a8:	080047f5 	.word	0x080047f5
 80046ac:	08004651 	.word	0x08004651
 80046b0:	080046ff 	.word	0x080046ff
 80046b4:	08004651 	.word	0x08004651
 80046b8:	08004651 	.word	0x08004651
 80046bc:	08004795 	.word	0x08004795
 80046c0:	6833      	ldr	r3, [r6, #0]
 80046c2:	1d1a      	adds	r2, r3, #4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6032      	str	r2, [r6, #0]
 80046c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046d0:	2301      	movs	r3, #1
 80046d2:	e09c      	b.n	800480e <_printf_i+0x1e6>
 80046d4:	6833      	ldr	r3, [r6, #0]
 80046d6:	6820      	ldr	r0, [r4, #0]
 80046d8:	1d19      	adds	r1, r3, #4
 80046da:	6031      	str	r1, [r6, #0]
 80046dc:	0606      	lsls	r6, r0, #24
 80046de:	d501      	bpl.n	80046e4 <_printf_i+0xbc>
 80046e0:	681d      	ldr	r5, [r3, #0]
 80046e2:	e003      	b.n	80046ec <_printf_i+0xc4>
 80046e4:	0645      	lsls	r5, r0, #25
 80046e6:	d5fb      	bpl.n	80046e0 <_printf_i+0xb8>
 80046e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046ec:	2d00      	cmp	r5, #0
 80046ee:	da03      	bge.n	80046f8 <_printf_i+0xd0>
 80046f0:	232d      	movs	r3, #45	@ 0x2d
 80046f2:	426d      	negs	r5, r5
 80046f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046f8:	4858      	ldr	r0, [pc, #352]	@ (800485c <_printf_i+0x234>)
 80046fa:	230a      	movs	r3, #10
 80046fc:	e011      	b.n	8004722 <_printf_i+0xfa>
 80046fe:	6821      	ldr	r1, [r4, #0]
 8004700:	6833      	ldr	r3, [r6, #0]
 8004702:	0608      	lsls	r0, r1, #24
 8004704:	f853 5b04 	ldr.w	r5, [r3], #4
 8004708:	d402      	bmi.n	8004710 <_printf_i+0xe8>
 800470a:	0649      	lsls	r1, r1, #25
 800470c:	bf48      	it	mi
 800470e:	b2ad      	uxthmi	r5, r5
 8004710:	2f6f      	cmp	r7, #111	@ 0x6f
 8004712:	4852      	ldr	r0, [pc, #328]	@ (800485c <_printf_i+0x234>)
 8004714:	6033      	str	r3, [r6, #0]
 8004716:	bf14      	ite	ne
 8004718:	230a      	movne	r3, #10
 800471a:	2308      	moveq	r3, #8
 800471c:	2100      	movs	r1, #0
 800471e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004722:	6866      	ldr	r6, [r4, #4]
 8004724:	60a6      	str	r6, [r4, #8]
 8004726:	2e00      	cmp	r6, #0
 8004728:	db05      	blt.n	8004736 <_printf_i+0x10e>
 800472a:	6821      	ldr	r1, [r4, #0]
 800472c:	432e      	orrs	r6, r5
 800472e:	f021 0104 	bic.w	r1, r1, #4
 8004732:	6021      	str	r1, [r4, #0]
 8004734:	d04b      	beq.n	80047ce <_printf_i+0x1a6>
 8004736:	4616      	mov	r6, r2
 8004738:	fbb5 f1f3 	udiv	r1, r5, r3
 800473c:	fb03 5711 	mls	r7, r3, r1, r5
 8004740:	5dc7      	ldrb	r7, [r0, r7]
 8004742:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004746:	462f      	mov	r7, r5
 8004748:	42bb      	cmp	r3, r7
 800474a:	460d      	mov	r5, r1
 800474c:	d9f4      	bls.n	8004738 <_printf_i+0x110>
 800474e:	2b08      	cmp	r3, #8
 8004750:	d10b      	bne.n	800476a <_printf_i+0x142>
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	07df      	lsls	r7, r3, #31
 8004756:	d508      	bpl.n	800476a <_printf_i+0x142>
 8004758:	6923      	ldr	r3, [r4, #16]
 800475a:	6861      	ldr	r1, [r4, #4]
 800475c:	4299      	cmp	r1, r3
 800475e:	bfde      	ittt	le
 8004760:	2330      	movle	r3, #48	@ 0x30
 8004762:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004766:	f106 36ff 	addle.w	r6, r6, #4294967295
 800476a:	1b92      	subs	r2, r2, r6
 800476c:	6122      	str	r2, [r4, #16]
 800476e:	f8cd a000 	str.w	sl, [sp]
 8004772:	464b      	mov	r3, r9
 8004774:	aa03      	add	r2, sp, #12
 8004776:	4621      	mov	r1, r4
 8004778:	4640      	mov	r0, r8
 800477a:	f7ff fee7 	bl	800454c <_printf_common>
 800477e:	3001      	adds	r0, #1
 8004780:	d14a      	bne.n	8004818 <_printf_i+0x1f0>
 8004782:	f04f 30ff 	mov.w	r0, #4294967295
 8004786:	b004      	add	sp, #16
 8004788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	f043 0320 	orr.w	r3, r3, #32
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	4832      	ldr	r0, [pc, #200]	@ (8004860 <_printf_i+0x238>)
 8004796:	2778      	movs	r7, #120	@ 0x78
 8004798:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	6831      	ldr	r1, [r6, #0]
 80047a0:	061f      	lsls	r7, r3, #24
 80047a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80047a6:	d402      	bmi.n	80047ae <_printf_i+0x186>
 80047a8:	065f      	lsls	r7, r3, #25
 80047aa:	bf48      	it	mi
 80047ac:	b2ad      	uxthmi	r5, r5
 80047ae:	6031      	str	r1, [r6, #0]
 80047b0:	07d9      	lsls	r1, r3, #31
 80047b2:	bf44      	itt	mi
 80047b4:	f043 0320 	orrmi.w	r3, r3, #32
 80047b8:	6023      	strmi	r3, [r4, #0]
 80047ba:	b11d      	cbz	r5, 80047c4 <_printf_i+0x19c>
 80047bc:	2310      	movs	r3, #16
 80047be:	e7ad      	b.n	800471c <_printf_i+0xf4>
 80047c0:	4826      	ldr	r0, [pc, #152]	@ (800485c <_printf_i+0x234>)
 80047c2:	e7e9      	b.n	8004798 <_printf_i+0x170>
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	f023 0320 	bic.w	r3, r3, #32
 80047ca:	6023      	str	r3, [r4, #0]
 80047cc:	e7f6      	b.n	80047bc <_printf_i+0x194>
 80047ce:	4616      	mov	r6, r2
 80047d0:	e7bd      	b.n	800474e <_printf_i+0x126>
 80047d2:	6833      	ldr	r3, [r6, #0]
 80047d4:	6825      	ldr	r5, [r4, #0]
 80047d6:	6961      	ldr	r1, [r4, #20]
 80047d8:	1d18      	adds	r0, r3, #4
 80047da:	6030      	str	r0, [r6, #0]
 80047dc:	062e      	lsls	r6, r5, #24
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	d501      	bpl.n	80047e6 <_printf_i+0x1be>
 80047e2:	6019      	str	r1, [r3, #0]
 80047e4:	e002      	b.n	80047ec <_printf_i+0x1c4>
 80047e6:	0668      	lsls	r0, r5, #25
 80047e8:	d5fb      	bpl.n	80047e2 <_printf_i+0x1ba>
 80047ea:	8019      	strh	r1, [r3, #0]
 80047ec:	2300      	movs	r3, #0
 80047ee:	6123      	str	r3, [r4, #16]
 80047f0:	4616      	mov	r6, r2
 80047f2:	e7bc      	b.n	800476e <_printf_i+0x146>
 80047f4:	6833      	ldr	r3, [r6, #0]
 80047f6:	1d1a      	adds	r2, r3, #4
 80047f8:	6032      	str	r2, [r6, #0]
 80047fa:	681e      	ldr	r6, [r3, #0]
 80047fc:	6862      	ldr	r2, [r4, #4]
 80047fe:	2100      	movs	r1, #0
 8004800:	4630      	mov	r0, r6
 8004802:	f7fb fd0d 	bl	8000220 <memchr>
 8004806:	b108      	cbz	r0, 800480c <_printf_i+0x1e4>
 8004808:	1b80      	subs	r0, r0, r6
 800480a:	6060      	str	r0, [r4, #4]
 800480c:	6863      	ldr	r3, [r4, #4]
 800480e:	6123      	str	r3, [r4, #16]
 8004810:	2300      	movs	r3, #0
 8004812:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004816:	e7aa      	b.n	800476e <_printf_i+0x146>
 8004818:	6923      	ldr	r3, [r4, #16]
 800481a:	4632      	mov	r2, r6
 800481c:	4649      	mov	r1, r9
 800481e:	4640      	mov	r0, r8
 8004820:	47d0      	blx	sl
 8004822:	3001      	adds	r0, #1
 8004824:	d0ad      	beq.n	8004782 <_printf_i+0x15a>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	079b      	lsls	r3, r3, #30
 800482a:	d413      	bmi.n	8004854 <_printf_i+0x22c>
 800482c:	68e0      	ldr	r0, [r4, #12]
 800482e:	9b03      	ldr	r3, [sp, #12]
 8004830:	4298      	cmp	r0, r3
 8004832:	bfb8      	it	lt
 8004834:	4618      	movlt	r0, r3
 8004836:	e7a6      	b.n	8004786 <_printf_i+0x15e>
 8004838:	2301      	movs	r3, #1
 800483a:	4632      	mov	r2, r6
 800483c:	4649      	mov	r1, r9
 800483e:	4640      	mov	r0, r8
 8004840:	47d0      	blx	sl
 8004842:	3001      	adds	r0, #1
 8004844:	d09d      	beq.n	8004782 <_printf_i+0x15a>
 8004846:	3501      	adds	r5, #1
 8004848:	68e3      	ldr	r3, [r4, #12]
 800484a:	9903      	ldr	r1, [sp, #12]
 800484c:	1a5b      	subs	r3, r3, r1
 800484e:	42ab      	cmp	r3, r5
 8004850:	dcf2      	bgt.n	8004838 <_printf_i+0x210>
 8004852:	e7eb      	b.n	800482c <_printf_i+0x204>
 8004854:	2500      	movs	r5, #0
 8004856:	f104 0619 	add.w	r6, r4, #25
 800485a:	e7f5      	b.n	8004848 <_printf_i+0x220>
 800485c:	0800510c 	.word	0x0800510c
 8004860:	0800511d 	.word	0x0800511d

08004864 <__sflush_r>:
 8004864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800486c:	0716      	lsls	r6, r2, #28
 800486e:	4605      	mov	r5, r0
 8004870:	460c      	mov	r4, r1
 8004872:	d454      	bmi.n	800491e <__sflush_r+0xba>
 8004874:	684b      	ldr	r3, [r1, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	dc02      	bgt.n	8004880 <__sflush_r+0x1c>
 800487a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	dd48      	ble.n	8004912 <__sflush_r+0xae>
 8004880:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004882:	2e00      	cmp	r6, #0
 8004884:	d045      	beq.n	8004912 <__sflush_r+0xae>
 8004886:	2300      	movs	r3, #0
 8004888:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800488c:	682f      	ldr	r7, [r5, #0]
 800488e:	6a21      	ldr	r1, [r4, #32]
 8004890:	602b      	str	r3, [r5, #0]
 8004892:	d030      	beq.n	80048f6 <__sflush_r+0x92>
 8004894:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	0759      	lsls	r1, r3, #29
 800489a:	d505      	bpl.n	80048a8 <__sflush_r+0x44>
 800489c:	6863      	ldr	r3, [r4, #4]
 800489e:	1ad2      	subs	r2, r2, r3
 80048a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80048a2:	b10b      	cbz	r3, 80048a8 <__sflush_r+0x44>
 80048a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048a6:	1ad2      	subs	r2, r2, r3
 80048a8:	2300      	movs	r3, #0
 80048aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048ac:	6a21      	ldr	r1, [r4, #32]
 80048ae:	4628      	mov	r0, r5
 80048b0:	47b0      	blx	r6
 80048b2:	1c43      	adds	r3, r0, #1
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	d106      	bne.n	80048c6 <__sflush_r+0x62>
 80048b8:	6829      	ldr	r1, [r5, #0]
 80048ba:	291d      	cmp	r1, #29
 80048bc:	d82b      	bhi.n	8004916 <__sflush_r+0xb2>
 80048be:	4a2a      	ldr	r2, [pc, #168]	@ (8004968 <__sflush_r+0x104>)
 80048c0:	40ca      	lsrs	r2, r1
 80048c2:	07d6      	lsls	r6, r2, #31
 80048c4:	d527      	bpl.n	8004916 <__sflush_r+0xb2>
 80048c6:	2200      	movs	r2, #0
 80048c8:	6062      	str	r2, [r4, #4]
 80048ca:	04d9      	lsls	r1, r3, #19
 80048cc:	6922      	ldr	r2, [r4, #16]
 80048ce:	6022      	str	r2, [r4, #0]
 80048d0:	d504      	bpl.n	80048dc <__sflush_r+0x78>
 80048d2:	1c42      	adds	r2, r0, #1
 80048d4:	d101      	bne.n	80048da <__sflush_r+0x76>
 80048d6:	682b      	ldr	r3, [r5, #0]
 80048d8:	b903      	cbnz	r3, 80048dc <__sflush_r+0x78>
 80048da:	6560      	str	r0, [r4, #84]	@ 0x54
 80048dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048de:	602f      	str	r7, [r5, #0]
 80048e0:	b1b9      	cbz	r1, 8004912 <__sflush_r+0xae>
 80048e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048e6:	4299      	cmp	r1, r3
 80048e8:	d002      	beq.n	80048f0 <__sflush_r+0x8c>
 80048ea:	4628      	mov	r0, r5
 80048ec:	f7ff fbd6 	bl	800409c <_free_r>
 80048f0:	2300      	movs	r3, #0
 80048f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80048f4:	e00d      	b.n	8004912 <__sflush_r+0xae>
 80048f6:	2301      	movs	r3, #1
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b0      	blx	r6
 80048fc:	4602      	mov	r2, r0
 80048fe:	1c50      	adds	r0, r2, #1
 8004900:	d1c9      	bne.n	8004896 <__sflush_r+0x32>
 8004902:	682b      	ldr	r3, [r5, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0c6      	beq.n	8004896 <__sflush_r+0x32>
 8004908:	2b1d      	cmp	r3, #29
 800490a:	d001      	beq.n	8004910 <__sflush_r+0xac>
 800490c:	2b16      	cmp	r3, #22
 800490e:	d11e      	bne.n	800494e <__sflush_r+0xea>
 8004910:	602f      	str	r7, [r5, #0]
 8004912:	2000      	movs	r0, #0
 8004914:	e022      	b.n	800495c <__sflush_r+0xf8>
 8004916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800491a:	b21b      	sxth	r3, r3
 800491c:	e01b      	b.n	8004956 <__sflush_r+0xf2>
 800491e:	690f      	ldr	r7, [r1, #16]
 8004920:	2f00      	cmp	r7, #0
 8004922:	d0f6      	beq.n	8004912 <__sflush_r+0xae>
 8004924:	0793      	lsls	r3, r2, #30
 8004926:	680e      	ldr	r6, [r1, #0]
 8004928:	bf08      	it	eq
 800492a:	694b      	ldreq	r3, [r1, #20]
 800492c:	600f      	str	r7, [r1, #0]
 800492e:	bf18      	it	ne
 8004930:	2300      	movne	r3, #0
 8004932:	eba6 0807 	sub.w	r8, r6, r7
 8004936:	608b      	str	r3, [r1, #8]
 8004938:	f1b8 0f00 	cmp.w	r8, #0
 800493c:	dde9      	ble.n	8004912 <__sflush_r+0xae>
 800493e:	6a21      	ldr	r1, [r4, #32]
 8004940:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004942:	4643      	mov	r3, r8
 8004944:	463a      	mov	r2, r7
 8004946:	4628      	mov	r0, r5
 8004948:	47b0      	blx	r6
 800494a:	2800      	cmp	r0, #0
 800494c:	dc08      	bgt.n	8004960 <__sflush_r+0xfc>
 800494e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004956:	81a3      	strh	r3, [r4, #12]
 8004958:	f04f 30ff 	mov.w	r0, #4294967295
 800495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004960:	4407      	add	r7, r0
 8004962:	eba8 0800 	sub.w	r8, r8, r0
 8004966:	e7e7      	b.n	8004938 <__sflush_r+0xd4>
 8004968:	20400001 	.word	0x20400001

0800496c <_fflush_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	690b      	ldr	r3, [r1, #16]
 8004970:	4605      	mov	r5, r0
 8004972:	460c      	mov	r4, r1
 8004974:	b913      	cbnz	r3, 800497c <_fflush_r+0x10>
 8004976:	2500      	movs	r5, #0
 8004978:	4628      	mov	r0, r5
 800497a:	bd38      	pop	{r3, r4, r5, pc}
 800497c:	b118      	cbz	r0, 8004986 <_fflush_r+0x1a>
 800497e:	6a03      	ldr	r3, [r0, #32]
 8004980:	b90b      	cbnz	r3, 8004986 <_fflush_r+0x1a>
 8004982:	f7ff fa55 	bl	8003e30 <__sinit>
 8004986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f3      	beq.n	8004976 <_fflush_r+0xa>
 800498e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004990:	07d0      	lsls	r0, r2, #31
 8004992:	d404      	bmi.n	800499e <_fflush_r+0x32>
 8004994:	0599      	lsls	r1, r3, #22
 8004996:	d402      	bmi.n	800499e <_fflush_r+0x32>
 8004998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800499a:	f7ff fb5e 	bl	800405a <__retarget_lock_acquire_recursive>
 800499e:	4628      	mov	r0, r5
 80049a0:	4621      	mov	r1, r4
 80049a2:	f7ff ff5f 	bl	8004864 <__sflush_r>
 80049a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049a8:	07da      	lsls	r2, r3, #31
 80049aa:	4605      	mov	r5, r0
 80049ac:	d4e4      	bmi.n	8004978 <_fflush_r+0xc>
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	059b      	lsls	r3, r3, #22
 80049b2:	d4e1      	bmi.n	8004978 <_fflush_r+0xc>
 80049b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049b6:	f7ff fb51 	bl	800405c <__retarget_lock_release_recursive>
 80049ba:	e7dd      	b.n	8004978 <_fflush_r+0xc>

080049bc <fiprintf>:
 80049bc:	b40e      	push	{r1, r2, r3}
 80049be:	b503      	push	{r0, r1, lr}
 80049c0:	4601      	mov	r1, r0
 80049c2:	ab03      	add	r3, sp, #12
 80049c4:	4805      	ldr	r0, [pc, #20]	@ (80049dc <fiprintf+0x20>)
 80049c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ca:	6800      	ldr	r0, [r0, #0]
 80049cc:	9301      	str	r3, [sp, #4]
 80049ce:	f000 f89d 	bl	8004b0c <_vfiprintf_r>
 80049d2:	b002      	add	sp, #8
 80049d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80049d8:	b003      	add	sp, #12
 80049da:	4770      	bx	lr
 80049dc:	20004020 	.word	0x20004020

080049e0 <memmove>:
 80049e0:	4288      	cmp	r0, r1
 80049e2:	b510      	push	{r4, lr}
 80049e4:	eb01 0402 	add.w	r4, r1, r2
 80049e8:	d902      	bls.n	80049f0 <memmove+0x10>
 80049ea:	4284      	cmp	r4, r0
 80049ec:	4623      	mov	r3, r4
 80049ee:	d807      	bhi.n	8004a00 <memmove+0x20>
 80049f0:	1e43      	subs	r3, r0, #1
 80049f2:	42a1      	cmp	r1, r4
 80049f4:	d008      	beq.n	8004a08 <memmove+0x28>
 80049f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049fe:	e7f8      	b.n	80049f2 <memmove+0x12>
 8004a00:	4402      	add	r2, r0
 8004a02:	4601      	mov	r1, r0
 8004a04:	428a      	cmp	r2, r1
 8004a06:	d100      	bne.n	8004a0a <memmove+0x2a>
 8004a08:	bd10      	pop	{r4, pc}
 8004a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a12:	e7f7      	b.n	8004a04 <memmove+0x24>

08004a14 <_sbrk_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4d06      	ldr	r5, [pc, #24]	@ (8004a30 <_sbrk_r+0x1c>)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4608      	mov	r0, r1
 8004a1e:	602b      	str	r3, [r5, #0]
 8004a20:	f7fc fa0a 	bl	8000e38 <_sbrk>
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	d102      	bne.n	8004a2e <_sbrk_r+0x1a>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	b103      	cbz	r3, 8004a2e <_sbrk_r+0x1a>
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	bd38      	pop	{r3, r4, r5, pc}
 8004a30:	20008340 	.word	0x20008340

08004a34 <memcpy>:
 8004a34:	440a      	add	r2, r1
 8004a36:	4291      	cmp	r1, r2
 8004a38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a3c:	d100      	bne.n	8004a40 <memcpy+0xc>
 8004a3e:	4770      	bx	lr
 8004a40:	b510      	push	{r4, lr}
 8004a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a4a:	4291      	cmp	r1, r2
 8004a4c:	d1f9      	bne.n	8004a42 <memcpy+0xe>
 8004a4e:	bd10      	pop	{r4, pc}

08004a50 <abort>:
 8004a50:	b508      	push	{r3, lr}
 8004a52:	2006      	movs	r0, #6
 8004a54:	f000 fa2e 	bl	8004eb4 <raise>
 8004a58:	2001      	movs	r0, #1
 8004a5a:	f7fc f974 	bl	8000d46 <_exit>

08004a5e <_realloc_r>:
 8004a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a62:	4607      	mov	r7, r0
 8004a64:	4614      	mov	r4, r2
 8004a66:	460d      	mov	r5, r1
 8004a68:	b921      	cbnz	r1, 8004a74 <_realloc_r+0x16>
 8004a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6e:	4611      	mov	r1, r2
 8004a70:	f7ff bb88 	b.w	8004184 <_malloc_r>
 8004a74:	b92a      	cbnz	r2, 8004a82 <_realloc_r+0x24>
 8004a76:	f7ff fb11 	bl	800409c <_free_r>
 8004a7a:	4625      	mov	r5, r4
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a82:	f000 fa33 	bl	8004eec <_malloc_usable_size_r>
 8004a86:	4284      	cmp	r4, r0
 8004a88:	4606      	mov	r6, r0
 8004a8a:	d802      	bhi.n	8004a92 <_realloc_r+0x34>
 8004a8c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a90:	d8f4      	bhi.n	8004a7c <_realloc_r+0x1e>
 8004a92:	4621      	mov	r1, r4
 8004a94:	4638      	mov	r0, r7
 8004a96:	f7ff fb75 	bl	8004184 <_malloc_r>
 8004a9a:	4680      	mov	r8, r0
 8004a9c:	b908      	cbnz	r0, 8004aa2 <_realloc_r+0x44>
 8004a9e:	4645      	mov	r5, r8
 8004aa0:	e7ec      	b.n	8004a7c <_realloc_r+0x1e>
 8004aa2:	42b4      	cmp	r4, r6
 8004aa4:	4622      	mov	r2, r4
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	bf28      	it	cs
 8004aaa:	4632      	movcs	r2, r6
 8004aac:	f7ff ffc2 	bl	8004a34 <memcpy>
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	f7ff faf2 	bl	800409c <_free_r>
 8004ab8:	e7f1      	b.n	8004a9e <_realloc_r+0x40>

08004aba <__sfputc_r>:
 8004aba:	6893      	ldr	r3, [r2, #8]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	b410      	push	{r4}
 8004ac2:	6093      	str	r3, [r2, #8]
 8004ac4:	da08      	bge.n	8004ad8 <__sfputc_r+0x1e>
 8004ac6:	6994      	ldr	r4, [r2, #24]
 8004ac8:	42a3      	cmp	r3, r4
 8004aca:	db01      	blt.n	8004ad0 <__sfputc_r+0x16>
 8004acc:	290a      	cmp	r1, #10
 8004ace:	d103      	bne.n	8004ad8 <__sfputc_r+0x1e>
 8004ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ad4:	f000 b932 	b.w	8004d3c <__swbuf_r>
 8004ad8:	6813      	ldr	r3, [r2, #0]
 8004ada:	1c58      	adds	r0, r3, #1
 8004adc:	6010      	str	r0, [r2, #0]
 8004ade:	7019      	strb	r1, [r3, #0]
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <__sfputs_r>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	4606      	mov	r6, r0
 8004aec:	460f      	mov	r7, r1
 8004aee:	4614      	mov	r4, r2
 8004af0:	18d5      	adds	r5, r2, r3
 8004af2:	42ac      	cmp	r4, r5
 8004af4:	d101      	bne.n	8004afa <__sfputs_r+0x12>
 8004af6:	2000      	movs	r0, #0
 8004af8:	e007      	b.n	8004b0a <__sfputs_r+0x22>
 8004afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004afe:	463a      	mov	r2, r7
 8004b00:	4630      	mov	r0, r6
 8004b02:	f7ff ffda 	bl	8004aba <__sfputc_r>
 8004b06:	1c43      	adds	r3, r0, #1
 8004b08:	d1f3      	bne.n	8004af2 <__sfputs_r+0xa>
 8004b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b0c <_vfiprintf_r>:
 8004b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b10:	460d      	mov	r5, r1
 8004b12:	b09d      	sub	sp, #116	@ 0x74
 8004b14:	4614      	mov	r4, r2
 8004b16:	4698      	mov	r8, r3
 8004b18:	4606      	mov	r6, r0
 8004b1a:	b118      	cbz	r0, 8004b24 <_vfiprintf_r+0x18>
 8004b1c:	6a03      	ldr	r3, [r0, #32]
 8004b1e:	b90b      	cbnz	r3, 8004b24 <_vfiprintf_r+0x18>
 8004b20:	f7ff f986 	bl	8003e30 <__sinit>
 8004b24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b26:	07d9      	lsls	r1, r3, #31
 8004b28:	d405      	bmi.n	8004b36 <_vfiprintf_r+0x2a>
 8004b2a:	89ab      	ldrh	r3, [r5, #12]
 8004b2c:	059a      	lsls	r2, r3, #22
 8004b2e:	d402      	bmi.n	8004b36 <_vfiprintf_r+0x2a>
 8004b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b32:	f7ff fa92 	bl	800405a <__retarget_lock_acquire_recursive>
 8004b36:	89ab      	ldrh	r3, [r5, #12]
 8004b38:	071b      	lsls	r3, r3, #28
 8004b3a:	d501      	bpl.n	8004b40 <_vfiprintf_r+0x34>
 8004b3c:	692b      	ldr	r3, [r5, #16]
 8004b3e:	b99b      	cbnz	r3, 8004b68 <_vfiprintf_r+0x5c>
 8004b40:	4629      	mov	r1, r5
 8004b42:	4630      	mov	r0, r6
 8004b44:	f000 f938 	bl	8004db8 <__swsetup_r>
 8004b48:	b170      	cbz	r0, 8004b68 <_vfiprintf_r+0x5c>
 8004b4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b4c:	07dc      	lsls	r4, r3, #31
 8004b4e:	d504      	bpl.n	8004b5a <_vfiprintf_r+0x4e>
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295
 8004b54:	b01d      	add	sp, #116	@ 0x74
 8004b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5a:	89ab      	ldrh	r3, [r5, #12]
 8004b5c:	0598      	lsls	r0, r3, #22
 8004b5e:	d4f7      	bmi.n	8004b50 <_vfiprintf_r+0x44>
 8004b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b62:	f7ff fa7b 	bl	800405c <__retarget_lock_release_recursive>
 8004b66:	e7f3      	b.n	8004b50 <_vfiprintf_r+0x44>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b76:	2330      	movs	r3, #48	@ 0x30
 8004b78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d28 <_vfiprintf_r+0x21c>
 8004b7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b80:	f04f 0901 	mov.w	r9, #1
 8004b84:	4623      	mov	r3, r4
 8004b86:	469a      	mov	sl, r3
 8004b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b8c:	b10a      	cbz	r2, 8004b92 <_vfiprintf_r+0x86>
 8004b8e:	2a25      	cmp	r2, #37	@ 0x25
 8004b90:	d1f9      	bne.n	8004b86 <_vfiprintf_r+0x7a>
 8004b92:	ebba 0b04 	subs.w	fp, sl, r4
 8004b96:	d00b      	beq.n	8004bb0 <_vfiprintf_r+0xa4>
 8004b98:	465b      	mov	r3, fp
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f7ff ffa2 	bl	8004ae8 <__sfputs_r>
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	f000 80a7 	beq.w	8004cf8 <_vfiprintf_r+0x1ec>
 8004baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bac:	445a      	add	r2, fp
 8004bae:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 809f 	beq.w	8004cf8 <_vfiprintf_r+0x1ec>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bc4:	f10a 0a01 	add.w	sl, sl, #1
 8004bc8:	9304      	str	r3, [sp, #16]
 8004bca:	9307      	str	r3, [sp, #28]
 8004bcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bd2:	4654      	mov	r4, sl
 8004bd4:	2205      	movs	r2, #5
 8004bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bda:	4853      	ldr	r0, [pc, #332]	@ (8004d28 <_vfiprintf_r+0x21c>)
 8004bdc:	f7fb fb20 	bl	8000220 <memchr>
 8004be0:	9a04      	ldr	r2, [sp, #16]
 8004be2:	b9d8      	cbnz	r0, 8004c1c <_vfiprintf_r+0x110>
 8004be4:	06d1      	lsls	r1, r2, #27
 8004be6:	bf44      	itt	mi
 8004be8:	2320      	movmi	r3, #32
 8004bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bee:	0713      	lsls	r3, r2, #28
 8004bf0:	bf44      	itt	mi
 8004bf2:	232b      	movmi	r3, #43	@ 0x2b
 8004bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bfe:	d015      	beq.n	8004c2c <_vfiprintf_r+0x120>
 8004c00:	9a07      	ldr	r2, [sp, #28]
 8004c02:	4654      	mov	r4, sl
 8004c04:	2000      	movs	r0, #0
 8004c06:	f04f 0c0a 	mov.w	ip, #10
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c10:	3b30      	subs	r3, #48	@ 0x30
 8004c12:	2b09      	cmp	r3, #9
 8004c14:	d94b      	bls.n	8004cae <_vfiprintf_r+0x1a2>
 8004c16:	b1b0      	cbz	r0, 8004c46 <_vfiprintf_r+0x13a>
 8004c18:	9207      	str	r2, [sp, #28]
 8004c1a:	e014      	b.n	8004c46 <_vfiprintf_r+0x13a>
 8004c1c:	eba0 0308 	sub.w	r3, r0, r8
 8004c20:	fa09 f303 	lsl.w	r3, r9, r3
 8004c24:	4313      	orrs	r3, r2
 8004c26:	9304      	str	r3, [sp, #16]
 8004c28:	46a2      	mov	sl, r4
 8004c2a:	e7d2      	b.n	8004bd2 <_vfiprintf_r+0xc6>
 8004c2c:	9b03      	ldr	r3, [sp, #12]
 8004c2e:	1d19      	adds	r1, r3, #4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	9103      	str	r1, [sp, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bfbb      	ittet	lt
 8004c38:	425b      	neglt	r3, r3
 8004c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8004c3e:	9307      	strge	r3, [sp, #28]
 8004c40:	9307      	strlt	r3, [sp, #28]
 8004c42:	bfb8      	it	lt
 8004c44:	9204      	strlt	r2, [sp, #16]
 8004c46:	7823      	ldrb	r3, [r4, #0]
 8004c48:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c4a:	d10a      	bne.n	8004c62 <_vfiprintf_r+0x156>
 8004c4c:	7863      	ldrb	r3, [r4, #1]
 8004c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c50:	d132      	bne.n	8004cb8 <_vfiprintf_r+0x1ac>
 8004c52:	9b03      	ldr	r3, [sp, #12]
 8004c54:	1d1a      	adds	r2, r3, #4
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	9203      	str	r2, [sp, #12]
 8004c5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c5e:	3402      	adds	r4, #2
 8004c60:	9305      	str	r3, [sp, #20]
 8004c62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d38 <_vfiprintf_r+0x22c>
 8004c66:	7821      	ldrb	r1, [r4, #0]
 8004c68:	2203      	movs	r2, #3
 8004c6a:	4650      	mov	r0, sl
 8004c6c:	f7fb fad8 	bl	8000220 <memchr>
 8004c70:	b138      	cbz	r0, 8004c82 <_vfiprintf_r+0x176>
 8004c72:	9b04      	ldr	r3, [sp, #16]
 8004c74:	eba0 000a 	sub.w	r0, r0, sl
 8004c78:	2240      	movs	r2, #64	@ 0x40
 8004c7a:	4082      	lsls	r2, r0
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	3401      	adds	r4, #1
 8004c80:	9304      	str	r3, [sp, #16]
 8004c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c86:	4829      	ldr	r0, [pc, #164]	@ (8004d2c <_vfiprintf_r+0x220>)
 8004c88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c8c:	2206      	movs	r2, #6
 8004c8e:	f7fb fac7 	bl	8000220 <memchr>
 8004c92:	2800      	cmp	r0, #0
 8004c94:	d03f      	beq.n	8004d16 <_vfiprintf_r+0x20a>
 8004c96:	4b26      	ldr	r3, [pc, #152]	@ (8004d30 <_vfiprintf_r+0x224>)
 8004c98:	bb1b      	cbnz	r3, 8004ce2 <_vfiprintf_r+0x1d6>
 8004c9a:	9b03      	ldr	r3, [sp, #12]
 8004c9c:	3307      	adds	r3, #7
 8004c9e:	f023 0307 	bic.w	r3, r3, #7
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	9303      	str	r3, [sp, #12]
 8004ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ca8:	443b      	add	r3, r7
 8004caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cac:	e76a      	b.n	8004b84 <_vfiprintf_r+0x78>
 8004cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	e7a8      	b.n	8004c0a <_vfiprintf_r+0xfe>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	3401      	adds	r4, #1
 8004cbc:	9305      	str	r3, [sp, #20]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	f04f 0c0a 	mov.w	ip, #10
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cca:	3a30      	subs	r2, #48	@ 0x30
 8004ccc:	2a09      	cmp	r2, #9
 8004cce:	d903      	bls.n	8004cd8 <_vfiprintf_r+0x1cc>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0c6      	beq.n	8004c62 <_vfiprintf_r+0x156>
 8004cd4:	9105      	str	r1, [sp, #20]
 8004cd6:	e7c4      	b.n	8004c62 <_vfiprintf_r+0x156>
 8004cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cdc:	4604      	mov	r4, r0
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e7f0      	b.n	8004cc4 <_vfiprintf_r+0x1b8>
 8004ce2:	ab03      	add	r3, sp, #12
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	462a      	mov	r2, r5
 8004ce8:	4b12      	ldr	r3, [pc, #72]	@ (8004d34 <_vfiprintf_r+0x228>)
 8004cea:	a904      	add	r1, sp, #16
 8004cec:	4630      	mov	r0, r6
 8004cee:	f3af 8000 	nop.w
 8004cf2:	4607      	mov	r7, r0
 8004cf4:	1c78      	adds	r0, r7, #1
 8004cf6:	d1d6      	bne.n	8004ca6 <_vfiprintf_r+0x19a>
 8004cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cfa:	07d9      	lsls	r1, r3, #31
 8004cfc:	d405      	bmi.n	8004d0a <_vfiprintf_r+0x1fe>
 8004cfe:	89ab      	ldrh	r3, [r5, #12]
 8004d00:	059a      	lsls	r2, r3, #22
 8004d02:	d402      	bmi.n	8004d0a <_vfiprintf_r+0x1fe>
 8004d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d06:	f7ff f9a9 	bl	800405c <__retarget_lock_release_recursive>
 8004d0a:	89ab      	ldrh	r3, [r5, #12]
 8004d0c:	065b      	lsls	r3, r3, #25
 8004d0e:	f53f af1f 	bmi.w	8004b50 <_vfiprintf_r+0x44>
 8004d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d14:	e71e      	b.n	8004b54 <_vfiprintf_r+0x48>
 8004d16:	ab03      	add	r3, sp, #12
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	462a      	mov	r2, r5
 8004d1c:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <_vfiprintf_r+0x228>)
 8004d1e:	a904      	add	r1, sp, #16
 8004d20:	4630      	mov	r0, r6
 8004d22:	f7ff fc81 	bl	8004628 <_printf_i>
 8004d26:	e7e4      	b.n	8004cf2 <_vfiprintf_r+0x1e6>
 8004d28:	080050fb 	.word	0x080050fb
 8004d2c:	08005105 	.word	0x08005105
 8004d30:	00000000 	.word	0x00000000
 8004d34:	08004ae9 	.word	0x08004ae9
 8004d38:	08005101 	.word	0x08005101

08004d3c <__swbuf_r>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	460e      	mov	r6, r1
 8004d40:	4614      	mov	r4, r2
 8004d42:	4605      	mov	r5, r0
 8004d44:	b118      	cbz	r0, 8004d4e <__swbuf_r+0x12>
 8004d46:	6a03      	ldr	r3, [r0, #32]
 8004d48:	b90b      	cbnz	r3, 8004d4e <__swbuf_r+0x12>
 8004d4a:	f7ff f871 	bl	8003e30 <__sinit>
 8004d4e:	69a3      	ldr	r3, [r4, #24]
 8004d50:	60a3      	str	r3, [r4, #8]
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	071a      	lsls	r2, r3, #28
 8004d56:	d501      	bpl.n	8004d5c <__swbuf_r+0x20>
 8004d58:	6923      	ldr	r3, [r4, #16]
 8004d5a:	b943      	cbnz	r3, 8004d6e <__swbuf_r+0x32>
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f000 f82a 	bl	8004db8 <__swsetup_r>
 8004d64:	b118      	cbz	r0, 8004d6e <__swbuf_r+0x32>
 8004d66:	f04f 37ff 	mov.w	r7, #4294967295
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	6922      	ldr	r2, [r4, #16]
 8004d72:	1a98      	subs	r0, r3, r2
 8004d74:	6963      	ldr	r3, [r4, #20]
 8004d76:	b2f6      	uxtb	r6, r6
 8004d78:	4283      	cmp	r3, r0
 8004d7a:	4637      	mov	r7, r6
 8004d7c:	dc05      	bgt.n	8004d8a <__swbuf_r+0x4e>
 8004d7e:	4621      	mov	r1, r4
 8004d80:	4628      	mov	r0, r5
 8004d82:	f7ff fdf3 	bl	800496c <_fflush_r>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d1ed      	bne.n	8004d66 <__swbuf_r+0x2a>
 8004d8a:	68a3      	ldr	r3, [r4, #8]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	60a3      	str	r3, [r4, #8]
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	6022      	str	r2, [r4, #0]
 8004d96:	701e      	strb	r6, [r3, #0]
 8004d98:	6962      	ldr	r2, [r4, #20]
 8004d9a:	1c43      	adds	r3, r0, #1
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d004      	beq.n	8004daa <__swbuf_r+0x6e>
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	07db      	lsls	r3, r3, #31
 8004da4:	d5e1      	bpl.n	8004d6a <__swbuf_r+0x2e>
 8004da6:	2e0a      	cmp	r6, #10
 8004da8:	d1df      	bne.n	8004d6a <__swbuf_r+0x2e>
 8004daa:	4621      	mov	r1, r4
 8004dac:	4628      	mov	r0, r5
 8004dae:	f7ff fddd 	bl	800496c <_fflush_r>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d0d9      	beq.n	8004d6a <__swbuf_r+0x2e>
 8004db6:	e7d6      	b.n	8004d66 <__swbuf_r+0x2a>

08004db8 <__swsetup_r>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	4b29      	ldr	r3, [pc, #164]	@ (8004e60 <__swsetup_r+0xa8>)
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	b118      	cbz	r0, 8004dcc <__swsetup_r+0x14>
 8004dc4:	6a03      	ldr	r3, [r0, #32]
 8004dc6:	b90b      	cbnz	r3, 8004dcc <__swsetup_r+0x14>
 8004dc8:	f7ff f832 	bl	8003e30 <__sinit>
 8004dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dd0:	0719      	lsls	r1, r3, #28
 8004dd2:	d422      	bmi.n	8004e1a <__swsetup_r+0x62>
 8004dd4:	06da      	lsls	r2, r3, #27
 8004dd6:	d407      	bmi.n	8004de8 <__swsetup_r+0x30>
 8004dd8:	2209      	movs	r2, #9
 8004dda:	602a      	str	r2, [r5, #0]
 8004ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004de0:	81a3      	strh	r3, [r4, #12]
 8004de2:	f04f 30ff 	mov.w	r0, #4294967295
 8004de6:	e033      	b.n	8004e50 <__swsetup_r+0x98>
 8004de8:	0758      	lsls	r0, r3, #29
 8004dea:	d512      	bpl.n	8004e12 <__swsetup_r+0x5a>
 8004dec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dee:	b141      	cbz	r1, 8004e02 <__swsetup_r+0x4a>
 8004df0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004df4:	4299      	cmp	r1, r3
 8004df6:	d002      	beq.n	8004dfe <__swsetup_r+0x46>
 8004df8:	4628      	mov	r0, r5
 8004dfa:	f7ff f94f 	bl	800409c <_free_r>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e02:	89a3      	ldrh	r3, [r4, #12]
 8004e04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e08:	81a3      	strh	r3, [r4, #12]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	6063      	str	r3, [r4, #4]
 8004e0e:	6923      	ldr	r3, [r4, #16]
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	89a3      	ldrh	r3, [r4, #12]
 8004e14:	f043 0308 	orr.w	r3, r3, #8
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	6923      	ldr	r3, [r4, #16]
 8004e1c:	b94b      	cbnz	r3, 8004e32 <__swsetup_r+0x7a>
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e28:	d003      	beq.n	8004e32 <__swsetup_r+0x7a>
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f000 f88b 	bl	8004f48 <__smakebuf_r>
 8004e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e36:	f013 0201 	ands.w	r2, r3, #1
 8004e3a:	d00a      	beq.n	8004e52 <__swsetup_r+0x9a>
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	60a2      	str	r2, [r4, #8]
 8004e40:	6962      	ldr	r2, [r4, #20]
 8004e42:	4252      	negs	r2, r2
 8004e44:	61a2      	str	r2, [r4, #24]
 8004e46:	6922      	ldr	r2, [r4, #16]
 8004e48:	b942      	cbnz	r2, 8004e5c <__swsetup_r+0xa4>
 8004e4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e4e:	d1c5      	bne.n	8004ddc <__swsetup_r+0x24>
 8004e50:	bd38      	pop	{r3, r4, r5, pc}
 8004e52:	0799      	lsls	r1, r3, #30
 8004e54:	bf58      	it	pl
 8004e56:	6962      	ldrpl	r2, [r4, #20]
 8004e58:	60a2      	str	r2, [r4, #8]
 8004e5a:	e7f4      	b.n	8004e46 <__swsetup_r+0x8e>
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	e7f7      	b.n	8004e50 <__swsetup_r+0x98>
 8004e60:	20004020 	.word	0x20004020

08004e64 <_raise_r>:
 8004e64:	291f      	cmp	r1, #31
 8004e66:	b538      	push	{r3, r4, r5, lr}
 8004e68:	4605      	mov	r5, r0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	d904      	bls.n	8004e78 <_raise_r+0x14>
 8004e6e:	2316      	movs	r3, #22
 8004e70:	6003      	str	r3, [r0, #0]
 8004e72:	f04f 30ff 	mov.w	r0, #4294967295
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004e7a:	b112      	cbz	r2, 8004e82 <_raise_r+0x1e>
 8004e7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e80:	b94b      	cbnz	r3, 8004e96 <_raise_r+0x32>
 8004e82:	4628      	mov	r0, r5
 8004e84:	f000 f830 	bl	8004ee8 <_getpid_r>
 8004e88:	4622      	mov	r2, r4
 8004e8a:	4601      	mov	r1, r0
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e92:	f000 b817 	b.w	8004ec4 <_kill_r>
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d00a      	beq.n	8004eb0 <_raise_r+0x4c>
 8004e9a:	1c59      	adds	r1, r3, #1
 8004e9c:	d103      	bne.n	8004ea6 <_raise_r+0x42>
 8004e9e:	2316      	movs	r3, #22
 8004ea0:	6003      	str	r3, [r0, #0]
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	e7e7      	b.n	8004e76 <_raise_r+0x12>
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004eac:	4620      	mov	r0, r4
 8004eae:	4798      	blx	r3
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e7e0      	b.n	8004e76 <_raise_r+0x12>

08004eb4 <raise>:
 8004eb4:	4b02      	ldr	r3, [pc, #8]	@ (8004ec0 <raise+0xc>)
 8004eb6:	4601      	mov	r1, r0
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	f7ff bfd3 	b.w	8004e64 <_raise_r>
 8004ebe:	bf00      	nop
 8004ec0:	20004020 	.word	0x20004020

08004ec4 <_kill_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4d07      	ldr	r5, [pc, #28]	@ (8004ee4 <_kill_r+0x20>)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	4604      	mov	r4, r0
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	f7fb ff28 	bl	8000d26 <_kill>
 8004ed6:	1c43      	adds	r3, r0, #1
 8004ed8:	d102      	bne.n	8004ee0 <_kill_r+0x1c>
 8004eda:	682b      	ldr	r3, [r5, #0]
 8004edc:	b103      	cbz	r3, 8004ee0 <_kill_r+0x1c>
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	bd38      	pop	{r3, r4, r5, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20008340 	.word	0x20008340

08004ee8 <_getpid_r>:
 8004ee8:	f7fb bf15 	b.w	8000d16 <_getpid>

08004eec <_malloc_usable_size_r>:
 8004eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef0:	1f18      	subs	r0, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bfbc      	itt	lt
 8004ef6:	580b      	ldrlt	r3, [r1, r0]
 8004ef8:	18c0      	addlt	r0, r0, r3
 8004efa:	4770      	bx	lr

08004efc <__swhatbuf_r>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	460c      	mov	r4, r1
 8004f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f04:	2900      	cmp	r1, #0
 8004f06:	b096      	sub	sp, #88	@ 0x58
 8004f08:	4615      	mov	r5, r2
 8004f0a:	461e      	mov	r6, r3
 8004f0c:	da0d      	bge.n	8004f2a <__swhatbuf_r+0x2e>
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f14:	f04f 0100 	mov.w	r1, #0
 8004f18:	bf14      	ite	ne
 8004f1a:	2340      	movne	r3, #64	@ 0x40
 8004f1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f20:	2000      	movs	r0, #0
 8004f22:	6031      	str	r1, [r6, #0]
 8004f24:	602b      	str	r3, [r5, #0]
 8004f26:	b016      	add	sp, #88	@ 0x58
 8004f28:	bd70      	pop	{r4, r5, r6, pc}
 8004f2a:	466a      	mov	r2, sp
 8004f2c:	f000 f848 	bl	8004fc0 <_fstat_r>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	dbec      	blt.n	8004f0e <__swhatbuf_r+0x12>
 8004f34:	9901      	ldr	r1, [sp, #4]
 8004f36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f3e:	4259      	negs	r1, r3
 8004f40:	4159      	adcs	r1, r3
 8004f42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f46:	e7eb      	b.n	8004f20 <__swhatbuf_r+0x24>

08004f48 <__smakebuf_r>:
 8004f48:	898b      	ldrh	r3, [r1, #12]
 8004f4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f4c:	079d      	lsls	r5, r3, #30
 8004f4e:	4606      	mov	r6, r0
 8004f50:	460c      	mov	r4, r1
 8004f52:	d507      	bpl.n	8004f64 <__smakebuf_r+0x1c>
 8004f54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	6123      	str	r3, [r4, #16]
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	6163      	str	r3, [r4, #20]
 8004f60:	b003      	add	sp, #12
 8004f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f64:	ab01      	add	r3, sp, #4
 8004f66:	466a      	mov	r2, sp
 8004f68:	f7ff ffc8 	bl	8004efc <__swhatbuf_r>
 8004f6c:	9f00      	ldr	r7, [sp, #0]
 8004f6e:	4605      	mov	r5, r0
 8004f70:	4639      	mov	r1, r7
 8004f72:	4630      	mov	r0, r6
 8004f74:	f7ff f906 	bl	8004184 <_malloc_r>
 8004f78:	b948      	cbnz	r0, 8004f8e <__smakebuf_r+0x46>
 8004f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f7e:	059a      	lsls	r2, r3, #22
 8004f80:	d4ee      	bmi.n	8004f60 <__smakebuf_r+0x18>
 8004f82:	f023 0303 	bic.w	r3, r3, #3
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	81a3      	strh	r3, [r4, #12]
 8004f8c:	e7e2      	b.n	8004f54 <__smakebuf_r+0xc>
 8004f8e:	89a3      	ldrh	r3, [r4, #12]
 8004f90:	6020      	str	r0, [r4, #0]
 8004f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f96:	81a3      	strh	r3, [r4, #12]
 8004f98:	9b01      	ldr	r3, [sp, #4]
 8004f9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f9e:	b15b      	cbz	r3, 8004fb8 <__smakebuf_r+0x70>
 8004fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f000 f81d 	bl	8004fe4 <_isatty_r>
 8004faa:	b128      	cbz	r0, 8004fb8 <__smakebuf_r+0x70>
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	f023 0303 	bic.w	r3, r3, #3
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	431d      	orrs	r5, r3
 8004fbc:	81a5      	strh	r5, [r4, #12]
 8004fbe:	e7cf      	b.n	8004f60 <__smakebuf_r+0x18>

08004fc0 <_fstat_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4d07      	ldr	r5, [pc, #28]	@ (8004fe0 <_fstat_r+0x20>)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	4608      	mov	r0, r1
 8004fca:	4611      	mov	r1, r2
 8004fcc:	602b      	str	r3, [r5, #0]
 8004fce:	f7fb ff0a 	bl	8000de6 <_fstat>
 8004fd2:	1c43      	adds	r3, r0, #1
 8004fd4:	d102      	bne.n	8004fdc <_fstat_r+0x1c>
 8004fd6:	682b      	ldr	r3, [r5, #0]
 8004fd8:	b103      	cbz	r3, 8004fdc <_fstat_r+0x1c>
 8004fda:	6023      	str	r3, [r4, #0]
 8004fdc:	bd38      	pop	{r3, r4, r5, pc}
 8004fde:	bf00      	nop
 8004fe0:	20008340 	.word	0x20008340

08004fe4 <_isatty_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4d06      	ldr	r5, [pc, #24]	@ (8005000 <_isatty_r+0x1c>)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	4604      	mov	r4, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	602b      	str	r3, [r5, #0]
 8004ff0:	f7fb ff09 	bl	8000e06 <_isatty>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d102      	bne.n	8004ffe <_isatty_r+0x1a>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	b103      	cbz	r3, 8004ffe <_isatty_r+0x1a>
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	20008340 	.word	0x20008340

08005004 <_init>:
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	bf00      	nop
 8005008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500a:	bc08      	pop	{r3}
 800500c:	469e      	mov	lr, r3
 800500e:	4770      	bx	lr

08005010 <_fini>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	bf00      	nop
 8005014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005016:	bc08      	pop	{r3}
 8005018:	469e      	mov	lr, r3
 800501a:	4770      	bx	lr
