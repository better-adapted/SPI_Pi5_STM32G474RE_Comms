
SPI_FullDuplex_ComDMA_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033b0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003588  08003588  00004588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003598  08003598  00005084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003598  08003598  00005084  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003598  08003598  00005084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003598  08003598  00004598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800359c  0800359c  0000459c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080035a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000084  08003624  00005084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003624  00005268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000a4e0  00000000  00000000  000050b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000083  00000000  00000000  0000f594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00009250  00000000  00000000  0000f617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ac3  00000000  00000000  00018867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000918  00000000  00000000  0001a330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e7854  00000000  00000000  0001ac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000006cf  00000000  00000000  0010249c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024481  00000000  00000000  00102b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00126fec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023d0  00000000  00000000  00127030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000084 	.word	0x20000084
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003570 	.word	0x08003570

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000088 	.word	0x20000088
 8000214:	08003570 	.word	0x08003570

08000218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000218:	480d      	ldr	r0, [pc, #52]	@ (8000250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480d      	ldr	r0, [pc, #52]	@ (8000254 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490e      	ldr	r1, [pc, #56]	@ (8000258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0e      	ldr	r2, [pc, #56]	@ (800025c <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0b      	ldr	r2, [pc, #44]	@ (8000260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0b      	ldr	r4, [pc, #44]	@ (8000264 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000242:	f000 fbe7 	bl	8000a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000246:	f003 f96f 	bl	8003528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800024a:	f000 f861 	bl	8000310 <main>

0800024e <LoopForever>:

LoopForever:
    b LoopForever
 800024e:	e7fe      	b.n	800024e <LoopForever>
  ldr   r0, =_estack
 8000250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000258:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800025c:	080035a0 	.word	0x080035a0
  ldr r2, =_sbss
 8000260:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000264:	20000268 	.word	0x20000268

08000268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000268:	e7fe      	b.n	8000268 <ADC1_2_IRQHandler>
	...

0800026c <SPI1_TEST_SEND>:
#define SPI1_CS_PORT                 GPIOA
#define SPI1_CS_EXTI_IRQn            EXTI4_IRQn


HAL_StatusTypeDef SPI1_TEST_SEND()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	return HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, 111);
 8000270:	236f      	movs	r3, #111	@ 0x6f
 8000272:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <SPI1_TEST_SEND+0x18>)
 8000274:	4904      	ldr	r1, [pc, #16]	@ (8000288 <SPI1_TEST_SEND+0x1c>)
 8000276:	4805      	ldr	r0, [pc, #20]	@ (800028c <SPI1_TEST_SEND+0x20>)
 8000278:	f002 faea 	bl	8002850 <HAL_SPI_TransmitReceive_DMA>
 800027c:	4603      	mov	r3, r0
}
 800027e:	4618      	mov	r0, r3
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	200001c4 	.word	0x200001c4
 8000288:	20000000 	.word	0x20000000
 800028c:	200000a0 	.word	0x200000a0

08000290 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
	Transfer_CS_Pin_High_Counter++;
 800029a:	4b05      	ldr	r3, [pc, #20]	@ (80002b0 <HAL_GPIO_EXTI_Callback+0x20>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	3301      	adds	r3, #1
 80002a0:	4a03      	ldr	r2, [pc, #12]	@ (80002b0 <HAL_GPIO_EXTI_Callback+0x20>)
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	20000258 	.word	0x20000258

080002b4 <SPI1_Get_CS>:

int SPI1_Get_CS()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(SPI1_CS_PORT, SPI1_CS_PIN);
 80002b8:	2110      	movs	r1, #16
 80002ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002be:	f001 fbbf 	bl	8001a40 <HAL_GPIO_ReadPin>
 80002c2:	4603      	mov	r3, r0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <SPI1_PA4_EN_Intterrupt>:

/* USER CODE END 0 */


void SPI1_PA4_EN_Intterrupt()
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 80002dc:	2310      	movs	r3, #16
 80002de:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80002e4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SPI1_CS_PORT, &GPIO_InitStruct);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4619      	mov	r1, r3
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f2:	f001 f941 	bl	8001578 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(SPI1_CS_EXTI_IRQn, 0, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2100      	movs	r1, #0
 80002fa:	200a      	movs	r0, #10
 80002fc:	f000 fd31 	bl	8000d62 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(SPI1_CS_EXTI_IRQn);
 8000300:	200a      	movs	r0, #10
 8000302:	f000 fd48 	bl	8000d96 <HAL_NVIC_EnableIRQ>
}
 8000306:	bf00      	nop
 8000308:	3718      	adds	r7, #24
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fb93 	bl	8000a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f885 	bl	8000428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f93b 	bl	8000598 <MX_GPIO_Init>

  if(Test_EXT4_Counter==0)
 8000322:	4b38      	ldr	r3, [pc, #224]	@ (8000404 <main+0xf4>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d103      	bne.n	8000332 <main+0x22>
  {
	  MX_DMA_Init();
 800032a:	f000 f903 	bl	8000534 <MX_DMA_Init>
	  MX_SPI1_Init();
 800032e:	f000 f8c7 	bl	80004c0 <MX_SPI1_Init>
  }

  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED2);
 8000332:	2000      	movs	r0, #0
 8000334:	f000 faf6 	bl	8000924 <BSP_LED_Init>

  SPI1_PA4_EN_Intterrupt();
 8000338:	f7ff ffc6 	bl	80002c8 <SPI1_PA4_EN_Intterrupt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Test_EXT4_Counter)
 800033c:	4b31      	ldr	r3, [pc, #196]	@ (8000404 <main+0xf4>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d15c      	bne.n	80003fe <main+0xee>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_StatusTypeDef state_res = HAL_SPI_GetState(&hspi1);
 8000344:	4830      	ldr	r0, [pc, #192]	@ (8000408 <main+0xf8>)
 8000346:	f002 fd7b 	bl	8002e40 <HAL_SPI_GetState>
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]

	  if(Transfer_Init)
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <main+0xfc>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d00b      	beq.n	800036e <main+0x5e>
	  {
		  HAL_StatusTypeDef res = SPI1_TEST_SEND();
 8000356:	f7ff ff89 	bl	800026c <SPI1_TEST_SEND>
 800035a:	4603      	mov	r3, r0
 800035c:	71bb      	strb	r3, [r7, #6]
		  if ( res != HAL_OK)
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <main+0x58>
		  {
		    /* Transfer error in transmission process */
		    Error_Handler();
 8000364:	f000 f962 	bl	800062c <Error_Handler>
		  }
		  Transfer_Init=0;
 8000368:	4b28      	ldr	r3, [pc, #160]	@ (800040c <main+0xfc>)
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
	  }

	  while (wTransferState == TRANSFER_WAIT)
 800036e:	bf00      	nop
 8000370:	4b27      	ldr	r3, [pc, #156]	@ (8000410 <main+0x100>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d0fb      	beq.n	8000370 <main+0x60>
	  {
	  }

	  switch (wTransferState)
 8000378:	4b25      	ldr	r3, [pc, #148]	@ (8000410 <main+0x100>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d002      	beq.n	8000386 <main+0x76>
 8000380:	2b02      	cmp	r3, #2
 8000382:	d01c      	beq.n	80003be <main+0xae>
 8000384:	e03c      	b.n	8000400 <main+0xf0>
	    case TRANSFER_COMPLETE :
	      /*##-3- Compare the sent and received buffers ##############################*/
	      //if (Buffercmp((uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, 128)==0)
	      {
	        // all good!
	    	BSP_LED_Toggle(LED2);
 8000386:	2000      	movs	r0, #0
 8000388:	f000 fb2e 	bl	80009e8 <BSP_LED_Toggle>
	    	wTransferState = TRANSFER_PROCESSED;
 800038c:	4b20      	ldr	r3, [pc, #128]	@ (8000410 <main+0x100>)
 800038e:	2203      	movs	r2, #3
 8000390:	601a      	str	r2, [r3, #0]
	    	Transfer_Process_Counter++;
 8000392:	4b20      	ldr	r3, [pc, #128]	@ (8000414 <main+0x104>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	3301      	adds	r3, #1
 8000398:	4a1e      	ldr	r2, [pc, #120]	@ (8000414 <main+0x104>)
 800039a:	6013      	str	r3, [r2, #0]

	    	if(SPI1_Get_CS()==0)
 800039c:	f7ff ff8a 	bl	80002b4 <SPI1_Get_CS>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d105      	bne.n	80003b2 <main+0xa2>
	    	{
	    		Transfer_Process_CS_LOW_Counter++;
 80003a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000418 <main+0x108>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	3301      	adds	r3, #1
 80003ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000418 <main+0x108>)
 80003ae:	6013      	str	r3, [r2, #0]
	    	else
	    	{
	    		Transfer_Process_CS_HIGH_Counter++;
	    	}
	      }
	      break;
 80003b0:	e026      	b.n	8000400 <main+0xf0>
	    		Transfer_Process_CS_HIGH_Counter++;
 80003b2:	4b1a      	ldr	r3, [pc, #104]	@ (800041c <main+0x10c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	3301      	adds	r3, #1
 80003b8:	4a18      	ldr	r2, [pc, #96]	@ (800041c <main+0x10c>)
 80003ba:	6013      	str	r3, [r2, #0]
	      break;
 80003bc:	e020      	b.n	8000400 <main+0xf0>

	    case TRANSFER_ERROR:
			Transfer_Error_Counter++;
 80003be:	4b18      	ldr	r3, [pc, #96]	@ (8000420 <main+0x110>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	3301      	adds	r3, #1
 80003c4:	4a16      	ldr	r2, [pc, #88]	@ (8000420 <main+0x110>)
 80003c6:	6013      	str	r3, [r2, #0]
			wTransferState = TRANSFER_PROCESSED;
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <main+0x100>)
 80003ca:	2203      	movs	r2, #3
 80003cc:	601a      	str	r2, [r3, #0]

			// https://community.st.com/t5/stm32-mcus-products/restart-spi-dma-transmission/td-p/637909
			HAL_SPI_DMAStop(&hspi1);
 80003ce:	480e      	ldr	r0, [pc, #56]	@ (8000408 <main+0xf8>)
 80003d0:	f002 fbd8 	bl	8002b84 <HAL_SPI_DMAStop>
			__HAL_RCC_SPI1_FORCE_RESET();
 80003d4:	4b13      	ldr	r3, [pc, #76]	@ (8000424 <main+0x114>)
 80003d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003d8:	4a12      	ldr	r2, [pc, #72]	@ (8000424 <main+0x114>)
 80003da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003de:	6413      	str	r3, [r2, #64]	@ 0x40
			__HAL_RCC_SPI1_RELEASE_RESET();
 80003e0:	4b10      	ldr	r3, [pc, #64]	@ (8000424 <main+0x114>)
 80003e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000424 <main+0x114>)
 80003e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003ea:	6413      	str	r3, [r2, #64]	@ 0x40
			HAL_SPI_DeInit(&hspi1);
 80003ec:	4806      	ldr	r0, [pc, #24]	@ (8000408 <main+0xf8>)
 80003ee:	f002 fa07 	bl	8002800 <HAL_SPI_DeInit>
			MX_SPI1_Init();
 80003f2:	f000 f865 	bl	80004c0 <MX_SPI1_Init>
			//SPI1_PA4_EN_Intterrupt();

			Transfer_Init=1;
 80003f6:	4b05      	ldr	r3, [pc, #20]	@ (800040c <main+0xfc>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	601a      	str	r2, [r3, #0]
	      break;
 80003fc:	e000      	b.n	8000400 <main+0xf0>
		  continue;
 80003fe:	bf00      	nop
  {
 8000400:	e79c      	b.n	800033c <main+0x2c>
 8000402:	bf00      	nop
 8000404:	2000025c 	.word	0x2000025c
 8000408:	200000a0 	.word	0x200000a0
 800040c:	20000070 	.word	0x20000070
 8000410:	20000244 	.word	0x20000244
 8000414:	2000024c 	.word	0x2000024c
 8000418:	20000250 	.word	0x20000250
 800041c:	20000254 	.word	0x20000254
 8000420:	20000248 	.word	0x20000248
 8000424:	40021000 	.word	0x40021000

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b094      	sub	sp, #80	@ 0x50
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0318 	add.w	r3, r7, #24
 8000432:	2238      	movs	r2, #56	@ 0x38
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f003 f86e 	bl	8003518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800044a:	2000      	movs	r0, #0
 800044c:	f001 fb5a 	bl	8001b04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000450:	2302      	movs	r3, #2
 8000452:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000458:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800045a:	2340      	movs	r3, #64	@ 0x40
 800045c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045e:	2302      	movs	r3, #2
 8000460:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000462:	2302      	movs	r3, #2
 8000464:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000466:	2304      	movs	r3, #4
 8000468:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800046a:	2355      	movs	r3, #85	@ 0x55
 800046c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800046e:	2302      	movs	r3, #2
 8000470:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000472:	2302      	movs	r3, #2
 8000474:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000476:	2302      	movs	r3, #2
 8000478:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	f107 0318 	add.w	r3, r7, #24
 800047e:	4618      	mov	r0, r3
 8000480:	f001 fbf4 	bl	8001c6c <HAL_RCC_OscConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800048a:	f000 f8cf 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048e:	230f      	movs	r3, #15
 8000490:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000492:	2303      	movs	r3, #3
 8000494:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2104      	movs	r1, #4
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fef2 	bl	8002290 <HAL_RCC_ClockConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004b2:	f000 f8bb 	bl	800062c <Error_Handler>
  }
}
 80004b6:	bf00      	nop
 80004b8:	3750      	adds	r7, #80	@ 0x50
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004c4:	4b19      	ldr	r3, [pc, #100]	@ (800052c <MX_SPI1_Init+0x6c>)
 80004c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000530 <MX_SPI1_Init+0x70>)
 80004c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80004ca:	4b18      	ldr	r3, [pc, #96]	@ (800052c <MX_SPI1_Init+0x6c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004d0:	4b16      	ldr	r3, [pc, #88]	@ (800052c <MX_SPI1_Init+0x6c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004d6:	4b15      	ldr	r3, [pc, #84]	@ (800052c <MX_SPI1_Init+0x6c>)
 80004d8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80004dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004de:	4b13      	ldr	r3, [pc, #76]	@ (800052c <MX_SPI1_Init+0x6c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004e4:	4b11      	ldr	r3, [pc, #68]	@ (800052c <MX_SPI1_Init+0x6c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80004ea:	4b10      	ldr	r3, [pc, #64]	@ (800052c <MX_SPI1_Init+0x6c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004f0:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <MX_SPI1_Init+0x6c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004f6:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <MX_SPI1_Init+0x6c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <MX_SPI1_Init+0x6c>)
 80004fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000502:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 32773;
 8000504:	4b09      	ldr	r3, [pc, #36]	@ (800052c <MX_SPI1_Init+0x6c>)
 8000506:	f248 0205 	movw	r2, #32773	@ 0x8005
 800050a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800050c:	4b07      	ldr	r3, [pc, #28]	@ (800052c <MX_SPI1_Init+0x6c>)
 800050e:	2202      	movs	r2, #2
 8000510:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <MX_SPI1_Init+0x6c>)
 8000514:	2200      	movs	r2, #0
 8000516:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000518:	4804      	ldr	r0, [pc, #16]	@ (800052c <MX_SPI1_Init+0x6c>)
 800051a:	f002 f89d 	bl	8002658 <HAL_SPI_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000524:	f000 f882 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200000a0 	.word	0x200000a0
 8000530:	40013000 	.word	0x40013000

08000534 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800053a:	4b16      	ldr	r3, [pc, #88]	@ (8000594 <MX_DMA_Init+0x60>)
 800053c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800053e:	4a15      	ldr	r2, [pc, #84]	@ (8000594 <MX_DMA_Init+0x60>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	6493      	str	r3, [r2, #72]	@ 0x48
 8000546:	4b13      	ldr	r3, [pc, #76]	@ (8000594 <MX_DMA_Init+0x60>)
 8000548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000552:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <MX_DMA_Init+0x60>)
 8000554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000556:	4a0f      	ldr	r2, [pc, #60]	@ (8000594 <MX_DMA_Init+0x60>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6493      	str	r3, [r2, #72]	@ 0x48
 800055e:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <MX_DMA_Init+0x60>)
 8000560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	200c      	movs	r0, #12
 8000570:	f000 fbf7 	bl	8000d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000574:	200c      	movs	r0, #12
 8000576:	f000 fc0e 	bl	8000d96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	200d      	movs	r0, #13
 8000580:	f000 fbef 	bl	8000d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000584:	200d      	movs	r0, #13
 8000586:	f000 fc06 	bl	8000d96 <HAL_NVIC_EnableIRQ>

}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <MX_GPIO_Init+0x44>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a2:	4a0e      	ldr	r2, [pc, #56]	@ (80005dc <MX_GPIO_Init+0x44>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <MX_GPIO_Init+0x44>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <MX_GPIO_Init+0x44>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ba:	4a08      	ldr	r2, [pc, #32]	@ (80005dc <MX_GPIO_Init+0x44>)
 80005bc:	f043 0302 	orr.w	r3, r3, #2
 80005c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c2:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <MX_GPIO_Init+0x44>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  static int callbacks;
  /* Turn LED2 on: Transfer in transmission/reception process is complete */
  wTransferState = TRANSFER_COMPLETE;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <HAL_SPI_TxRxCpltCallback+0x24>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	601a      	str	r2, [r3, #0]

  SPI1_TEST_SEND();
 80005ee:	f7ff fe3d 	bl	800026c <SPI1_TEST_SEND>

  callbacks++;
 80005f2:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <HAL_SPI_TxRxCpltCallback+0x28>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	4a03      	ldr	r2, [pc, #12]	@ (8000608 <HAL_SPI_TxRxCpltCallback+0x28>)
 80005fa:	6013      	str	r3, [r2, #0]
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000244 	.word	0x20000244
 8000608:	20000260 	.word	0x20000260

0800060c <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8000614:	4b04      	ldr	r3, [pc, #16]	@ (8000628 <HAL_SPI_ErrorCallback+0x1c>)
 8000616:	2202      	movs	r2, #2
 8000618:	601a      	str	r2, [r3, #0]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000244 	.word	0x20000244

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_Off(LED2);
 8000630:	2000      	movs	r0, #0
 8000632:	f000 f9c3 	bl	80009bc <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f9c0 	bl	80009bc <BSP_LED_Off>
  while (1)
  {
    /* Toggle LED2 for error */
	BSP_LED_On(LED2);
 800063c:	2000      	movs	r0, #0
 800063e:	f000 f9a7 	bl	8000990 <BSP_LED_On>
    HAL_Delay(1000);
 8000642:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000646:	f000 fa6b 	bl	8000b20 <HAL_Delay>
	BSP_LED_On(LED2);
 800064a:	bf00      	nop
 800064c:	e7f6      	b.n	800063c <Error_Handler+0x10>
	...

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <HAL_MspInit+0x44>)
 8000658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800065a:	4a0e      	ldr	r2, [pc, #56]	@ (8000694 <HAL_MspInit+0x44>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6613      	str	r3, [r2, #96]	@ 0x60
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <HAL_MspInit+0x44>)
 8000664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <HAL_MspInit+0x44>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000672:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <HAL_MspInit+0x44>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000678:	6593      	str	r3, [r2, #88]	@ 0x58
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <HAL_MspInit+0x44>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800067e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000686:	f001 fae1 	bl	8001c4c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	@ 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a53      	ldr	r2, [pc, #332]	@ (8000804 <HAL_SPI_MspInit+0x16c>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	f040 80a0 	bne.w	80007fc <HAL_SPI_MspInit+0x164>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006bc:	4b52      	ldr	r3, [pc, #328]	@ (8000808 <HAL_SPI_MspInit+0x170>)
 80006be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006c0:	4a51      	ldr	r2, [pc, #324]	@ (8000808 <HAL_SPI_MspInit+0x170>)
 80006c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80006c8:	4b4f      	ldr	r3, [pc, #316]	@ (8000808 <HAL_SPI_MspInit+0x170>)
 80006ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b4c      	ldr	r3, [pc, #304]	@ (8000808 <HAL_SPI_MspInit+0x170>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d8:	4a4b      	ldr	r2, [pc, #300]	@ (8000808 <HAL_SPI_MspInit+0x170>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e0:	4b49      	ldr	r3, [pc, #292]	@ (8000808 <HAL_SPI_MspInit+0x170>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b46      	ldr	r3, [pc, #280]	@ (8000808 <HAL_SPI_MspInit+0x170>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f0:	4a45      	ldr	r2, [pc, #276]	@ (8000808 <HAL_SPI_MspInit+0x170>)
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f8:	4b43      	ldr	r3, [pc, #268]	@ (8000808 <HAL_SPI_MspInit+0x170>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fc:	f003 0302 	and.w	r3, r3, #2
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000704:	2310      	movs	r3, #16
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070c:	2301      	movs	r3, #1
 800070e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000714:	2305      	movs	r3, #5
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000722:	f000 ff29 	bl	8001578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000726:	2338      	movs	r3, #56	@ 0x38
 8000728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072e:	2301      	movs	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000736:	2305      	movs	r3, #5
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	4832      	ldr	r0, [pc, #200]	@ (800080c <HAL_SPI_MspInit+0x174>)
 8000742:	f000 ff19 	bl	8001578 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000746:	4b32      	ldr	r3, [pc, #200]	@ (8000810 <HAL_SPI_MspInit+0x178>)
 8000748:	4a32      	ldr	r2, [pc, #200]	@ (8000814 <HAL_SPI_MspInit+0x17c>)
 800074a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800074c:	4b30      	ldr	r3, [pc, #192]	@ (8000810 <HAL_SPI_MspInit+0x178>)
 800074e:	220b      	movs	r2, #11
 8000750:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000752:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <HAL_SPI_MspInit+0x178>)
 8000754:	2210      	movs	r2, #16
 8000756:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000758:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <HAL_SPI_MspInit+0x178>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800075e:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <HAL_SPI_MspInit+0x178>)
 8000760:	2280      	movs	r2, #128	@ 0x80
 8000762:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000764:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <HAL_SPI_MspInit+0x178>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800076a:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <HAL_SPI_MspInit+0x178>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000770:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <HAL_SPI_MspInit+0x178>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000776:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <HAL_SPI_MspInit+0x178>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800077c:	4824      	ldr	r0, [pc, #144]	@ (8000810 <HAL_SPI_MspInit+0x178>)
 800077e:	f000 fb33 	bl	8000de8 <HAL_DMA_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 8000788:	f7ff ff50 	bl	800062c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a20      	ldr	r2, [pc, #128]	@ (8000810 <HAL_SPI_MspInit+0x178>)
 8000790:	655a      	str	r2, [r3, #84]	@ 0x54
 8000792:	4a1f      	ldr	r2, [pc, #124]	@ (8000810 <HAL_SPI_MspInit+0x178>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <HAL_SPI_MspInit+0x180>)
 800079a:	4a20      	ldr	r2, [pc, #128]	@ (800081c <HAL_SPI_MspInit+0x184>)
 800079c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800079e:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <HAL_SPI_MspInit+0x180>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <HAL_SPI_MspInit+0x180>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <HAL_SPI_MspInit+0x180>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <HAL_SPI_MspInit+0x180>)
 80007b2:	2280      	movs	r2, #128	@ 0x80
 80007b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007b6:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <HAL_SPI_MspInit+0x180>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <HAL_SPI_MspInit+0x180>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <HAL_SPI_MspInit+0x180>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80007c8:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <HAL_SPI_MspInit+0x180>)
 80007ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80007d0:	4811      	ldr	r0, [pc, #68]	@ (8000818 <HAL_SPI_MspInit+0x180>)
 80007d2:	f000 fb09 	bl	8000de8 <HAL_DMA_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 80007dc:	f7ff ff26 	bl	800062c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <HAL_SPI_MspInit+0x180>)
 80007e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80007e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000818 <HAL_SPI_MspInit+0x180>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2023      	movs	r0, #35	@ 0x23
 80007f2:	f000 fab6 	bl	8000d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80007f6:	2023      	movs	r0, #35	@ 0x23
 80007f8:	f000 facd 	bl	8000d96 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	@ 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40013000 	.word	0x40013000
 8000808:	40021000 	.word	0x40021000
 800080c:	48000400 	.word	0x48000400
 8000810:	20000104 	.word	0x20000104
 8000814:	40020030 	.word	0x40020030
 8000818:	20000164 	.word	0x20000164
 800081c:	4002001c 	.word	0x4002001c

08000820 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a17      	ldr	r2, [pc, #92]	@ (800088c <HAL_SPI_MspDeInit+0x6c>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d127      	bne.n	8000882 <HAL_SPI_MspDeInit+0x62>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */
    /* Reset peripherals */
    __HAL_RCC_SPI1_FORCE_RESET();
 8000832:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <HAL_SPI_MspDeInit+0x70>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	4a16      	ldr	r2, [pc, #88]	@ (8000890 <HAL_SPI_MspDeInit+0x70>)
 8000838:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800083c:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_RCC_SPI1_RELEASE_RESET();
 800083e:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <HAL_SPI_MspDeInit+0x70>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	4a13      	ldr	r2, [pc, #76]	@ (8000890 <HAL_SPI_MspDeInit+0x70>)
 8000844:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000848:	6413      	str	r3, [r2, #64]	@ 0x40

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <HAL_SPI_MspDeInit+0x70>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800084e:	4a10      	ldr	r2, [pc, #64]	@ (8000890 <HAL_SPI_MspDeInit+0x70>)
 8000850:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000854:	6613      	str	r3, [r2, #96]	@ 0x60
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8000856:	2110      	movs	r1, #16
 8000858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085c:	f001 f80e 	bl	800187c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8000860:	2138      	movs	r1, #56	@ 0x38
 8000862:	480c      	ldr	r0, [pc, #48]	@ (8000894 <HAL_SPI_MspDeInit+0x74>)
 8000864:	f001 f80a 	bl	800187c <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmatx);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fb63 	bl	8000f38 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000876:	4618      	mov	r0, r3
 8000878:	f000 fb5e 	bl	8000f38 <HAL_DMA_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800087c:	2023      	movs	r0, #35	@ 0x23
 800087e:	f000 fa98 	bl	8000db2 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN SPI1_MspDeInit 1 */

    /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40013000 	.word	0x40013000
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	bf00      	nop
 80008ac:	e7fd      	b.n	80008aa <HardFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 f909 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80008dc:	4802      	ldr	r0, [pc, #8]	@ (80008e8 <DMA1_Channel2_IRQHandler+0x10>)
 80008de:	f000 fcfc 	bl	80012da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000164 	.word	0x20000164

080008ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <DMA1_Channel3_IRQHandler+0x10>)
 80008f2:	f000 fcf2 	bl	80012da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000104 	.word	0x20000104

08000900 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000904:	4802      	ldr	r0, [pc, #8]	@ (8000910 <SPI1_IRQHandler+0x10>)
 8000906:	f002 f97d 	bl	8002c04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000a0 	.word	0x200000a0

08000914 <EXTI4_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI4_IRQHandler(void)   // <----- The ISR Function We're Looking For!
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000918:	2010      	movs	r0, #16
 800091a:	f001 f8db 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 800092e:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <BSP_LED_Init+0x64>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4a15      	ldr	r2, [pc, #84]	@ (8000988 <BSP_LED_Init+0x64>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <BSP_LED_Init+0x64>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000946:	2320      	movs	r3, #32
 8000948:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4a0c      	ldr	r2, [pc, #48]	@ (800098c <BSP_LED_Init+0x68>)
 800095a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095e:	f107 020c 	add.w	r2, r7, #12
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fe07 	bl	8001578 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4a07      	ldr	r2, [pc, #28]	@ (800098c <BSP_LED_Init+0x68>)
 800096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000972:	2120      	movs	r1, #32
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f001 f87a 	bl	8001a70 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000
 800098c:	20000074 	.word	0x20000074

08000990 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4a06      	ldr	r2, [pc, #24]	@ (80009b8 <BSP_LED_On+0x28>)
 800099e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a2:	2120      	movs	r1, #32
 80009a4:	2201      	movs	r2, #1
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 f862 	bl	8001a70 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000074 	.word	0x20000074

080009bc <BSP_LED_Off>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4a06      	ldr	r2, [pc, #24]	@ (80009e4 <BSP_LED_Off+0x28>)
 80009ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ce:	2120      	movs	r1, #32
 80009d0:	2200      	movs	r2, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 f84c 	bl	8001a70 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000074 	.word	0x20000074

080009e8 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4a06      	ldr	r2, [pc, #24]	@ (8000a10 <BSP_LED_Toggle+0x28>)
 80009f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fa:	2220      	movs	r2, #32
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 f84e 	bl	8001aa0 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000074 	.word	0x20000074

08000a14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a18:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <SystemInit+0x28>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a1e:	4a07      	ldr	r2, [pc, #28]	@ (8000a3c <SystemInit+0x28>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a28:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <SystemInit+0x28>)
 8000a2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4a:	2003      	movs	r0, #3
 8000a4c:	f000 f97e 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 f80d 	bl	8000a70 <HAL_InitTick>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d002      	beq.n	8000a62 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	71fb      	strb	r3, [r7, #7]
 8000a60:	e001      	b.n	8000a66 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a62:	f7ff fdf5 	bl	8000650 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a66:	79fb      	ldrb	r3, [r7, #7]

}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <HAL_InitTick+0x68>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d022      	beq.n	8000aca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <HAL_InitTick+0x6c>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <HAL_InitTick+0x68>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a90:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 f998 	bl	8000dce <HAL_SYSTICK_Config>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d10f      	bne.n	8000ac4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	d809      	bhi.n	8000abe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab2:	f000 f956 	bl	8000d62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <HAL_InitTick+0x70>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	e007      	b.n	8000ace <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
 8000ac2:	e004      	b.n	8000ace <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]
 8000ac8:	e001      	b.n	8000ace <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000080 	.word	0x20000080
 8000adc:	20000078 	.word	0x20000078
 8000ae0:	2000007c 	.word	0x2000007c

08000ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <HAL_IncTick+0x20>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a03      	ldr	r2, [pc, #12]	@ (8000b00 <HAL_IncTick+0x1c>)
 8000af4:	6013      	str	r3, [r2, #0]
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	20000264 	.word	0x20000264
 8000b04:	20000080 	.word	0x20000080

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000264 	.word	0x20000264

08000b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff ffee 	bl	8000b08 <HAL_GetTick>
 8000b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d004      	beq.n	8000b44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <HAL_Delay+0x40>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	4413      	add	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b44:	bf00      	nop
 8000b46:	f7ff ffdf 	bl	8000b08 <HAL_GetTick>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d8f7      	bhi.n	8000b46 <HAL_Delay+0x26>
  {
  }
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000080 	.word	0x20000080

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4907      	ldr	r1, [pc, #28]	@ (8000c00 <__NVIC_EnableIRQ+0x38>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db12      	blt.n	8000c3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	490a      	ldr	r1, [pc, #40]	@ (8000c48 <__NVIC_DisableIRQ+0x44>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	3320      	adds	r3, #32
 8000c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c30:	f3bf 8f4f 	dsb	sy
}
 8000c34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c36:	f3bf 8f6f 	isb	sy
}
 8000c3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	@ (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	@ (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	@ 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	@ 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff8e 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff05 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d70:	f7ff ff1c 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000d74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	6978      	ldr	r0, [r7, #20]
 8000d7c:	f7ff ff90 	bl	8000ca0 <NVIC_EncodePriority>
 8000d80:	4602      	mov	r2, r0
 8000d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff5f 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff0f 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff1f 	bl	8000c04 <__NVIC_DisableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff96 	bl	8000d08 <SysTick_Config>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e08d      	b.n	8000f16 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b47      	ldr	r3, [pc, #284]	@ (8000f20 <HAL_DMA_Init+0x138>)
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d80f      	bhi.n	8000e26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b45      	ldr	r3, [pc, #276]	@ (8000f24 <HAL_DMA_Init+0x13c>)
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a45      	ldr	r2, [pc, #276]	@ (8000f28 <HAL_DMA_Init+0x140>)
 8000e12:	fba2 2303 	umull	r2, r3, r2, r3
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	009a      	lsls	r2, r3, #2
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a42      	ldr	r2, [pc, #264]	@ (8000f2c <HAL_DMA_Init+0x144>)
 8000e22:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e24:	e00e      	b.n	8000e44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b40      	ldr	r3, [pc, #256]	@ (8000f30 <HAL_DMA_Init+0x148>)
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a3d      	ldr	r2, [pc, #244]	@ (8000f28 <HAL_DMA_Init+0x140>)
 8000e32:	fba2 2303 	umull	r2, r3, r2, r3
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	009a      	lsls	r2, r3, #2
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a3c      	ldr	r2, [pc, #240]	@ (8000f34 <HAL_DMA_Init+0x14c>)
 8000e42:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2202      	movs	r2, #2
 8000e48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 fb0c 	bl	80014b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ea4:	d102      	bne.n	8000eac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ec0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d010      	beq.n	8000eec <HAL_DMA_Init+0x104>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d80c      	bhi.n	8000eec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 fb2c 	bl	8001530 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	e008      	b.n	8000efe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40020407 	.word	0x40020407
 8000f24:	bffdfff8 	.word	0xbffdfff8
 8000f28:	cccccccd 	.word	0xcccccccd
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	bffdfbf8 	.word	0xbffdfbf8
 8000f34:	40020400 	.word	0x40020400

08000f38 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e07b      	b.n	8001042 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b3a      	ldr	r3, [pc, #232]	@ (800104c <HAL_DMA_DeInit+0x114>)
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d80f      	bhi.n	8000f86 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b38      	ldr	r3, [pc, #224]	@ (8001050 <HAL_DMA_DeInit+0x118>)
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a38      	ldr	r2, [pc, #224]	@ (8001054 <HAL_DMA_DeInit+0x11c>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	009a      	lsls	r2, r3, #2
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a35      	ldr	r2, [pc, #212]	@ (8001058 <HAL_DMA_DeInit+0x120>)
 8000f82:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f84:	e00e      	b.n	8000fa4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b33      	ldr	r3, [pc, #204]	@ (800105c <HAL_DMA_DeInit+0x124>)
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a30      	ldr	r2, [pc, #192]	@ (8001054 <HAL_DMA_DeInit+0x11c>)
 8000f92:	fba2 2303 	umull	r2, r3, r2, r3
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	009a      	lsls	r2, r3, #2
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8001060 <HAL_DMA_DeInit+0x128>)
 8000fa2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb8:	2101      	movs	r1, #1
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 fa77 	bl	80014b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000fd6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00f      	beq.n	8001000 <HAL_DMA_DeInit+0xc8>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d80b      	bhi.n	8001000 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 faa1 	bl	8001530 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000ffe:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020407 	.word	0x40020407
 8001050:	bffdfff8 	.word	0xbffdfff8
 8001054:	cccccccd 	.word	0xcccccccd
 8001058:	40020000 	.word	0x40020000
 800105c:	bffdfbf8 	.word	0xbffdfbf8
 8001060:	40020400 	.word	0x40020400

08001064 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <HAL_DMA_Start_IT+0x20>
 8001080:	2302      	movs	r3, #2
 8001082:	e066      	b.n	8001152 <HAL_DMA_Start_IT+0xee>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d155      	bne.n	8001144 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2202      	movs	r2, #2
 800109c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2200      	movs	r2, #0
 80010a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	68b9      	ldr	r1, [r7, #8]
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 f9bb 	bl	8001438 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d008      	beq.n	80010dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 020e 	orr.w	r2, r2, #14
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	e00f      	b.n	80010fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0204 	bic.w	r2, r2, #4
 80010ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 020a 	orr.w	r2, r2, #10
 80010fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d007      	beq.n	800111a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001118:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001130:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f042 0201 	orr.w	r2, r2, #1
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e005      	b.n	8001150 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800114c:	2302      	movs	r3, #2
 800114e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001150:	7dfb      	ldrb	r3, [r7, #23]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800115a:	b480      	push	{r7}
 800115c:	b085      	sub	sp, #20
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d005      	beq.n	800117e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2204      	movs	r2, #4
 8001176:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e037      	b.n	80011ee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 020e 	bic.w	r2, r2, #14
 800118c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001198:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800119c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0201 	bic.w	r2, r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	f003 021f 	and.w	r2, r3, #31
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f202 	lsl.w	r2, r1, r2
 80011c0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80011ca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00c      	beq.n	80011ee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011e2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80011ec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d00d      	beq.n	8001240 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2204      	movs	r2, #4
 8001228:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	e047      	b.n	80012d0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 020e 	bic.w	r2, r2, #14
 800124e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800126a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800126e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	2101      	movs	r1, #1
 800127e:	fa01 f202 	lsl.w	r2, r1, r2
 8001282:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800128c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00c      	beq.n	80012b0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80012ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	4798      	blx	r3
    }
  }
  return status;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	2204      	movs	r2, #4
 80012fc:	409a      	lsls	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4013      	ands	r3, r2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d026      	beq.n	8001354 <HAL_DMA_IRQHandler+0x7a>
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d021      	beq.n	8001354 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	2b00      	cmp	r3, #0
 800131c:	d107      	bne.n	800132e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0204 	bic.w	r2, r2, #4
 800132c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	f003 021f 	and.w	r2, r3, #31
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	2104      	movs	r1, #4
 800133c:	fa01 f202 	lsl.w	r2, r1, r2
 8001340:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	2b00      	cmp	r3, #0
 8001348:	d071      	beq.n	800142e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001352:	e06c      	b.n	800142e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001358:	f003 031f 	and.w	r3, r3, #31
 800135c:	2202      	movs	r2, #2
 800135e:	409a      	lsls	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4013      	ands	r3, r2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d02e      	beq.n	80013c6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d029      	beq.n	80013c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10b      	bne.n	8001398 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 020a 	bic.w	r2, r2, #10
 800138e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	2102      	movs	r1, #2
 80013a6:	fa01 f202 	lsl.w	r2, r1, r2
 80013aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d038      	beq.n	800142e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80013c4:	e033      	b.n	800142e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	2208      	movs	r2, #8
 80013d0:	409a      	lsls	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d02a      	beq.n	8001430 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d025      	beq.n	8001430 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 020e 	bic.w	r2, r2, #14
 80013f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	2101      	movs	r1, #1
 8001402:	fa01 f202 	lsl.w	r2, r1, r2
 8001406:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800142e:	bf00      	nop
 8001430:	bf00      	nop
}
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800144e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001454:	2b00      	cmp	r3, #0
 8001456:	d004      	beq.n	8001462 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001460:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	f003 021f 	and.w	r2, r3, #31
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	2101      	movs	r1, #1
 8001470:	fa01 f202 	lsl.w	r2, r1, r2
 8001474:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b10      	cmp	r3, #16
 8001484:	d108      	bne.n	8001498 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001496:	e007      	b.n	80014a8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	60da      	str	r2, [r3, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d802      	bhi.n	80014ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	e001      	b.n	80014d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80014d0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3b08      	subs	r3, #8
 80014de:	4a12      	ldr	r2, [pc, #72]	@ (8001528 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	009a      	lsls	r2, r3, #2
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4413      	add	r3, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80014fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 031f 	and.w	r3, r3, #31
 8001506:	2201      	movs	r2, #1
 8001508:	409a      	lsls	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800150e:	bf00      	nop
 8001510:	371c      	adds	r7, #28
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40020407 	.word	0x40020407
 8001520:	40020800 	.word	0x40020800
 8001524:	40020820 	.word	0x40020820
 8001528:	cccccccd 	.word	0xcccccccd
 800152c:	40020880 	.word	0x40020880

08001530 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	461a      	mov	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001552:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3b01      	subs	r3, #1
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	2201      	movs	r2, #1
 800155e:	409a      	lsls	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	1000823f 	.word	0x1000823f
 8001574:	40020940 	.word	0x40020940

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001586:	e15a      	b.n	800183e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2101      	movs	r1, #1
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 814c 	beq.w	8001838 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d005      	beq.n	80015b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d130      	bne.n	800161a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ee:	2201      	movs	r2, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	f003 0201 	and.w	r2, r3, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b03      	cmp	r3, #3
 8001624:	d017      	beq.n	8001656 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d123      	bne.n	80016aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	08da      	lsrs	r2, r3, #3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3208      	adds	r2, #8
 80016a4:	6939      	ldr	r1, [r7, #16]
 80016a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0203 	and.w	r2, r3, #3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80a6 	beq.w	8001838 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ec:	4b5b      	ldr	r3, [pc, #364]	@ (800185c <HAL_GPIO_Init+0x2e4>)
 80016ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f0:	4a5a      	ldr	r2, [pc, #360]	@ (800185c <HAL_GPIO_Init+0x2e4>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80016f8:	4b58      	ldr	r3, [pc, #352]	@ (800185c <HAL_GPIO_Init+0x2e4>)
 80016fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001704:	4a56      	ldr	r2, [pc, #344]	@ (8001860 <HAL_GPIO_Init+0x2e8>)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800172e:	d01f      	beq.n	8001770 <HAL_GPIO_Init+0x1f8>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a4c      	ldr	r2, [pc, #304]	@ (8001864 <HAL_GPIO_Init+0x2ec>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d019      	beq.n	800176c <HAL_GPIO_Init+0x1f4>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a4b      	ldr	r2, [pc, #300]	@ (8001868 <HAL_GPIO_Init+0x2f0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d013      	beq.n	8001768 <HAL_GPIO_Init+0x1f0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a4a      	ldr	r2, [pc, #296]	@ (800186c <HAL_GPIO_Init+0x2f4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d00d      	beq.n	8001764 <HAL_GPIO_Init+0x1ec>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a49      	ldr	r2, [pc, #292]	@ (8001870 <HAL_GPIO_Init+0x2f8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d007      	beq.n	8001760 <HAL_GPIO_Init+0x1e8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a48      	ldr	r2, [pc, #288]	@ (8001874 <HAL_GPIO_Init+0x2fc>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d101      	bne.n	800175c <HAL_GPIO_Init+0x1e4>
 8001758:	2305      	movs	r3, #5
 800175a:	e00a      	b.n	8001772 <HAL_GPIO_Init+0x1fa>
 800175c:	2306      	movs	r3, #6
 800175e:	e008      	b.n	8001772 <HAL_GPIO_Init+0x1fa>
 8001760:	2304      	movs	r3, #4
 8001762:	e006      	b.n	8001772 <HAL_GPIO_Init+0x1fa>
 8001764:	2303      	movs	r3, #3
 8001766:	e004      	b.n	8001772 <HAL_GPIO_Init+0x1fa>
 8001768:	2302      	movs	r3, #2
 800176a:	e002      	b.n	8001772 <HAL_GPIO_Init+0x1fa>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <HAL_GPIO_Init+0x1fa>
 8001770:	2300      	movs	r3, #0
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	f002 0203 	and.w	r2, r2, #3
 8001778:	0092      	lsls	r2, r2, #2
 800177a:	4093      	lsls	r3, r2
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001782:	4937      	ldr	r1, [pc, #220]	@ (8001860 <HAL_GPIO_Init+0x2e8>)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001790:	4b39      	ldr	r3, [pc, #228]	@ (8001878 <HAL_GPIO_Init+0x300>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017b4:	4a30      	ldr	r2, [pc, #192]	@ (8001878 <HAL_GPIO_Init+0x300>)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001878 <HAL_GPIO_Init+0x300>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017de:	4a26      	ldr	r2, [pc, #152]	@ (8001878 <HAL_GPIO_Init+0x300>)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80017e4:	4b24      	ldr	r3, [pc, #144]	@ (8001878 <HAL_GPIO_Init+0x300>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001808:	4a1b      	ldr	r2, [pc, #108]	@ (8001878 <HAL_GPIO_Init+0x300>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800180e:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <HAL_GPIO_Init+0x300>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001832:	4a11      	ldr	r2, [pc, #68]	@ (8001878 <HAL_GPIO_Init+0x300>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3301      	adds	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	fa22 f303 	lsr.w	r3, r2, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	f47f ae9d 	bne.w	8001588 <HAL_GPIO_Init+0x10>
  }
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	371c      	adds	r7, #28
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40021000 	.word	0x40021000
 8001860:	40010000 	.word	0x40010000
 8001864:	48000400 	.word	0x48000400
 8001868:	48000800 	.word	0x48000800
 800186c:	48000c00 	.word	0x48000c00
 8001870:	48001000 	.word	0x48001000
 8001874:	48001400 	.word	0x48001400
 8001878:	40010400 	.word	0x40010400

0800187c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800188a:	e0bd      	b.n	8001a08 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800188c:	2201      	movs	r2, #1
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80b0 	beq.w	8001a02 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80018a2:	4a60      	ldr	r2, [pc, #384]	@ (8001a24 <HAL_GPIO_DeInit+0x1a8>)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018ca:	d01f      	beq.n	800190c <HAL_GPIO_DeInit+0x90>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a56      	ldr	r2, [pc, #344]	@ (8001a28 <HAL_GPIO_DeInit+0x1ac>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d019      	beq.n	8001908 <HAL_GPIO_DeInit+0x8c>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a55      	ldr	r2, [pc, #340]	@ (8001a2c <HAL_GPIO_DeInit+0x1b0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d013      	beq.n	8001904 <HAL_GPIO_DeInit+0x88>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a54      	ldr	r2, [pc, #336]	@ (8001a30 <HAL_GPIO_DeInit+0x1b4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00d      	beq.n	8001900 <HAL_GPIO_DeInit+0x84>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a53      	ldr	r2, [pc, #332]	@ (8001a34 <HAL_GPIO_DeInit+0x1b8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_DeInit+0x80>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a52      	ldr	r2, [pc, #328]	@ (8001a38 <HAL_GPIO_DeInit+0x1bc>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_GPIO_DeInit+0x7c>
 80018f4:	2305      	movs	r3, #5
 80018f6:	e00a      	b.n	800190e <HAL_GPIO_DeInit+0x92>
 80018f8:	2306      	movs	r3, #6
 80018fa:	e008      	b.n	800190e <HAL_GPIO_DeInit+0x92>
 80018fc:	2304      	movs	r3, #4
 80018fe:	e006      	b.n	800190e <HAL_GPIO_DeInit+0x92>
 8001900:	2303      	movs	r3, #3
 8001902:	e004      	b.n	800190e <HAL_GPIO_DeInit+0x92>
 8001904:	2302      	movs	r3, #2
 8001906:	e002      	b.n	800190e <HAL_GPIO_DeInit+0x92>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <HAL_GPIO_DeInit+0x92>
 800190c:	2300      	movs	r3, #0
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	f002 0203 	and.w	r2, r2, #3
 8001914:	0092      	lsls	r2, r2, #2
 8001916:	4093      	lsls	r3, r2
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	429a      	cmp	r2, r3
 800191c:	d132      	bne.n	8001984 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800191e:	4b47      	ldr	r3, [pc, #284]	@ (8001a3c <HAL_GPIO_DeInit+0x1c0>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	4945      	ldr	r1, [pc, #276]	@ (8001a3c <HAL_GPIO_DeInit+0x1c0>)
 8001928:	4013      	ands	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800192c:	4b43      	ldr	r3, [pc, #268]	@ (8001a3c <HAL_GPIO_DeInit+0x1c0>)
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	4941      	ldr	r1, [pc, #260]	@ (8001a3c <HAL_GPIO_DeInit+0x1c0>)
 8001936:	4013      	ands	r3, r2
 8001938:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800193a:	4b40      	ldr	r3, [pc, #256]	@ (8001a3c <HAL_GPIO_DeInit+0x1c0>)
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	43db      	mvns	r3, r3
 8001942:	493e      	ldr	r1, [pc, #248]	@ (8001a3c <HAL_GPIO_DeInit+0x1c0>)
 8001944:	4013      	ands	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001948:	4b3c      	ldr	r3, [pc, #240]	@ (8001a3c <HAL_GPIO_DeInit+0x1c0>)
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	493a      	ldr	r1, [pc, #232]	@ (8001a3c <HAL_GPIO_DeInit+0x1c0>)
 8001952:	4013      	ands	r3, r2
 8001954:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001966:	4a2f      	ldr	r2, [pc, #188]	@ (8001a24 <HAL_GPIO_DeInit+0x1a8>)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43da      	mvns	r2, r3
 8001976:	482b      	ldr	r0, [pc, #172]	@ (8001a24 <HAL_GPIO_DeInit+0x1a8>)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	400a      	ands	r2, r1
 800197e:	3302      	adds	r3, #2
 8001980:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2103      	movs	r1, #3
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	08d2      	lsrs	r2, r2, #3
 80019b8:	4019      	ands	r1, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2103      	movs	r1, #3
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	401a      	ands	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	2101      	movs	r1, #1
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2103      	movs	r1, #3
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	401a      	ands	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f47f af3b 	bne.w	800188c <HAL_GPIO_DeInit+0x10>
  }
}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40010000 	.word	0x40010000
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	48000800 	.word	0x48000800
 8001a30:	48000c00 	.word	0x48000c00
 8001a34:	48001000 	.word	0x48001000
 8001a38:	48001400 	.word	0x48001400
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	e001      	b.n	8001a62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a80:	787b      	ldrb	r3, [r7, #1]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ab2:	887a      	ldrh	r2, [r7, #2]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43d9      	mvns	r1, r3
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	400b      	ands	r3, r1
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	619a      	str	r2, [r3, #24]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ade:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d006      	beq.n	8001af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aea:	4a05      	ldr	r2, [pc, #20]	@ (8001b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fbcc 	bl	8000290 <HAL_GPIO_EXTI_Callback>
  }
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40010400 	.word	0x40010400

08001b04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d141      	bne.n	8001b96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b12:	4b4b      	ldr	r3, [pc, #300]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b1e:	d131      	bne.n	8001b84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b20:	4b47      	ldr	r3, [pc, #284]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b26:	4a46      	ldr	r2, [pc, #280]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b30:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b38:	4a41      	ldr	r2, [pc, #260]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b40:	4b40      	ldr	r3, [pc, #256]	@ (8001c44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2232      	movs	r2, #50	@ 0x32
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	0c9b      	lsrs	r3, r3, #18
 8001b52:	3301      	adds	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b56:	e002      	b.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b5e:	4b38      	ldr	r3, [pc, #224]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b6a:	d102      	bne.n	8001b72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f2      	bne.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b72:	4b33      	ldr	r3, [pc, #204]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b7e:	d158      	bne.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e057      	b.n	8001c34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b84:	4b2e      	ldr	r3, [pc, #184]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b94:	e04d      	b.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b9c:	d141      	bne.n	8001c22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b9e:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001baa:	d131      	bne.n	8001c10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bac:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bb2:	4a23      	ldr	r2, [pc, #140]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbc:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2232      	movs	r2, #50	@ 0x32
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	0c9b      	lsrs	r3, r3, #18
 8001bde:	3301      	adds	r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be2:	e002      	b.n	8001bea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf6:	d102      	bne.n	8001bfe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f2      	bne.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bfe:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c0a:	d112      	bne.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e011      	b.n	8001c34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c16:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c20:	e007      	b.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c22:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c2a:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c30:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40007000 	.word	0x40007000
 8001c44:	20000078 	.word	0x20000078
 8001c48:	431bde83 	.word	0x431bde83

08001c4c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4a04      	ldr	r2, [pc, #16]	@ (8001c68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c5a:	6093      	str	r3, [r2, #8]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40007000 	.word	0x40007000

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e2fe      	b.n	800227c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d075      	beq.n	8001d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c8a:	4b97      	ldr	r3, [pc, #604]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c94:	4b94      	ldr	r3, [pc, #592]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	d102      	bne.n	8001caa <HAL_RCC_OscConfig+0x3e>
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d002      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x44>
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d10b      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb0:	4b8d      	ldr	r3, [pc, #564]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d05b      	beq.n	8001d74 <HAL_RCC_OscConfig+0x108>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d157      	bne.n	8001d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e2d9      	b.n	800227c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd0:	d106      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x74>
 8001cd2:	4b85      	ldr	r3, [pc, #532]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a84      	ldr	r2, [pc, #528]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e01d      	b.n	8001d1c <HAL_RCC_OscConfig+0xb0>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x98>
 8001cea:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a7e      	ldr	r2, [pc, #504]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7b      	ldr	r2, [pc, #492]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0xb0>
 8001d04:	4b78      	ldr	r3, [pc, #480]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a77      	ldr	r2, [pc, #476]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b75      	ldr	r3, [pc, #468]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a74      	ldr	r2, [pc, #464]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d013      	beq.n	8001d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7fe fef0 	bl	8000b08 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7fe feec 	bl	8000b08 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	@ 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e29e      	b.n	800227c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0xc0>
 8001d4a:	e014      	b.n	8001d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7fe fedc 	bl	8000b08 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7fe fed8 	bl	8000b08 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	@ 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e28a      	b.n	800227c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d66:	4b60      	ldr	r3, [pc, #384]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0xe8>
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d075      	beq.n	8001e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d82:	4b59      	ldr	r3, [pc, #356]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d8c:	4b56      	ldr	r3, [pc, #344]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	d102      	bne.n	8001da2 <HAL_RCC_OscConfig+0x136>
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d002      	beq.n	8001da8 <HAL_RCC_OscConfig+0x13c>
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d11f      	bne.n	8001de8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x154>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e25d      	b.n	800227c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	4b49      	ldr	r3, [pc, #292]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	061b      	lsls	r3, r3, #24
 8001dce:	4946      	ldr	r1, [pc, #280]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dd4:	4b45      	ldr	r3, [pc, #276]	@ (8001eec <HAL_RCC_OscConfig+0x280>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fe49 	bl	8000a70 <HAL_InitTick>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d043      	beq.n	8001e6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e249      	b.n	800227c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d023      	beq.n	8001e38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7fe fe84 	bl	8000b08 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e04:	f7fe fe80 	bl	8000b08 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e232      	b.n	800227c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e16:	4b34      	ldr	r3, [pc, #208]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e22:	4b31      	ldr	r3, [pc, #196]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	061b      	lsls	r3, r3, #24
 8001e30:	492d      	ldr	r1, [pc, #180]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
 8001e36:	e01a      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001e3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7fe fe60 	bl	8000b08 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7fe fe5c 	bl	8000b08 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e20e      	b.n	800227c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x1e0>
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d041      	beq.n	8001efe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d01c      	beq.n	8001ebc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e82:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e88:	4a17      	ldr	r2, [pc, #92]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7fe fe39 	bl	8000b08 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9a:	f7fe fe35 	bl	8000b08 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1e7      	b.n	800227c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0ef      	beq.n	8001e9a <HAL_RCC_OscConfig+0x22e>
 8001eba:	e020      	b.n	8001efe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec2:	4a09      	ldr	r2, [pc, #36]	@ (8001ee8 <HAL_RCC_OscConfig+0x27c>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ecc:	f7fe fe1c 	bl	8000b08 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed2:	e00d      	b.n	8001ef0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7fe fe18 	bl	8000b08 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d906      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e1ca      	b.n	800227c <HAL_RCC_OscConfig+0x610>
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef0:	4b8c      	ldr	r3, [pc, #560]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ea      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80a6 	beq.w	8002058 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f10:	4b84      	ldr	r3, [pc, #528]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_OscConfig+0x2b4>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x2b6>
 8001f20:	2300      	movs	r3, #0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00d      	beq.n	8001f42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b7f      	ldr	r3, [pc, #508]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f32:	4b7c      	ldr	r3, [pc, #496]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f42:	4b79      	ldr	r3, [pc, #484]	@ (8002128 <HAL_RCC_OscConfig+0x4bc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d118      	bne.n	8001f80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f4e:	4b76      	ldr	r3, [pc, #472]	@ (8002128 <HAL_RCC_OscConfig+0x4bc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a75      	ldr	r2, [pc, #468]	@ (8002128 <HAL_RCC_OscConfig+0x4bc>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5a:	f7fe fdd5 	bl	8000b08 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f62:	f7fe fdd1 	bl	8000b08 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e183      	b.n	800227c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f74:	4b6c      	ldr	r3, [pc, #432]	@ (8002128 <HAL_RCC_OscConfig+0x4bc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d108      	bne.n	8001f9a <HAL_RCC_OscConfig+0x32e>
 8001f88:	4b66      	ldr	r3, [pc, #408]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8e:	4a65      	ldr	r2, [pc, #404]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f98:	e024      	b.n	8001fe4 <HAL_RCC_OscConfig+0x378>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d110      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x358>
 8001fa2:	4b60      	ldr	r3, [pc, #384]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa8:	4a5e      	ldr	r2, [pc, #376]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fb2:	4b5c      	ldr	r3, [pc, #368]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb8:	4a5a      	ldr	r2, [pc, #360]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fc2:	e00f      	b.n	8001fe4 <HAL_RCC_OscConfig+0x378>
 8001fc4:	4b57      	ldr	r3, [pc, #348]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fca:	4a56      	ldr	r2, [pc, #344]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fd4:	4b53      	ldr	r3, [pc, #332]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fda:	4a52      	ldr	r2, [pc, #328]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d016      	beq.n	800201a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f7fe fd8c 	bl	8000b08 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f7fe fd88 	bl	8000b08 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e138      	b.n	800227c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200a:	4b46      	ldr	r3, [pc, #280]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0ed      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x388>
 8002018:	e015      	b.n	8002046 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201a:	f7fe fd75 	bl	8000b08 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002020:	e00a      	b.n	8002038 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7fe fd71 	bl	8000b08 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e121      	b.n	800227c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002038:	4b3a      	ldr	r3, [pc, #232]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1ed      	bne.n	8002022 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002046:	7ffb      	ldrb	r3, [r7, #31]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d105      	bne.n	8002058 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204c:	4b35      	ldr	r3, [pc, #212]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002050:	4a34      	ldr	r2, [pc, #208]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8002052:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002056:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d03c      	beq.n	80020de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800206c:	4b2d      	ldr	r3, [pc, #180]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002072:	4a2c      	ldr	r2, [pc, #176]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7fe fd44 	bl	8000b08 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002084:	f7fe fd40 	bl	8000b08 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0f2      	b.n	800227c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002096:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8002098:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ef      	beq.n	8002084 <HAL_RCC_OscConfig+0x418>
 80020a4:	e01b      	b.n	80020de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 80020a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b6:	f7fe fd27 	bl	8000b08 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020be:	f7fe fd23 	bl	8000b08 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0d5      	b.n	800227c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020d0:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 80020d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1ef      	bne.n	80020be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80c9 	beq.w	800227a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	f000 8083 	beq.w	80021fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d15e      	bne.n	80021bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a08      	ldr	r2, [pc, #32]	@ (8002124 <HAL_RCC_OscConfig+0x4b8>)
 8002104:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210a:	f7fe fcfd 	bl	8000b08 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002110:	e00c      	b.n	800212c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002112:	f7fe fcf9 	bl	8000b08 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d905      	bls.n	800212c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0ab      	b.n	800227c <HAL_RCC_OscConfig+0x610>
 8002124:	40021000 	.word	0x40021000
 8002128:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212c:	4b55      	ldr	r3, [pc, #340]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1ec      	bne.n	8002112 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002138:	4b52      	ldr	r3, [pc, #328]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	4b52      	ldr	r3, [pc, #328]	@ (8002288 <HAL_RCC_OscConfig+0x61c>)
 800213e:	4013      	ands	r3, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6a11      	ldr	r1, [r2, #32]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002148:	3a01      	subs	r2, #1
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	4311      	orrs	r1, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002152:	0212      	lsls	r2, r2, #8
 8002154:	4311      	orrs	r1, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800215a:	0852      	lsrs	r2, r2, #1
 800215c:	3a01      	subs	r2, #1
 800215e:	0552      	lsls	r2, r2, #21
 8002160:	4311      	orrs	r1, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002166:	0852      	lsrs	r2, r2, #1
 8002168:	3a01      	subs	r2, #1
 800216a:	0652      	lsls	r2, r2, #25
 800216c:	4311      	orrs	r1, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002172:	06d2      	lsls	r2, r2, #27
 8002174:	430a      	orrs	r2, r1
 8002176:	4943      	ldr	r1, [pc, #268]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 8002178:	4313      	orrs	r3, r2
 800217a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800217c:	4b41      	ldr	r3, [pc, #260]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a40      	ldr	r2, [pc, #256]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 8002182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002186:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002188:	4b3e      	ldr	r3, [pc, #248]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a3d      	ldr	r2, [pc, #244]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002192:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7fe fcb8 	bl	8000b08 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7fe fcb4 	bl	8000b08 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e066      	b.n	800227c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	4b35      	ldr	r3, [pc, #212]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x530>
 80021ba:	e05e      	b.n	800227a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021bc:	4b31      	ldr	r3, [pc, #196]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a30      	ldr	r2, [pc, #192]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 80021c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe fc9e 	bl	8000b08 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d0:	f7fe fc9a 	bl	8000b08 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e04c      	b.n	800227c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e2:	4b28      	ldr	r3, [pc, #160]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021ee:	4b25      	ldr	r3, [pc, #148]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	4924      	ldr	r1, [pc, #144]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 80021f4:	4b25      	ldr	r3, [pc, #148]	@ (800228c <HAL_RCC_OscConfig+0x620>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	60cb      	str	r3, [r1, #12]
 80021fa:	e03e      	b.n	800227a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e039      	b.n	800227c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002208:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <HAL_RCC_OscConfig+0x618>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	429a      	cmp	r2, r3
 800221a:	d12c      	bne.n	8002276 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002226:	3b01      	subs	r3, #1
 8002228:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d123      	bne.n	8002276 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d11b      	bne.n	8002276 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002248:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d113      	bne.n	8002276 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	3b01      	subs	r3, #1
 800225c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d109      	bne.n	8002276 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	3b01      	subs	r3, #1
 8002270:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d001      	beq.n	800227a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	019f800c 	.word	0x019f800c
 800228c:	feeefffc 	.word	0xfeeefffc

08002290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e11e      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a8:	4b91      	ldr	r3, [pc, #580]	@ (80024f0 <HAL_RCC_ClockConfig+0x260>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d910      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b8e      	ldr	r3, [pc, #568]	@ (80024f0 <HAL_RCC_ClockConfig+0x260>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 020f 	bic.w	r2, r3, #15
 80022be:	498c      	ldr	r1, [pc, #560]	@ (80024f0 <HAL_RCC_ClockConfig+0x260>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b8a      	ldr	r3, [pc, #552]	@ (80024f0 <HAL_RCC_ClockConfig+0x260>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e106      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d073      	beq.n	80023cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d129      	bne.n	8002340 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ec:	4b81      	ldr	r3, [pc, #516]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0f4      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022fc:	f000 f966 	bl	80025cc <RCC_GetSysClockFreqFromPLLSource>
 8002300:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4a7c      	ldr	r2, [pc, #496]	@ (80024f8 <HAL_RCC_ClockConfig+0x268>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d93f      	bls.n	800238a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800230a:	4b7a      	ldr	r3, [pc, #488]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800231e:	2b00      	cmp	r3, #0
 8002320:	d033      	beq.n	800238a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002326:	2b00      	cmp	r3, #0
 8002328:	d12f      	bne.n	800238a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800232a:	4b72      	ldr	r3, [pc, #456]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002332:	4a70      	ldr	r2, [pc, #448]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002338:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e024      	b.n	800238a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d107      	bne.n	8002358 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002348:	4b6a      	ldr	r3, [pc, #424]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0c6      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002358:	4b66      	ldr	r3, [pc, #408]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0be      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002368:	f000 f8ce 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 800236c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4a61      	ldr	r2, [pc, #388]	@ (80024f8 <HAL_RCC_ClockConfig+0x268>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d909      	bls.n	800238a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002376:	4b5f      	ldr	r3, [pc, #380]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800237e:	4a5d      	ldr	r2, [pc, #372]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002384:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002386:	2380      	movs	r3, #128	@ 0x80
 8002388:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4b5a      	ldr	r3, [pc, #360]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4957      	ldr	r1, [pc, #348]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800239c:	f7fe fbb4 	bl	8000b08 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7fe fbb0 	bl	8000b08 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e095      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b4e      	ldr	r3, [pc, #312]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d023      	beq.n	8002420 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e4:	4b43      	ldr	r3, [pc, #268]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a42      	ldr	r2, [pc, #264]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80023ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80023fc:	4b3d      	ldr	r3, [pc, #244]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002404:	4a3b      	ldr	r2, [pc, #236]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002406:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800240a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240c:	4b39      	ldr	r3, [pc, #228]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4936      	ldr	r1, [pc, #216]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
 800241e:	e008      	b.n	8002432 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b80      	cmp	r3, #128	@ 0x80
 8002424:	d105      	bne.n	8002432 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002426:	4b33      	ldr	r3, [pc, #204]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4a32      	ldr	r2, [pc, #200]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800242c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002430:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002432:	4b2f      	ldr	r3, [pc, #188]	@ (80024f0 <HAL_RCC_ClockConfig+0x260>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d21d      	bcs.n	800247c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002440:	4b2b      	ldr	r3, [pc, #172]	@ (80024f0 <HAL_RCC_ClockConfig+0x260>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 020f 	bic.w	r2, r3, #15
 8002448:	4929      	ldr	r1, [pc, #164]	@ (80024f0 <HAL_RCC_ClockConfig+0x260>)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	4313      	orrs	r3, r2
 800244e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002450:	f7fe fb5a 	bl	8000b08 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7fe fb56 	bl	8000b08 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e03b      	b.n	80024e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b20      	ldr	r3, [pc, #128]	@ (80024f0 <HAL_RCC_ClockConfig+0x260>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d1ed      	bne.n	8002458 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002488:	4b1a      	ldr	r3, [pc, #104]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4917      	ldr	r1, [pc, #92]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a6:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	490f      	ldr	r1, [pc, #60]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ba:	f000 f825 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024be:	4602      	mov	r2, r0
 80024c0:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	490c      	ldr	r1, [pc, #48]	@ (80024fc <HAL_RCC_ClockConfig+0x26c>)
 80024cc:	5ccb      	ldrb	r3, [r1, r3]
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	fa22 f303 	lsr.w	r3, r2, r3
 80024d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <HAL_RCC_ClockConfig+0x270>)
 80024d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024da:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <HAL_RCC_ClockConfig+0x274>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fac6 	bl	8000a70 <HAL_InitTick>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	04c4b400 	.word	0x04c4b400
 80024fc:	08003588 	.word	0x08003588
 8002500:	20000078 	.word	0x20000078
 8002504:	2000007c 	.word	0x2000007c

08002508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800250e:	4b2c      	ldr	r3, [pc, #176]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b04      	cmp	r3, #4
 8002518:	d102      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800251a:	4b2a      	ldr	r3, [pc, #168]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	e047      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002520:	4b27      	ldr	r3, [pc, #156]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d102      	bne.n	8002532 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800252c:	4b26      	ldr	r3, [pc, #152]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	e03e      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002532:	4b23      	ldr	r3, [pc, #140]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d136      	bne.n	80025ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800253e:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002548:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	3301      	adds	r3, #1
 8002554:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d10c      	bne.n	8002576 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800255c:	4a1a      	ldr	r2, [pc, #104]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	4a16      	ldr	r2, [pc, #88]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002566:	68d2      	ldr	r2, [r2, #12]
 8002568:	0a12      	lsrs	r2, r2, #8
 800256a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	617b      	str	r3, [r7, #20]
      break;
 8002574:	e00c      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002576:	4a13      	ldr	r2, [pc, #76]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	4a10      	ldr	r2, [pc, #64]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002580:	68d2      	ldr	r2, [r2, #12]
 8002582:	0a12      	lsrs	r2, r2, #8
 8002584:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
      break;
 800258e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0e5b      	lsrs	r3, r3, #25
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	3301      	adds	r3, #1
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e001      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025b0:	693b      	ldr	r3, [r7, #16]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	00f42400 	.word	0x00f42400
 80025c8:	016e3600 	.word	0x016e3600

080025cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025d2:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	3301      	adds	r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d10c      	bne.n	800260a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025f0:	4a17      	ldr	r2, [pc, #92]	@ (8002650 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	4a14      	ldr	r2, [pc, #80]	@ (800264c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025fa:	68d2      	ldr	r2, [r2, #12]
 80025fc:	0a12      	lsrs	r2, r2, #8
 80025fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	617b      	str	r3, [r7, #20]
    break;
 8002608:	e00c      	b.n	8002624 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800260a:	4a12      	ldr	r2, [pc, #72]	@ (8002654 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	4a0e      	ldr	r2, [pc, #56]	@ (800264c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002614:	68d2      	ldr	r2, [r2, #12]
 8002616:	0a12      	lsrs	r2, r2, #8
 8002618:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	617b      	str	r3, [r7, #20]
    break;
 8002622:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002624:	4b09      	ldr	r3, [pc, #36]	@ (800264c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0e5b      	lsrs	r3, r3, #25
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	3301      	adds	r3, #1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	fbb2 f3f3 	udiv	r3, r2, r3
 800263c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800263e:	687b      	ldr	r3, [r7, #4]
}
 8002640:	4618      	mov	r0, r3
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40021000 	.word	0x40021000
 8002650:	016e3600 	.word	0x016e3600
 8002654:	00f42400 	.word	0x00f42400

08002658 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0c6      	b.n	80027f8 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	2b00      	cmp	r3, #0
 8002670:	d108      	bne.n	8002684 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800267a:	d009      	beq.n	8002690 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
 8002682:	e005      	b.n	8002690 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7fd fff7 	bl	8000698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026c0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80026ca:	d902      	bls.n	80026d2 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e002      	b.n	80026d8 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80026e0:	d007      	beq.n	80026f2 <HAL_SPI_Init+0x9a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80026ea:	d002      	beq.n	80026f2 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002734:	ea42 0103 	orr.w	r1, r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002750:	d11b      	bne.n	800278a <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10b      	bne.n	8002772 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002762:	d903      	bls.n	800276c <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	631a      	str	r2, [r3, #48]	@ 0x30
 800276a:	e002      	b.n	8002772 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	2b02      	cmp	r3, #2
 8002778:	d107      	bne.n	800278a <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002788:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	0c1b      	lsrs	r3, r3, #16
 8002790:	f003 0204 	and.w	r2, r3, #4
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80027b0:	ea42 0103 	orr.w	r1, r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027ca:	d105      	bne.n	80027d8 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	b292      	uxth	r2, r2
 80027d6:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e01a      	b.n	8002848 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2202      	movs	r2, #2
 8002816:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002828:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fd fff8 	bl	8000820 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002864:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d00c      	beq.n	800288c <HAL_SPI_TransmitReceive_DMA+0x3c>
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002878:	d106      	bne.n	8002888 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <HAL_SPI_TransmitReceive_DMA+0x38>
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	2b04      	cmp	r3, #4
 8002886:	d001      	beq.n	800288c <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
 800288a:	e16d      	b.n	8002b68 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002898:	887b      	ldrh	r3, [r7, #2]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e162      	b.n	8002b68 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_SPI_TransmitReceive_DMA+0x60>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e15b      	b.n	8002b68 <HAL_SPI_TransmitReceive_DMA+0x318>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d003      	beq.n	80028cc <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2205      	movs	r2, #5
 80028c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	887a      	ldrh	r2, [r7, #2]
 80028e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	887a      	ldrh	r2, [r7, #2]
 80028ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	887a      	ldrh	r2, [r7, #2]
 80028f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800290e:	d10f      	bne.n	8002930 <HAL_SPI_TransmitReceive_DMA+0xe0>
  {
    SPI_RESET_CRC(hspi);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800292e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800293e:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002948:	d908      	bls.n	800295c <HAL_SPI_TransmitReceive_DMA+0x10c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	e06f      	b.n	8002a3c <HAL_SPI_TransmitReceive_DMA+0x1ec>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800296a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002976:	d126      	bne.n	80029c6 <HAL_SPI_TransmitReceive_DMA+0x176>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10f      	bne.n	80029a4 <HAL_SPI_TransmitReceive_DMA+0x154>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002992:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002998:	b29b      	uxth	r3, r3
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029a2:	e010      	b.n	80029c6 <HAL_SPI_TransmitReceive_DMA+0x176>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029b2:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d0:	d134      	bne.n	8002a3c <HAL_SPI_TransmitReceive_DMA+0x1ec>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80029e0:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d111      	bne.n	8002a16 <HAL_SPI_TransmitReceive_DMA+0x1c6>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a00:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002a14:	e012      	b.n	8002a3c <HAL_SPI_TransmitReceive_DMA+0x1ec>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a24:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	085b      	lsrs	r3, r3, #1
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d108      	bne.n	8002a5a <HAL_SPI_TransmitReceive_DMA+0x20a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4c:	4a48      	ldr	r2, [pc, #288]	@ (8002b70 <HAL_SPI_TransmitReceive_DMA+0x320>)
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a54:	4a47      	ldr	r2, [pc, #284]	@ (8002b74 <HAL_SPI_TransmitReceive_DMA+0x324>)
 8002a56:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a58:	e007      	b.n	8002a6a <HAL_SPI_TransmitReceive_DMA+0x21a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5e:	4a46      	ldr	r2, [pc, #280]	@ (8002b78 <HAL_SPI_TransmitReceive_DMA+0x328>)
 8002a60:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a66:	4a45      	ldr	r2, [pc, #276]	@ (8002b7c <HAL_SPI_TransmitReceive_DMA+0x32c>)
 8002a68:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6e:	4a44      	ldr	r2, [pc, #272]	@ (8002b80 <HAL_SPI_TransmitReceive_DMA+0x330>)
 8002a70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	2200      	movs	r2, #0
 8002a78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	4619      	mov	r1, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a92:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002a94:	f7fe fae6 	bl	8001064 <HAL_DMA_Start_IT>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_SPI_TransmitReceive_DMA+0x266>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa2:	f043 0210 	orr.w	r2, r3, #16
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e058      	b.n	8002b68 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aca:	2200      	movs	r2, #0
 8002acc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ada:	2200      	movs	r2, #0
 8002adc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aee:	4619      	mov	r1, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	330c      	adds	r3, #12
 8002af6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002afc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002afe:	f7fe fab1 	bl	8001064 <HAL_DMA_Start_IT>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00b      	beq.n	8002b20 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0c:	f043 0210 	orr.w	r2, r3, #16
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e023      	b.n	8002b68 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2a:	2b40      	cmp	r3, #64	@ 0x40
 8002b2c:	d007      	beq.n	8002b3e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b3c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0220 	orr.w	r2, r2, #32
 8002b54:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0202 	orr.w	r2, r2, #2
 8002b64:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	080030ff 	.word	0x080030ff
 8002b74:	08002e5d 	.word	0x08002e5d
 8002b78:	0800311b 	.word	0x0800311b
 8002b7c:	08002fbb 	.word	0x08002fbb
 8002b80:	08003137 	.word	0x08003137

08002b84 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00f      	beq.n	8002bb8 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fadc 	bl	800115a <HAL_DMA_Abort>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bac:	f043 0210 	orr.w	r2, r3, #16
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00f      	beq.n	8002be0 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fac8 	bl	800115a <HAL_DMA_Abort>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd4:	f043 0210 	orr.w	r2, r3, #16
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0203 	bic.w	r2, r2, #3
 8002bee:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10f      	bne.n	8002c48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	099b      	lsrs	r3, r3, #6
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d004      	beq.n	8002c48 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4798      	blx	r3
    return;
 8002c46:	e0d7      	b.n	8002df8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_SPI_IRQHandler+0x66>
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	09db      	lsrs	r3, r3, #7
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d004      	beq.n	8002c6a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
    return;
 8002c68:	e0c6      	b.n	8002df8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <HAL_SPI_IRQHandler+0x8c>
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80b4 	beq.w	8002df8 <HAL_SPI_IRQHandler+0x1f4>
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80ad 	beq.w	8002df8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d023      	beq.n	8002cf2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d011      	beq.n	8002cda <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cba:	f043 0204 	orr.w	r2, r3, #4
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	e00b      	b.n	8002cf2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	693b      	ldr	r3, [r7, #16]
        return;
 8002cf0:	e082      	b.n	8002df8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d014      	beq.n	8002d28 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00c      	beq.n	8002d4e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d38:	f043 0208 	orr.w	r2, r3, #8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002d40:	2300      	movs	r3, #0
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d04f      	beq.n	8002df6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d64:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <HAL_SPI_IRQHandler+0x17e>
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d034      	beq.n	8002dec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0203 	bic.w	r2, r2, #3
 8002d90:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d011      	beq.n	8002dbe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9e:	4a18      	ldr	r2, [pc, #96]	@ (8002e00 <HAL_SPI_IRQHandler+0x1fc>)
 8002da0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe fa30 	bl	800120c <HAL_DMA_Abort_IT>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d016      	beq.n	8002df4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dca:	4a0d      	ldr	r2, [pc, #52]	@ (8002e00 <HAL_SPI_IRQHandler+0x1fc>)
 8002dcc:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fa1a 	bl	800120c <HAL_DMA_Abort_IT>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002dea:	e003      	b.n	8002df4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7fd fc0d 	bl	800060c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002df2:	e000      	b.n	8002df6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002df4:	bf00      	nop
    return;
 8002df6:	bf00      	nop
  }
}
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	08003177 	.word	0x08003177

08002e04 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e4e:	b2db      	uxtb	r3, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	@ 0x28
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	61fb      	str	r3, [r7, #28]
  uint32_t tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e72:	f7fd fe49 	bl	8000b08 <HAL_GetTick>
 8002e76:	61b8      	str	r0, [r7, #24]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	f000 8093 	beq.w	8002fae <SPI_DMAReceiveCplt+0x152>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0220 	bic.w	r2, r2, #32
 8002e96:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ea0:	d13e      	bne.n	8002f20 <SPI_DMAReceiveCplt+0xc4>
    {
      /* Wait until RXNE flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2364      	movs	r3, #100	@ 0x64
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	2101      	movs	r1, #1
 8002eac:	69f8      	ldr	r0, [r7, #28]
 8002eae:	f000 f977 	bl	80031a0 <SPI_WaitFlagStateUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <SPI_DMAReceiveCplt+0x68>
      {
        /* Error on the CRC reception */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ebc:	f043 0202 	orr.w	r2, r3, #2
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      /* Read CRC */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ecc:	d905      	bls.n	8002eda <SPI_DMAReceiveCplt+0x7e>
      {
        /* Read 16bit CRC */
        tmpreg = READ_REG(hspi->Instance->DR);
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	613b      	str	r3, [r7, #16]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	e022      	b.n	8002f20 <SPI_DMAReceiveCplt+0xc4>
      }
      else
      {
        /* Initialize the 8bit temporary pointer */
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	330c      	adds	r3, #12
 8002ee0:	617b      	str	r3, [r7, #20]
        /* Read 8bit CRC */
        tmpreg8 = *ptmpreg8;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	73fb      	strb	r3, [r7, #15]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8002eea:	7bfb      	ldrb	r3, [r7, #15]

        if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d115      	bne.n	8002f20 <SPI_DMAReceiveCplt+0xc4>
        {
          if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2364      	movs	r3, #100	@ 0x64
 8002efa:	2201      	movs	r2, #1
 8002efc:	2101      	movs	r1, #1
 8002efe:	69f8      	ldr	r0, [r7, #28]
 8002f00:	f000 f94e 	bl	80031a0 <SPI_WaitFlagStateUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <SPI_DMAReceiveCplt+0xba>
          {
            /* Error on the CRC reception */
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0e:	f043 0202 	orr.w	r2, r3, #2
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
          tmpreg8 = *ptmpreg8;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	73fb      	strb	r3, [r7, #15]
          /* To avoid GCC warning */
          UNUSED(tmpreg8);
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10d      	bne.n	8002f44 <SPI_DMAReceiveCplt+0xe8>
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f30:	d108      	bne.n	8002f44 <SPI_DMAReceiveCplt+0xe8>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0203 	bic.w	r2, r2, #3
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	e007      	b.n	8002f54 <SPI_DMAReceiveCplt+0xf8>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	2164      	movs	r1, #100	@ 0x64
 8002f58:	69f8      	ldr	r0, [r7, #28]
 8002f5a:	f000 fa3f 	bl	80033dc <SPI_EndRxTransaction>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <SPI_DMAReceiveCplt+0x10e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2220      	movs	r2, #32
 8002f68:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d10a      	bne.n	8002f9e <SPI_DMAReceiveCplt+0x142>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8c:	f043 0202 	orr.w	r2, r3, #2
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002f9c:	609a      	str	r2, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <SPI_DMAReceiveCplt+0x152>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002fa6:	69f8      	ldr	r0, [r7, #28]
 8002fa8:	f7fd fb30 	bl	800060c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002fac:	e002      	b.n	8002fb4 <SPI_DMAReceiveCplt+0x158>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002fae:	69f8      	ldr	r0, [r7, #28]
 8002fb0:	f7ff ff28 	bl	8002e04 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b08a      	sub	sp, #40	@ 0x28
 8002fbe:	af02      	add	r7, sp, #8
 8002fc0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	73fb      	strb	r3, [r7, #15]
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fd0:	f7fd fd9a 	bl	8000b08 <HAL_GetTick>
 8002fd4:	61b8      	str	r0, [r7, #24]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	f000 8086 	beq.w	80030f2 <SPI_DMATransmitReceiveCplt+0x138>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0220 	bic.w	r2, r2, #32
 8002ff4:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ffe:	d13d      	bne.n	800307c <SPI_DMATransmitReceiveCplt+0xc2>
    {
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_8BIT))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003008:	d120      	bne.n	800304c <SPI_DMATransmitReceiveCplt+0x92>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	2b01      	cmp	r3, #1
 8003010:	d11c      	bne.n	800304c <SPI_DMATransmitReceiveCplt+0x92>
      {
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_QUARTER_FULL, SPI_DEFAULT_TIMEOUT,
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	2364      	movs	r3, #100	@ 0x64
 8003018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800301c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003020:	69f8      	ldr	r0, [r7, #28]
 8003022:	f000 f945 	bl	80032b0 <SPI_WaitFifoStateUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <SPI_DMATransmitReceiveCplt+0x7e>
                                          tickstart) != HAL_OK)
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003030:	f043 0202 	orr.w	r2, r3, #2
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	661a      	str	r2, [r3, #96]	@ 0x60
        }
        /* Initialize the 8bit temporary pointer */
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	617b      	str	r3, [r7, #20]
        /* Read 8bit CRC */
        tmpreg8 = *ptmpreg8;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	73fb      	strb	r3, [r7, #15]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	e017      	b.n	800307c <SPI_DMATransmitReceiveCplt+0xc2>
      }
      else
      {
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_HALF_FULL, SPI_DEFAULT_TIMEOUT,
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	2364      	movs	r3, #100	@ 0x64
 8003052:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003056:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800305a:	69f8      	ldr	r0, [r7, #28]
 800305c:	f000 f928 	bl	80032b0 <SPI_WaitFifoStateUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <SPI_DMATransmitReceiveCplt+0xb8>
                                          tickstart) != HAL_OK)
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306a:	f043 0202 	orr.w	r2, r3, #2
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	661a      	str	r2, [r3, #96]	@ 0x60
        }
        /* Read CRC to Flush DR and RXNE flag */
        tmpreg = READ_REG(hspi->Instance->DR);
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	613b      	str	r3, [r7, #16]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 800307a:	693b      	ldr	r3, [r7, #16]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	2164      	movs	r1, #100	@ 0x64
 8003080:	69f8      	ldr	r0, [r7, #28]
 8003082:	f000 fa03 	bl	800348c <SPI_EndRxTxTransaction>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <SPI_DMATransmitReceiveCplt+0xde>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0203 	bic.w	r2, r2, #3
 80030a6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	2200      	movs	r2, #0
 80030ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d10a      	bne.n	80030e2 <SPI_DMATransmitReceiveCplt+0x128>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d0:	f043 0202 	orr.w	r2, r3, #2
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80030e0:	609a      	str	r2, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <SPI_DMATransmitReceiveCplt+0x138>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80030ea:	69f8      	ldr	r0, [r7, #28]
 80030ec:	f7fd fa8e 	bl	800060c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80030f0:	e002      	b.n	80030f8 <SPI_DMATransmitReceiveCplt+0x13e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80030f2:	69f8      	ldr	r0, [r7, #28]
 80030f4:	f7fd fa74 	bl	80005e0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff fe83 	bl	8002e18 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003126:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7ff fe7f 	bl	8002e2c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0203 	bic.w	r2, r2, #3
 8003152:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003158:	f043 0210 	orr.w	r2, r3, #16
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7fd fa4f 	bl	800060c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003182:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7fd fa3a 	bl	800060c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031b0:	f7fd fcaa 	bl	8000b08 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	4413      	add	r3, r2
 80031be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031c0:	f7fd fca2 	bl	8000b08 <HAL_GetTick>
 80031c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031c6:	4b39      	ldr	r3, [pc, #228]	@ (80032ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	015b      	lsls	r3, r3, #5
 80031cc:	0d1b      	lsrs	r3, r3, #20
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031d6:	e054      	b.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	d050      	beq.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031e0:	f7fd fc92 	bl	8000b08 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d902      	bls.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d13d      	bne.n	8003272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800320e:	d111      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003218:	d004      	beq.n	8003224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003222:	d107      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800323c:	d10f      	bne.n	800325e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800325c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e017      	b.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3b01      	subs	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4013      	ands	r3, r2
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	429a      	cmp	r2, r3
 800329e:	d19b      	bne.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3720      	adds	r7, #32
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000078 	.word	0x20000078

080032b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	@ 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032c2:	f7fd fc21 	bl	8000b08 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	4413      	add	r3, r2
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80032d2:	f7fd fc19 	bl	8000b08 <HAL_GetTick>
 80032d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	330c      	adds	r3, #12
 80032de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032e0:	4b3d      	ldr	r3, [pc, #244]	@ (80033d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00da      	lsls	r2, r3, #3
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	0d1b      	lsrs	r3, r3, #20
 80032f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032f8:	e060      	b.n	80033bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003300:	d107      	bne.n	8003312 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003310:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d050      	beq.n	80033bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800331a:	f7fd fbf5 	bl	8000b08 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003326:	429a      	cmp	r2, r3
 8003328:	d902      	bls.n	8003330 <SPI_WaitFifoStateUntilTimeout+0x80>
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	2b00      	cmp	r3, #0
 800332e:	d13d      	bne.n	80033ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800333e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003348:	d111      	bne.n	800336e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003352:	d004      	beq.n	800335e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800335c:	d107      	bne.n	800336e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800336c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003376:	d10f      	bne.n	8003398 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e010      	b.n	80033ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d196      	bne.n	80032fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3728      	adds	r7, #40	@ 0x28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000078 	.word	0x20000078

080033dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033f0:	d111      	bne.n	8003416 <SPI_EndRxTransaction+0x3a>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033fa:	d004      	beq.n	8003406 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003404:	d107      	bne.n	8003416 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2200      	movs	r2, #0
 800341e:	2180      	movs	r1, #128	@ 0x80
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f7ff febd 	bl	80031a0 <SPI_WaitFlagStateUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d007      	beq.n	800343c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e023      	b.n	8003484 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003444:	d11d      	bne.n	8003482 <SPI_EndRxTransaction+0xa6>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800344e:	d004      	beq.n	800345a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003458:	d113      	bne.n	8003482 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2200      	movs	r2, #0
 8003462:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7ff ff22 	bl	80032b0 <SPI_WaitFifoStateUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003476:	f043 0220 	orr.w	r2, r3, #32
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e000      	b.n	8003484 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2200      	movs	r2, #0
 80034a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff ff03 	bl	80032b0 <SPI_WaitFifoStateUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e027      	b.n	8003510 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2200      	movs	r2, #0
 80034c8:	2180      	movs	r1, #128	@ 0x80
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f7ff fe68 	bl	80031a0 <SPI_WaitFlagStateUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034da:	f043 0220 	orr.w	r2, r3, #32
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e014      	b.n	8003510 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f7ff fedc 	bl	80032b0 <SPI_WaitFifoStateUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003502:	f043 0220 	orr.w	r2, r3, #32
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e000      	b.n	8003510 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <memset>:
 8003518:	4402      	add	r2, r0
 800351a:	4603      	mov	r3, r0
 800351c:	4293      	cmp	r3, r2
 800351e:	d100      	bne.n	8003522 <memset+0xa>
 8003520:	4770      	bx	lr
 8003522:	f803 1b01 	strb.w	r1, [r3], #1
 8003526:	e7f9      	b.n	800351c <memset+0x4>

08003528 <__libc_init_array>:
 8003528:	b570      	push	{r4, r5, r6, lr}
 800352a:	4d0d      	ldr	r5, [pc, #52]	@ (8003560 <__libc_init_array+0x38>)
 800352c:	4c0d      	ldr	r4, [pc, #52]	@ (8003564 <__libc_init_array+0x3c>)
 800352e:	1b64      	subs	r4, r4, r5
 8003530:	10a4      	asrs	r4, r4, #2
 8003532:	2600      	movs	r6, #0
 8003534:	42a6      	cmp	r6, r4
 8003536:	d109      	bne.n	800354c <__libc_init_array+0x24>
 8003538:	4d0b      	ldr	r5, [pc, #44]	@ (8003568 <__libc_init_array+0x40>)
 800353a:	4c0c      	ldr	r4, [pc, #48]	@ (800356c <__libc_init_array+0x44>)
 800353c:	f000 f818 	bl	8003570 <_init>
 8003540:	1b64      	subs	r4, r4, r5
 8003542:	10a4      	asrs	r4, r4, #2
 8003544:	2600      	movs	r6, #0
 8003546:	42a6      	cmp	r6, r4
 8003548:	d105      	bne.n	8003556 <__libc_init_array+0x2e>
 800354a:	bd70      	pop	{r4, r5, r6, pc}
 800354c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003550:	4798      	blx	r3
 8003552:	3601      	adds	r6, #1
 8003554:	e7ee      	b.n	8003534 <__libc_init_array+0xc>
 8003556:	f855 3b04 	ldr.w	r3, [r5], #4
 800355a:	4798      	blx	r3
 800355c:	3601      	adds	r6, #1
 800355e:	e7f2      	b.n	8003546 <__libc_init_array+0x1e>
 8003560:	08003598 	.word	0x08003598
 8003564:	08003598 	.word	0x08003598
 8003568:	08003598 	.word	0x08003598
 800356c:	0800359c 	.word	0x0800359c

08003570 <_init>:
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003572:	bf00      	nop
 8003574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003576:	bc08      	pop	{r3}
 8003578:	469e      	mov	lr, r3
 800357a:	4770      	bx	lr

0800357c <_fini>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	bf00      	nop
 8003580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003582:	bc08      	pop	{r3}
 8003584:	469e      	mov	lr, r3
 8003586:	4770      	bx	lr
